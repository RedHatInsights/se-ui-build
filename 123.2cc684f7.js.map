{"version":3,"file":"123.2cc684f7.js","mappings":"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","sources":["webpack://smartevents-ui/./src/app/components/Breadcrumb/Breadcrumb.tsx","webpack://smartevents-ui/./src/app/components/Table/Table.tsx","webpack://smartevents-ui/./src/app/components/Pagination/Pagination.tsx","webpack://smartevents-ui/./src/app/components/TableSkeleton/TableSkeleton.tsx","webpack://smartevents-ui/./src/app/components/TableWithPagination/TableWithPagination.tsx","webpack://smartevents-ui/./src/app/Instance/InstanceDetails/InstanceDetails.tsx","webpack://smartevents-ui/./src/app/components/StatusLabel/StatusLabel.tsx","webpack://smartevents-ui/./openapi/generated/base.ts","webpack://smartevents-ui/./openapi/generated/common.ts","webpack://smartevents-ui/./openapi/generated/api/bridges-api.ts","webpack://smartevents-ui/./openapi/generated/api/processors-api.ts","webpack://smartevents-ui/./openapi/generated/configuration.ts","webpack://smartevents-ui/./openapi/generated/model/bridge-error-type.ts","webpack://smartevents-ui/./openapi/generated/model/managed-resource-status.ts","webpack://smartevents-ui/./src/hooks/useBridgesApi/useGetBridgeApi.ts","webpack://smartevents-ui/./src/app/components/PageHeaderSkeleton/PageHeaderSkeleton.tsx","webpack://smartevents-ui/./src/app/components/TableWithPaginationSkeleton/TableWithPaginationSkeleton.tsx","webpack://smartevents-ui/./src/hooks/useProcessorsApi/useGetProcessorsApi.ts","webpack://smartevents-ui/./src/hooks/usePolling/usePolling.ts","webpack://smartevents-ui/./src/app/components/DeleteModal/DeleteModal.tsx","webpack://smartevents-ui/./src/app/Instance/DeleteInstance/DeleteInstance.tsx","webpack://smartevents-ui/./src/hooks/useBridgesApi/useDeleteBridgeApi.ts","webpack://smartevents-ui/./src/utils/resourceUtils.tsx","webpack://smartevents-ui/./src/app/Processor/DeleteProcessor/DeleteProcessor.tsx","webpack://smartevents-ui/./src/hooks/useProcessorsApi/useDeleteProcessorApi.ts","webpack://smartevents-ui/./src/app/Instance/InstancePage/InstancePage.tsx","webpack://smartevents-ui/./src/app/Instance/CreateInstance/CreateInstance.tsx","webpack://smartevents-ui/./src/app/Instance/InstancesListPage/InstancesListPage.tsx","webpack://smartevents-ui/./src/hooks/useBridgesApi/useGetBridgesApi.ts","webpack://smartevents-ui/./src/hooks/useBridgesApi/useCreateBridgeApi.ts","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/FiltersEdit/FiltersEdit.tsx","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/useValidationBase.ts","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/useValidateConfigParams.ts","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/ActionEdit/ActionEdit.tsx","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/SourceEdit/SourceEdit.tsx","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/ProcessorEdit.tsx","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/useValidateProcessor.ts","webpack://smartevents-ui/./src/app/Processor/ProcessorEdit/ProcessorEditSkeleton.tsx","webpack://smartevents-ui/./src/app/Processor/CreateProcessorPage/CreateProcessorPage.tsx","webpack://smartevents-ui/./src/hooks/useProcessorsApi/useAddProcessorToBridgeApi.ts","webpack://smartevents-ui/./src/app/Processor/ProcessorDetail/ProcessorDetail.tsx","webpack://smartevents-ui/./src/app/Processor/ProcessorDetail/ProcessorDetailSkeleton.tsx","webpack://smartevents-ui/./src/app/Processor/ProcessorDetailPage/ProcessorDetailPage.tsx","webpack://smartevents-ui/./src/hooks/useProcessorsApi/useGetProcessorApi.ts","webpack://smartevents-ui/./src/hooks/useProcessorsApi/useUpdateProcessorApi.ts","webpack://smartevents-ui/./src/app/Routes/Routes.tsx","webpack://smartevents-ui/./src/contexts/SmartEventsContext.tsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport {\n  Breadcrumb as PFBreadcrumb,\n  BreadcrumbItem,\n} from \"@patternfly/react-core\";\nimport { Link } from \"react-router-dom\";\n\ninterface BreadcrumbProps {\n  /** Path describing the whole breadcrumb */\n  path: {\n    /** Linking this path item with a specific location */\n    linkTo?: string;\n    /** Label for this path item */\n    label: string;\n  }[];\n}\n\nexport const Breadcrumb: FunctionComponent<BreadcrumbProps> = ({ path }) => {\n  return (\n    <PFBreadcrumb ouiaId=\"breadcrumb\">\n      {path.map((pathItem, itemIndex) => {\n        const isLastItem = itemIndex === path.length - 1;\n        return (\n          <BreadcrumbItem\n            data-ouia-component-type=\"breadcrumb-item\"\n            data-ouia-component-id={pathItem.label}\n            key={itemIndex}\n            isActive={isLastItem}\n            render={({ className }): React.ReactNode =>\n              pathItem.linkTo ? (\n                <Link to={pathItem.linkTo} className={className}>\n                  {pathItem.label}\n                </Link>\n              ) : (\n                pathItem.label\n              )\n            }\n          />\n        );\n      })}\n    </PFBreadcrumb>\n  );\n};\n","import React, { FunctionComponent, ReactElement } from \"react\";\nimport {\n  ActionsColumn,\n  ActionsColumnProps,\n  IRowData,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { css } from \"@patternfly/react-styles\";\n\nexport interface TableColumn {\n  /** Column identifier */\n  accessor: string;\n  /** Displayed label */\n  label: string;\n  /** Custom function to be used to render differently all values on this column */\n  formatter?: (value: IRowData, row?: TableRow) => string | IRowData;\n}\n\nexport interface TableRow extends IRowData {\n  /** Additive property which stores the entire object row data */\n  originalData?: IRowData;\n}\n\nexport type RenderActions = <TRow>(props: {\n  /** PF ActionsColumn component used to render the actions  */\n  ActionsColumn: typeof ActionsColumn;\n  /** The row data passed to the actions */\n  row: TRow;\n}) => ReactElement<ActionsColumnProps> | undefined;\n\ninterface TableProps {\n  /** Accessible name for the table */\n  ariaLabel?: string;\n  /** Columns to display */\n  columns: TableColumn[];\n  /** List of additive css classes */\n  cssClasses?: string | string[];\n  /** Collection of cells to render */\n  rows: TableRow[];\n  /** Style variant for the table */\n  variant?: \"compact\";\n  /** Element to be rendered when there are no rows to display */\n  children?: JSX.Element;\n  /** Render function to add actions to the table */\n  renderActions?: RenderActions;\n}\n\nexport const Table: FunctionComponent<TableProps> = ({\n  ariaLabel = \"Table\",\n  columns,\n  cssClasses,\n  rows,\n  variant,\n  children,\n  renderActions,\n}) => {\n  const transformColumns = (columns: TableColumn[]): string[] => {\n    return columns.map((column) => column.label);\n  };\n\n  const transformRows = (\n    rows: IRowData[],\n    columns: TableColumn[]\n  ): { cells: (string | IRowData)[]; originalData: IRowData }[] => {\n    return rows.map((objectRow) => {\n      return {\n        cells: columns.map((column) => {\n          const accessor = column.accessor;\n          const formatter =\n            column.formatter ?? ((value: IRowData): IRowData => value);\n          const objectRowElement = objectRow[accessor] as TableRow;\n          return formatter(objectRowElement, objectRow);\n        }),\n        originalData: objectRow,\n      };\n    });\n  };\n\n  return (\n    <TableComposable\n      className={css(cssClasses)}\n      variant={variant}\n      aria-label={ariaLabel}\n      ouiaId={ariaLabel}\n    >\n      <Thead>\n        <Tr ouiaId=\"table-head\">\n          {transformColumns(columns).map((column) => (\n            <Th key={column}>{column}</Th>\n          ))}\n        </Tr>\n      </Thead>\n      {!rows.length && children ? (\n        <Tbody>\n          <Tr ouiaId=\"no-data\">\n            <Td colSpan={columns.length}>{children}</Td>\n          </Tr>\n        </Tbody>\n      ) : (\n        <Tbody>\n          {transformRows(rows, columns).map((row: TableRow, rowIndex) => (\n            <Tr\n              ouiaId={row.originalData?.name as string}\n              key={(row.originalData?.id as string) ?? rowIndex}\n            >\n              {row?.cells?.map((cell, cellIndex) => (\n                <Td key={cellIndex}>{cell}</Td>\n              ))}\n              {renderActions && (\n                <Td className=\"pf-c-table__action\">\n                  {renderActions({ row, ActionsColumn })}\n                </Td>\n              )}\n            </Tr>\n          ))}\n        </Tbody>\n      )}\n    </TableComposable>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\n\nimport {\n  Pagination as PFPagination,\n  PaginationVariant,\n} from \"@patternfly/react-core\";\n\ninterface PaginationProps {\n  /** Custom class name */\n  className?: string;\n  /** Number of elements */\n  itemCount: number;\n  /** Current page number */\n  page: number;\n  /** Number of elements displayed for each page */\n  perPage: number;\n  /** Function triggered when the page number, or the number of elements displayed in each page, get changed */\n  onChange: (page: number, perPage: number) => void;\n  /** Indicates if pagination is compact  */\n  isCompact?: boolean;\n  /** Pagination variant */\n  variant?: PaginationVariant;\n  /** data-ouia-component-id identifier for automated UI testing */\n  ouiaId?: string;\n}\n\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  className,\n  itemCount,\n  page,\n  perPage,\n  onChange,\n  isCompact = false,\n  variant,\n  ouiaId,\n}) => (\n  <PFPagination\n    data-ouia-component-type=\"pagination-control\"\n    ouiaId={ouiaId}\n    className={className}\n    style={{ float: \"right\" }}\n    itemCount={itemCount}\n    page={page}\n    perPage={perPage}\n    perPageOptions={[\n      {\n        title: \"10\",\n        value: 10,\n      },\n      {\n        title: \"20\",\n        value: 20,\n      },\n      {\n        title: \"50\",\n        value: 50,\n      },\n      {\n        title: \"100\",\n        value: 100,\n      },\n    ]}\n    onSetPage={(_, page): void => onChange(page, perPage)}\n    onPerPageSelect={(_, perPage): void => onChange(page, perPage)}\n    isCompact={isCompact}\n    variant={variant}\n  />\n);\n","import { TableColumn } from \"@app/components/Table\";\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport React from \"react\";\nimport { Skeleton } from \"@patternfly/react-core\";\n\nexport interface TableSkeletonProps {\n  /** List of columns for the table */\n  columns: TableColumn[];\n  /** The total number of rows for the table */\n  totalRows: number;\n  /** True, if table has action column */\n  hasActionColumn: boolean;\n}\n\nexport const TableSkeleton = ({\n  columns,\n  totalRows,\n  hasActionColumn,\n}: TableSkeletonProps): JSX.Element => {\n  return (\n    <TableComposable aria-label=\"table-skeleton\">\n      <Thead>\n        <Tr>\n          {columns.map((column) => (\n            <Th key={column.label}>{column.label}</Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {[...Array(totalRows).keys()].map((rowNumber) => (\n          <Tr key={rowNumber}>\n            {columns.map((column, cellIndex) => (\n              <Td key={cellIndex}>\n                <Skeleton key={column.label} />\n              </Td>\n            ))}\n            {hasActionColumn && (\n              <Td className=\"pf-c-table__action\">\n                <ActionsColumn />\n              </Td>\n            )}\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n  Card,\n  PaginationVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  RenderActions,\n  Table,\n  TableColumn,\n  TableRow,\n} from \"@app/components/Table\";\nimport { Pagination } from \"@app/components/Pagination/Pagination\";\nimport { TableSkeleton } from \"@app/components/TableSkeleton/TableSkeleton\";\n\ninterface TableWithPaginationProps {\n  /** List of columns for the table */\n  columns: TableColumn[];\n  /** List of rows for the table */\n  rows: TableRow[];\n  /** The total number of rows for the table */\n  totalRows: number;\n  /** The current page number (0-based) */\n  pageNumber: number;\n  /** The page size */\n  pageSize: number;\n  /** Called when pagination params are changed by the user */\n  onPaginationChange: (pageNumber: number, pageSize: number) => void;\n  /** Table label */\n  tableLabel: string;\n  /** Custom element you want to be in the toolbar */\n  customToolbarElement?: React.ReactNode;\n  /** True, when table data is loading */\n  isLoading?: boolean;\n  /** Element to be rendered when there are no rows to display */\n  children?: JSX.Element;\n  /** Render function to add actions to the table */\n  renderActions?: RenderActions;\n}\n\nexport const FIRST_PAGE = 0;\nexport const DEFAULT_PAGE_SIZE = 10;\n\n/**\n * The goal of this component is to provide a reusable template composed by:\n * - Toolbar (with top-pagination)\n * - Table\n * - bottom-pagination\n */\nexport const TableWithPagination: FunctionComponent<\n  TableWithPaginationProps\n> = ({\n  columns,\n  customToolbarElement,\n  isLoading,\n  rows,\n  totalRows,\n  pageNumber,\n  pageSize,\n  onPaginationChange,\n  tableLabel,\n  children,\n  renderActions,\n}) => {\n  const getPagination = (isBottom: boolean): JSX.Element => (\n    <Pagination\n      itemCount={totalRows}\n      page={pageNumber + 1}\n      perPage={pageSize}\n      isCompact={!isBottom}\n      {...(isBottom ? { variant: PaginationVariant.bottom } : {})}\n      onChange={(page, perPage): void => onPaginationChange(page - 1, perPage)}\n      ouiaId={!isBottom ? \"rows-top\" : \"rows-bottom\"}\n    />\n  );\n\n  return (\n    <Card ouiaId={tableLabel}>\n      <Toolbar ouiaId=\"rows-toolbar\">\n        <ToolbarContent>\n          <ToolbarItem\n            className=\"overview__toolbar-custom\"\n            alignment={{ default: \"alignLeft\" }}\n          >\n            {customToolbarElement}\n          </ToolbarItem>\n          <ToolbarItem\n            variant=\"pagination\"\n            alignment={{ default: \"alignRight\" }}\n          >\n            {getPagination(false)}\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      {isLoading ? (\n        <TableSkeleton\n          columns={columns}\n          totalRows={pageSize}\n          hasActionColumn={true}\n        />\n      ) : (\n        <Table\n          ariaLabel={tableLabel}\n          columns={columns}\n          cssClasses=\"overview__table\"\n          rows={rows}\n          renderActions={renderActions}\n        >\n          {children}\n        </Table>\n      )}\n      {getPagination(true)}\n    </Card>\n  );\n};\n","import React from \"react\";\nimport {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { format } from \"date-fns\";\nimport { BridgeResponse } from \"@openapi/generated\";\n\ninterface InstanceDetailsProps {\n  instance: BridgeResponse;\n  onClosingDetails: (event: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport const InstanceDetails = ({\n  instance,\n  onClosingDetails,\n}: InstanceDetailsProps): JSX.Element => {\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const formatDate = (dateStr: string): string =>\n    format(new Date(dateStr), \"PPPP p\");\n\n  return (\n    <DrawerPanelContent\n      widths={{ default: \"width_33\" }}\n      data-ouia-component-id=\"instance-details-panel\"\n    >\n      <DrawerHead>\n        <Stack>\n          <StackItem>\n            <TextContent>\n              <Text ouiaId=\"instance-details-name-label\" component=\"small\">\n                {t(\"common.name\")}\n              </Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <TextContent>\n              <Text ouiaId=\"instance-details-name\" component=\"h2\">\n                {instance.name}\n              </Text>\n            </TextContent>\n          </StackItem>\n        </Stack>\n        <DrawerActions>\n          <DrawerCloseButton\n            onClick={onClosingDetails}\n            data-ouia-component-id=\"close-instance-details\"\n          />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerContentBody>\n        <DescriptionList isHorizontal isCompact>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"common.id\")}</DescriptionListTerm>\n            <DescriptionListDescription data-ouia-component-id=\"instance-details-id\">\n              {instance.id}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"common.url\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              <ClipboardCopy\n                data-ouia-component-id=\"instance-details-endpoint\"\n                isReadOnly\n                hoverTip={t(\"common.copy\")}\n                clickTip={t(\"common.copied\")}\n              >\n                {instance.endpoint}\n              </ClipboardCopy>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"common.submittedAt\")}</DescriptionListTerm>\n            <DescriptionListDescription data-ouia-component-id=\"instance-details-submitted-date\">\n              {instance.submitted_at && formatDate(instance.submitted_at)}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"common.publishedAt\")}</DescriptionListTerm>\n            <DescriptionListDescription data-ouia-component-id=\"instance-details-published-date\">\n              {instance.published_at && formatDate(instance.published_at)}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </DrawerContentBody>\n    </DrawerPanelContent>\n  );\n};\n","import React from \"react\";\nimport { CheckCircleIcon } from \"@patternfly/react-icons\";\nimport { Label } from \"@patternfly/react-core\";\n\n// TODO: temporary label for demo purposes. Replace it with component from shared\n//  library. See https://issues.redhat.com/browse/MGDOBR-523\n\ninterface StatusLabelProps {\n  status: string;\n}\n\nconst StatusLabel = (props: StatusLabelProps): JSX.Element => {\n  const { status } = props;\n\n  return (\n    <Label\n      color={status === \"ready\" ? \"green\" : \"grey\"}\n      icon={status === \"ready\" ? <CheckCircleIcon /> : null}\n      style={{ textTransform: \"capitalize\" }}\n      variant=\"outline\"\n    >\n      {status}\n    </Label>\n  );\n};\n\nexport default StatusLabel;\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { BridgeListResponse } from '../model';\n// @ts-ignore\nimport { BridgeRequest } from '../model';\n// @ts-ignore\nimport { BridgeResponse } from '../model';\n/**\n * BridgesApi - axios parameter creator\n * @export\n */\nexport const BridgesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a Bridge instance for the authenticated user.\n         * @summary Create a Bridge instance\n         * @param {BridgeRequest} [bridgeRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBridge: async (bridgeRequest?: BridgeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/bridges`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bridgeRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a Bridge instance of the authenticated user by ID.\n         * @summary Delete a Bridge instance\n         * @param {string} bridgeId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBridge: async (bridgeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('deleteBridge', 'bridgeId', bridgeId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a Bridge instance of the authenticated user by ID.\n         * @summary Get a Bridge instance\n         * @param {string} bridgeId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBridge: async (bridgeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('getBridge', 'bridgeId', bridgeId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the list of Bridge instances for the authenticated user.\n         * @summary Get the list of Bridge instances\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBridges: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/bridges`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BridgesApi - functional programming interface\n * @export\n */\nexport const BridgesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = BridgesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a Bridge instance for the authenticated user.\n         * @summary Create a Bridge instance\n         * @param {BridgeRequest} [bridgeRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createBridge(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BridgeResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createBridge(bridgeRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a Bridge instance of the authenticated user by ID.\n         * @summary Delete a Bridge instance\n         * @param {string} bridgeId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBridge(bridgeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBridge(bridgeId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a Bridge instance of the authenticated user by ID.\n         * @summary Get a Bridge instance\n         * @param {string} bridgeId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBridge(bridgeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BridgeResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBridge(bridgeId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the list of Bridge instances for the authenticated user.\n         * @summary Get the list of Bridge instances\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBridges(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BridgeListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBridges(page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * BridgesApi - factory interface\n * @export\n */\nexport const BridgesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = BridgesApiFp(configuration)\n    return {\n        /**\n         * Create a Bridge instance for the authenticated user.\n         * @summary Create a Bridge instance\n         * @param {BridgeRequest} [bridgeRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBridge(bridgeRequest?: BridgeRequest, options?: any): AxiosPromise<BridgeResponse> {\n            return localVarFp.createBridge(bridgeRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a Bridge instance of the authenticated user by ID.\n         * @summary Delete a Bridge instance\n         * @param {string} bridgeId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBridge(bridgeId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteBridge(bridgeId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a Bridge instance of the authenticated user by ID.\n         * @summary Get a Bridge instance\n         * @param {string} bridgeId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBridge(bridgeId: string, options?: any): AxiosPromise<BridgeResponse> {\n            return localVarFp.getBridge(bridgeId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the list of Bridge instances for the authenticated user.\n         * @summary Get the list of Bridge instances\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBridges(page?: number, size?: number, options?: any): AxiosPromise<BridgeListResponse> {\n            return localVarFp.getBridges(page, size, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BridgesApi - interface\n * @export\n * @interface BridgesApi\n */\nexport interface BridgesApiInterface {\n    /**\n     * Create a Bridge instance for the authenticated user.\n     * @summary Create a Bridge instance\n     * @param {BridgeRequest} [bridgeRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApiInterface\n     */\n    createBridge(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): AxiosPromise<BridgeResponse>;\n\n    /**\n     * Delete a Bridge instance of the authenticated user by ID.\n     * @summary Delete a Bridge instance\n     * @param {string} bridgeId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApiInterface\n     */\n    deleteBridge(bridgeId: string, options?: AxiosRequestConfig): AxiosPromise<void>;\n\n    /**\n     * Get a Bridge instance of the authenticated user by ID.\n     * @summary Get a Bridge instance\n     * @param {string} bridgeId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApiInterface\n     */\n    getBridge(bridgeId: string, options?: AxiosRequestConfig): AxiosPromise<BridgeResponse>;\n\n    /**\n     * Get the list of Bridge instances for the authenticated user.\n     * @summary Get the list of Bridge instances\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApiInterface\n     */\n    getBridges(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<BridgeListResponse>;\n\n}\n\n/**\n * BridgesApi - object-oriented interface\n * @export\n * @class BridgesApi\n * @extends {BaseAPI}\n */\nexport class BridgesApi extends BaseAPI implements BridgesApiInterface {\n    /**\n     * Create a Bridge instance for the authenticated user.\n     * @summary Create a Bridge instance\n     * @param {BridgeRequest} [bridgeRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApi\n     */\n    public createBridge(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig) {\n        return BridgesApiFp(this.configuration).createBridge(bridgeRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a Bridge instance of the authenticated user by ID.\n     * @summary Delete a Bridge instance\n     * @param {string} bridgeId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApi\n     */\n    public deleteBridge(bridgeId: string, options?: AxiosRequestConfig) {\n        return BridgesApiFp(this.configuration).deleteBridge(bridgeId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a Bridge instance of the authenticated user by ID.\n     * @summary Get a Bridge instance\n     * @param {string} bridgeId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApi\n     */\n    public getBridge(bridgeId: string, options?: AxiosRequestConfig) {\n        return BridgesApiFp(this.configuration).getBridge(bridgeId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the list of Bridge instances for the authenticated user.\n     * @summary Get the list of Bridge instances\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BridgesApi\n     */\n    public getBridges(page?: number, size?: number, options?: AxiosRequestConfig) {\n        return BridgesApiFp(this.configuration).getBridges(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ProcessorListResponse } from '../model';\n// @ts-ignore\nimport { ProcessorRequest } from '../model';\n// @ts-ignore\nimport { ProcessorResponse } from '../model';\n/**\n * ProcessorsApi - axios parameter creator\n * @export\n */\nexport const ProcessorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a Processor of a Bridge instance for the authenticated user.\n         * @summary Create a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {ProcessorRequest} [processorRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addProcessorToBridge: async (bridgeId: string, processorRequest?: ProcessorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('addProcessorToBridge', 'bridgeId', bridgeId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}/processors`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a Processor of a Bridge instance for the authenticated user.\n         * @summary Delete a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteProcessor: async (bridgeId: string, processorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('deleteProcessor', 'bridgeId', bridgeId)\n            // verify required parameter 'processorId' is not null or undefined\n            assertParamExists('deleteProcessor', 'processorId', processorId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}/processors/{processorId}`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)))\n                .replace(`{${\"processorId\"}}`, encodeURIComponent(String(processorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a Processor of a Bridge instance for the authenticated user.\n         * @summary Get a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProcessor: async (bridgeId: string, processorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('getProcessor', 'bridgeId', bridgeId)\n            // verify required parameter 'processorId' is not null or undefined\n            assertParamExists('getProcessor', 'processorId', processorId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}/processors/{processorId}`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)))\n                .replace(`{${\"processorId\"}}`, encodeURIComponent(String(processorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the list of Processors of a Bridge instance for the authenticated user.\n         * @summary Get the list of Processors of a Bridge instance\n         * @param {string} bridgeId \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProcessors: async (bridgeId: string, page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('listProcessors', 'bridgeId', bridgeId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}/processors`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a Processor instance Filter definition or Transformation template for the authenticated user.\n         * @summary Update a Processor instance Filter definition or Transformation template.\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {ProcessorRequest} [processorRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateProcessor: async (bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bridgeId' is not null or undefined\n            assertParamExists('updateProcessor', 'bridgeId', bridgeId)\n            // verify required parameter 'processorId' is not null or undefined\n            assertParamExists('updateProcessor', 'processorId', processorId)\n            const localVarPath = `/api/v1/bridges/{bridgeId}/processors/{processorId}`\n                .replace(`{${\"bridgeId\"}}`, encodeURIComponent(String(bridgeId)))\n                .replace(`{${\"processorId\"}}`, encodeURIComponent(String(processorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ProcessorsApi - functional programming interface\n * @export\n */\nexport const ProcessorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ProcessorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a Processor of a Bridge instance for the authenticated user.\n         * @summary Create a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {ProcessorRequest} [processorRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addProcessorToBridge(bridgeId, processorRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a Processor of a Bridge instance for the authenticated user.\n         * @summary Delete a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProcessor(bridgeId, processorId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a Processor of a Bridge instance for the authenticated user.\n         * @summary Get a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessor(bridgeId, processorId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the list of Processors of a Bridge instance for the authenticated user.\n         * @summary Get the list of Processors of a Bridge instance\n         * @param {string} bridgeId \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listProcessors(bridgeId: string, page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listProcessors(bridgeId, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a Processor instance Filter definition or Transformation template for the authenticated user.\n         * @summary Update a Processor instance Filter definition or Transformation template.\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {ProcessorRequest} [processorRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProcessor(bridgeId, processorId, processorRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ProcessorsApi - factory interface\n * @export\n */\nexport const ProcessorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ProcessorsApiFp(configuration)\n    return {\n        /**\n         * Create a Processor of a Bridge instance for the authenticated user.\n         * @summary Create a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {ProcessorRequest} [processorRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: any): AxiosPromise<ProcessorResponse> {\n            return localVarFp.addProcessorToBridge(bridgeId, processorRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a Processor of a Bridge instance for the authenticated user.\n         * @summary Delete a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteProcessor(bridgeId: string, processorId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteProcessor(bridgeId, processorId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a Processor of a Bridge instance for the authenticated user.\n         * @summary Get a Processor of a Bridge instance\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProcessor(bridgeId: string, processorId: string, options?: any): AxiosPromise<ProcessorResponse> {\n            return localVarFp.getProcessor(bridgeId, processorId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the list of Processors of a Bridge instance for the authenticated user.\n         * @summary Get the list of Processors of a Bridge instance\n         * @param {string} bridgeId \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProcessors(bridgeId: string, page?: number, size?: number, options?: any): AxiosPromise<ProcessorListResponse> {\n            return localVarFp.listProcessors(bridgeId, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a Processor instance Filter definition or Transformation template for the authenticated user.\n         * @summary Update a Processor instance Filter definition or Transformation template.\n         * @param {string} bridgeId \n         * @param {string} processorId \n         * @param {ProcessorRequest} [processorRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: any): AxiosPromise<ProcessorResponse> {\n            return localVarFp.updateProcessor(bridgeId, processorId, processorRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ProcessorsApi - interface\n * @export\n * @interface ProcessorsApi\n */\nexport interface ProcessorsApiInterface {\n    /**\n     * Create a Processor of a Bridge instance for the authenticated user.\n     * @summary Create a Processor of a Bridge instance\n     * @param {string} bridgeId \n     * @param {ProcessorRequest} [processorRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApiInterface\n     */\n    addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;\n\n    /**\n     * Delete a Processor of a Bridge instance for the authenticated user.\n     * @summary Delete a Processor of a Bridge instance\n     * @param {string} bridgeId \n     * @param {string} processorId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApiInterface\n     */\n    deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): AxiosPromise<void>;\n\n    /**\n     * Get a Processor of a Bridge instance for the authenticated user.\n     * @summary Get a Processor of a Bridge instance\n     * @param {string} bridgeId \n     * @param {string} processorId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApiInterface\n     */\n    getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;\n\n    /**\n     * Get the list of Processors of a Bridge instance for the authenticated user.\n     * @summary Get the list of Processors of a Bridge instance\n     * @param {string} bridgeId \n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApiInterface\n     */\n    listProcessors(bridgeId: string, page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<ProcessorListResponse>;\n\n    /**\n     * Update a Processor instance Filter definition or Transformation template for the authenticated user.\n     * @summary Update a Processor instance Filter definition or Transformation template.\n     * @param {string} bridgeId \n     * @param {string} processorId \n     * @param {ProcessorRequest} [processorRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApiInterface\n     */\n    updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;\n\n}\n\n/**\n * ProcessorsApi - object-oriented interface\n * @export\n * @class ProcessorsApi\n * @extends {BaseAPI}\n */\nexport class ProcessorsApi extends BaseAPI implements ProcessorsApiInterface {\n    /**\n     * Create a Processor of a Bridge instance for the authenticated user.\n     * @summary Create a Processor of a Bridge instance\n     * @param {string} bridgeId \n     * @param {ProcessorRequest} [processorRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApi\n     */\n    public addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig) {\n        return ProcessorsApiFp(this.configuration).addProcessorToBridge(bridgeId, processorRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a Processor of a Bridge instance for the authenticated user.\n     * @summary Delete a Processor of a Bridge instance\n     * @param {string} bridgeId \n     * @param {string} processorId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApi\n     */\n    public deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig) {\n        return ProcessorsApiFp(this.configuration).deleteProcessor(bridgeId, processorId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a Processor of a Bridge instance for the authenticated user.\n     * @summary Get a Processor of a Bridge instance\n     * @param {string} bridgeId \n     * @param {string} processorId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApi\n     */\n    public getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig) {\n        return ProcessorsApiFp(this.configuration).getProcessor(bridgeId, processorId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the list of Processors of a Bridge instance for the authenticated user.\n     * @summary Get the list of Processors of a Bridge instance\n     * @param {string} bridgeId \n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApi\n     */\n    public listProcessors(bridgeId: string, page?: number, size?: number, options?: AxiosRequestConfig) {\n        return ProcessorsApiFp(this.configuration).listProcessors(bridgeId, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a Processor instance Filter definition or Transformation template for the authenticated user.\n     * @summary Update a Processor instance Filter definition or Transformation template.\n     * @param {string} bridgeId \n     * @param {string} processorId \n     * @param {ProcessorRequest} [processorRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProcessorsApi\n     */\n    public updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig) {\n        return ProcessorsApiFp(this.configuration).updateProcessor(bridgeId, processorId, processorRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const BridgeErrorType = {\n    User: 'USER',\n    Platform: 'PLATFORM'\n} as const;\n\nexport type BridgeErrorType = typeof BridgeErrorType[keyof typeof BridgeErrorType];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The api exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ManagedResourceStatus = {\n    Accepted: 'accepted',\n    Preparing: 'preparing',\n    Provisioning: 'provisioning',\n    Ready: 'ready',\n    Deprovision: 'deprovision',\n    Deleting: 'deleting',\n    Deleted: 'deleted',\n    Failed: 'failed'\n} as const;\n\nexport type ManagedResourceStatus = typeof ManagedResourceStatus[keyof typeof ManagedResourceStatus];\n\n\n\n","import { BridgesApi, Configuration, BridgeResponse } from \"@openapi/generated\";\nimport { useCallback, useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useGetBridgeApi(): {\n  getBridge: (bridgeId: string) => void;\n  bridge?: BridgeResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [bridge, setBridge] = useState<BridgeResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(true);\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const getBridge = useCallback(\n    (bridgeId: string): void => {\n      const bridgeApi = new BridgesApi(\n        new Configuration({\n          accessToken: getToken,\n          basePath: apiBaseUrl,\n        })\n      );\n      bridgeApi\n        .getBridge(bridgeId)\n        .then((response) => setBridge(response.data))\n        .catch((err) => setError(err))\n        .finally(() => setIsLoading(false));\n    },\n    [getToken, apiBaseUrl]\n  );\n\n  return { getBridge, isLoading, bridge, error };\n}\n","import React from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Tab,\n  Tabs,\n} from \"@patternfly/react-core\";\n\ninterface PageHeaderSkeletonProps {\n  pageTitle: string;\n  hasEditButton?: boolean;\n  hasActionDropdown: boolean;\n  hasLabel: boolean;\n  totalTabs?: number;\n}\n\nconst PageHeaderSkeleton = (props: PageHeaderSkeletonProps): JSX.Element => {\n  const {\n    pageTitle,\n    hasEditButton = false,\n    hasActionDropdown,\n    hasLabel,\n    totalTabs = 0,\n  } = props;\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        hasShadowBottom={totalTabs === 0}\n        type=\"breadcrumb\"\n      >\n        <Split hasGutter={true}>\n          <SplitItem>\n            <Skeleton fontSize=\"sm\" width={\"140px\"} />\n          </SplitItem>\n          <SplitItem>\n            <Skeleton fontSize=\"sm\" width={\"140px\"} />\n          </SplitItem>\n        </Split>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        hasShadowBottom={totalTabs === 0}\n      >\n        <Split hasGutter={true}>\n          <SplitItem isFilled={true}>\n            <Stack hasGutter={true}>\n              <StackItem>\n                <Skeleton\n                  fontSize=\"2xl\"\n                  width={\"20%\"}\n                  screenreaderText={pageTitle}\n                />\n              </StackItem>\n              {hasLabel && (\n                <StackItem>\n                  <Skeleton fontSize=\"md\" width={\"80px\"} />\n                </StackItem>\n              )}\n            </Stack>\n          </SplitItem>\n          {hasEditButton && (\n            <SplitItem>\n              <Skeleton fontSize=\"2xl\" width={\"60px\"} />\n            </SplitItem>\n          )}\n          {hasActionDropdown && (\n            <SplitItem>\n              <Skeleton fontSize=\"2xl\" width={\"100px\"} />\n            </SplitItem>\n          )}\n        </Split>\n      </PageSection>\n      {totalTabs > 0 && (\n        <PageSection variant={PageSectionVariants.light} type=\"tabs\">\n          <Tabs usePageInsets>\n            {[...Array(totalTabs).keys()].map((tabNumber) => (\n              <Tab\n                key={tabNumber}\n                eventKey={tabNumber}\n                title={<Skeleton fontSize=\"xl\" width={\"100px\"} />}\n              />\n            ))}\n          </Tabs>\n        </PageSection>\n      )}\n    </>\n  );\n};\n\nexport default PageHeaderSkeleton;\n","import {\n  Card,\n  Skeleton,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport React from \"react\";\nimport {\n  TableSkeleton,\n  TableSkeletonProps,\n} from \"@app/components/TableSkeleton/TableSkeleton\";\n\ninterface TableWithPaginationSkeletonProps {\n  /** Custom element you want to be in the toolbar */\n  customToolbarElement?: React.ReactNode;\n}\n\nexport const TableWithPaginationSkeleton = (\n  props: TableSkeletonProps & TableWithPaginationSkeletonProps\n): JSX.Element => {\n  return (\n    <Card ouiaId=\"loading-table\">\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem alignment={{ default: \"alignLeft\" }}>\n            {props.customToolbarElement}\n          </ToolbarItem>\n          <ToolbarItem\n            variant=\"pagination\"\n            alignment={{ default: \"alignRight\" }}\n          >\n            <Skeleton width={\"190px\"} />\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      <TableSkeleton {...props} />\n      <div className=\"pf-c-pagination pf-m-bottom\">\n        <Skeleton width={\"320px\"} />\n      </div>\n    </Card>\n  );\n};\n","import {\n  Configuration,\n  ProcessorListResponse,\n  ProcessorsApi,\n} from \"@openapi/generated\";\nimport { useCallback, useRef, useState } from \"react\";\nimport axios, { CancelTokenSource } from \"axios\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useGetProcessorsApi(): {\n  getProcessors: (\n    bridgeId: string,\n    pageReq?: number,\n    sizeReq?: number,\n    isPolling?: boolean\n  ) => void;\n  processorListResponse?: ProcessorListResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [processorListResponse, setProcessorListResponse] =\n    useState<ProcessorListResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(true);\n  const prevCallTokenSource = useRef<CancelTokenSource>();\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const getProcessors = useCallback(\n    (\n      bridgeId: string,\n      pageReq?: number,\n      sizeReq?: number,\n      isPolling?: boolean\n    ): void => {\n      setIsLoading(!isPolling); // no loading, when the call is generated from a polling\n      prevCallTokenSource.current?.cancel();\n\n      const CancelToken = axios.CancelToken;\n      const source = CancelToken.source();\n      prevCallTokenSource.current = source;\n\n      const processorsApi = new ProcessorsApi(\n        new Configuration({\n          accessToken: getToken,\n          basePath: apiBaseUrl,\n        })\n      );\n      processorsApi\n        .listProcessors(bridgeId, pageReq, sizeReq, {\n          cancelToken: source.token,\n        })\n        .then((response) => {\n          setProcessorListResponse(response.data);\n          setIsLoading(false);\n        })\n        .catch((err) => {\n          if (!axios.isCancel(err)) {\n            setError(err);\n            setIsLoading(false);\n          }\n        });\n    },\n    [getToken, apiBaseUrl]\n  );\n\n  return { getProcessors, isLoading, processorListResponse, error };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePolling(callback: () => void, delay: number): void {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay <= 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return (): void => clearInterval(id);\n  }, [delay]);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  Bullseye,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalBoxBody,\n  ModalVariant,\n  Spinner,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport \"./DeleteModal.css\";\n\nexport interface DeleteModalProps {\n  /** Component ID according to the OUIA standard */\n  ouiaId: string;\n  /** Flag to show/hide the modal */\n  showDialog: boolean;\n  /** The title of the modal */\n  modalTitle: string;\n  /** The name of the resource to delete */\n  resourceName: string | undefined;\n  /** The type of the resource to delete (i.e. \"Processor\" or \"Smart Event Instance\" etc.) */\n  resourceType: string | undefined;\n  /** Callback executed when the deletion is canceled */\n  onCancel: () => void;\n  /** Callback executed when the deletion is confirmed */\n  onConfirm: () => void;\n  /** Flag to indicate if the deletion is in progress */\n  isLoading: boolean;\n  /** Flag to indicate if a preload is in progress to check if the deletion is possible */\n  isPreloading: boolean;\n  /** Reason why the deletion is not possible */\n  blockedDeletionReason?: string;\n}\n\nexport const DeleteModal = (props: DeleteModalProps): JSX.Element => {\n  const {\n    ouiaId,\n    modalTitle,\n    resourceName,\n    resourceType,\n    onCancel,\n    onConfirm,\n    showDialog,\n    isPreloading,\n    isLoading,\n    blockedDeletionReason,\n  } = props;\n  const { t } = useTranslation(\"openbridgeTempDictionary\");\n  const [nameValue, setNameValue] = useState(\"\");\n  const canDelete = nameValue === resourceName;\n\n  const onCancelDelete = (): void => {\n    setNameValue(\"\");\n    onCancel();\n  };\n\n  const onConfirmDelete = (): void => {\n    onConfirm();\n  };\n\n  useEffect(() => {\n    setNameValue(\"\");\n  }, [resourceName]);\n\n  const deleteActions = [\n    <Button\n      ouiaId=\"confirm\"\n      key=\"confirm\"\n      variant=\"danger\"\n      isDisabled={!canDelete || isLoading}\n      isLoading={isLoading}\n      onClick={onConfirmDelete}\n    >\n      {t(\"common.delete\")}\n    </Button>,\n    <Button\n      ouiaId=\"cancel\"\n      key=\"cancel\"\n      variant=\"link\"\n      onClick={onCancelDelete}\n      isDisabled={isLoading}\n    >\n      {t(\"common.cancel\")}\n    </Button>,\n  ];\n\n  const closeActions = [\n    <Button ouiaId=\"close\" key=\"close\" onClick={onCancelDelete}>\n      {t(\"common.close\")}\n    </Button>,\n  ];\n\n  return (\n    <Modal\n      ouiaId={ouiaId}\n      variant={ModalVariant.small}\n      title={modalTitle}\n      titleIconVariant=\"warning\"\n      isOpen={showDialog}\n      onClose={onCancel}\n      actions={blockedDeletionReason ? closeActions : deleteActions}\n    >\n      <ModalBoxBody>\n        {isPreloading && (\n          <Bullseye className={\"delete-modal-body__bullseye\"}>\n            <Spinner isSVG size=\"lg\" aria-label={t(\"common.loading\")} />\n          </Bullseye>\n        )}\n        {!isPreloading && blockedDeletionReason && (\n          <Bullseye className={\"delete-modal-body__bullseye\"}>\n            <TextContent>\n              <Text component={TextVariants.p}>{blockedDeletionReason}</Text>\n            </TextContent>\n          </Bullseye>\n        )}\n        {!isPreloading && !blockedDeletionReason && (\n          <Stack hasGutter={true}>\n            <StackItem>\n              <TextContent>\n                <Text component={TextVariants.p}>\n                  <Trans\n                    i18nKey={\n                      \"openbridgeTempDictionary:common.resourceWillBeDeletedHTML\"\n                    }\n                    values={{\n                      type: resourceType,\n                      name: resourceName,\n                    }}\n                  />\n                </Text>\n              </TextContent>\n            </StackItem>\n            <StackItem>\n              <Form onSubmit={(event): void => event.preventDefault()}>\n                <FormGroup\n                  label={\n                    <Trans\n                      i18nKey={\n                        \"openbridgeTempDictionary:common.typeNameToConfirmHTML\"\n                      }\n                      values={{\n                        name: resourceName,\n                      }}\n                    />\n                  }\n                  fieldId=\"delete-confirmation-value\"\n                >\n                  <TextInput\n                    id=\"delete-confirmation-value\"\n                    ouiaId=\"delete-confirmation-value\"\n                    value={nameValue}\n                    type=\"text\"\n                    onChange={setNameValue}\n                    isDisabled={isLoading}\n                    aria-label=\"delete-confirmation-value\"\n                    autoComplete={\"off\"}\n                    validated={\n                      canDelete\n                        ? ValidatedOptions.success\n                        : ValidatedOptions.default\n                    }\n                  />\n                </FormGroup>\n              </Form>\n            </StackItem>\n          </Stack>\n        )}\n      </ModalBoxBody>\n    </Modal>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useGetProcessorsApi } from \"../../../hooks/useProcessorsApi/useGetProcessorsApi\";\nimport { DeleteModal } from \"@app/components/DeleteModal/DeleteModal\";\nimport { useDeleteBridgeApi } from \"../../../hooks/useBridgesApi/useDeleteBridgeApi\";\nimport { useTranslation } from \"react-i18next\";\nimport axios from \"axios\";\nimport { ResponseError } from \"../../../types/Error\";\n\ninterface DeleteInstanceProps {\n  /** Flag to show/close the modal */\n  showDeleteModal: boolean;\n  /** The id of the instance to delete */\n  instanceId?: string;\n  /** The name of the instance to delete */\n  instanceName?: string;\n  /** Callback executed when the deletion is confirmed */\n  onDeleted: () => void;\n  /** Callback executed when the deletion is canceled */\n  onCanceled: () => void;\n}\n\nconst DeleteInstance = (props: DeleteInstanceProps): JSX.Element => {\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n  const { showDeleteModal, instanceId, instanceName, onDeleted, onCanceled } =\n    props;\n  const [preloading, setPreloading] = useState(false);\n  const [deleteBlockedReason, setDeleteBlockedReason] = useState<\n    string | undefined\n  >();\n\n  const { getProcessors, processorListResponse } = useGetProcessorsApi();\n\n  useEffect(() => {\n    if (showDeleteModal && instanceId && instanceName) {\n      setPreloading(true);\n      getProcessors(instanceId);\n    }\n  }, [showDeleteModal, instanceId, instanceName, getProcessors]);\n\n  useEffect(() => {\n    if (processorListResponse) {\n      setPreloading(false);\n      if (processorListResponse.total && processorListResponse.total > 0) {\n        setDeleteBlockedReason(\n          t(\"instance.errors.cantDeleteBecauseProcessorsInside\")\n        );\n      }\n    }\n  }, [processorListResponse, t]);\n\n  const {\n    deleteBridge,\n    isLoading: deleteBridgeLoading,\n    success: bridgeDeleteSuccess,\n    error: bridgeDeleteError,\n  } = useDeleteBridgeApi();\n\n  const handleDelete = (): void => {\n    if (instanceId) {\n      deleteBridge(instanceId);\n    }\n  };\n\n  const handleCancel = (): void => {\n    setDeleteBlockedReason(undefined);\n    onCanceled();\n  };\n\n  useEffect(() => {\n    if (bridgeDeleteSuccess) {\n      onDeleted();\n    }\n    if (bridgeDeleteError) {\n      // Doing the following check because it could pass some time between\n      // the check on existing processors and when the user actually\n      // confirms the deletion. If in the meantime someone creates a processor,\n      // the API error will trigger the error message inside the modal.\n      if (\n        axios.isAxiosError(bridgeDeleteError) &&\n        (bridgeDeleteError.response?.data as ResponseError).code ===\n          \"OPENBRIDGE-2\"\n      ) {\n        setDeleteBlockedReason(\n          t(\"instance.errors.cantDeleteBecauseProcessorsInside\")\n        );\n      }\n    }\n  }, [bridgeDeleteSuccess, bridgeDeleteError, onDeleted, t]);\n\n  return (\n    <>\n      {instanceId && instanceName && (\n        <DeleteModal\n          ouiaId=\"delete-instance\"\n          modalTitle={`Delete Smart Events Instance?`}\n          showDialog={showDeleteModal}\n          resourceType={\"Instance\"}\n          resourceName={instanceName}\n          isPreloading={preloading}\n          blockedDeletionReason={deleteBlockedReason}\n          isLoading={deleteBridgeLoading}\n          onCancel={handleCancel}\n          onConfirm={handleDelete}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DeleteInstance;\n","import { BridgesApi, Configuration } from \"@openapi/generated\";\nimport { useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useDeleteBridgeApi(): {\n  deleteBridge: (bridgeId: string) => void;\n  isLoading: boolean;\n  success: boolean | undefined;\n  error: unknown;\n} {\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [success, setSuccess] = useState<boolean | undefined>();\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const deleteBridge = (bridgeId: string): void => {\n    setSuccess(undefined);\n    setError(undefined);\n    setIsLoading(true);\n\n    const bridgeApi = new BridgesApi(\n      new Configuration({\n        accessToken: getToken,\n        basePath: apiBaseUrl,\n      })\n    );\n    bridgeApi\n      .deleteBridge(bridgeId)\n      .then(() => setSuccess(true))\n      .catch((err) => {\n        setError(err);\n        setSuccess(false);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return { deleteBridge, isLoading, success, error };\n}\n","import { ManagedResourceStatus } from \"@openapi/generated\";\n\nconst canDeleteResource = (resourceStatus: ManagedResourceStatus): boolean => {\n  /** It's only possible to delete a resource if it's in the \"ready\" or \"failed\" status\n   * see https://issues.redhat.com/browse/MGDOBR-398 for more details */\n  return (\n    resourceStatus === ManagedResourceStatus.Ready ||\n    resourceStatus === ManagedResourceStatus.Failed\n  );\n};\n\nexport { canDeleteResource };\n","import React, { useEffect } from \"react\";\nimport { DeleteModal } from \"@app/components/DeleteModal/DeleteModal\";\nimport { useDeleteProcessorApi } from \"../../../hooks/useProcessorsApi/useDeleteProcessorApi\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DeleteProcessorProps {\n  /** Flag to show/close the modal */\n  showDeleteModal: boolean;\n  /** The id of the bridge where the processor belongs */\n  bridgeId: string;\n  /** The id of the processor to delete */\n  processorId?: string;\n  /** The name of the processor to delete */\n  processorName?: string;\n  /** Callback executed when the deletion is confirmed */\n  onDeleted: () => void;\n  /** Callback executed when the deletion is canceled */\n  onCanceled: () => void;\n}\n\nconst DeleteProcessor = (props: DeleteProcessorProps): JSX.Element => {\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n  const {\n    showDeleteModal,\n    bridgeId,\n    processorId,\n    processorName,\n    onDeleted,\n    onCanceled,\n  } = props;\n\n  const { deleteProcessor, isLoading, error, success } =\n    useDeleteProcessorApi();\n\n  const handleDelete = (): void => {\n    if (bridgeId && processorId) {\n      deleteProcessor(bridgeId, processorId);\n    }\n  };\n\n  const handleCancel = (): void => {\n    onCanceled();\n  };\n\n  useEffect(() => {\n    if (success) {\n      onDeleted();\n    }\n  }, [success, onDeleted]);\n\n  useEffect(() => {\n    if (error) {\n      console.error(error);\n    }\n  }, [error]);\n\n  return (\n    <>\n      {processorId && processorName && (\n        <DeleteModal\n          ouiaId=\"delete-processor\"\n          modalTitle={t(\"processor.deleteProcessor\")}\n          showDialog={showDeleteModal}\n          isPreloading={false}\n          resourceType={t(\"common.processor\")}\n          resourceName={processorName}\n          isLoading={isLoading}\n          onCancel={handleCancel}\n          onConfirm={handleDelete}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DeleteProcessor;\n","import { Configuration, ProcessorsApi } from \"@openapi/generated\";\nimport { useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useDeleteProcessorApi(): {\n  deleteProcessor: (bridgeId: string, processorId: string) => void;\n  isLoading: boolean;\n  success: boolean | undefined;\n  error: unknown;\n} {\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [success, setSuccess] = useState<boolean | undefined>();\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const deleteProcessor = (bridgeId: string, processorId: string): void => {\n    setSuccess(undefined);\n    setError(undefined);\n    setIsLoading(true);\n\n    const processorsApi = new ProcessorsApi(\n      new Configuration({\n        accessToken: getToken,\n        basePath: apiBaseUrl,\n      })\n    );\n    processorsApi\n      .deleteProcessor(bridgeId, processorId)\n      .then(() => setSuccess(true))\n      .catch((err) => {\n        setError(err);\n        setSuccess(false);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return { deleteProcessor, isLoading, success, error };\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Drawer,\n  DrawerContent,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  EmptyState,\n  EmptyStateIcon,\n  PageSection,\n  PageSectionVariants,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport { Link, useHistory, useLocation, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Breadcrumb } from \"@app/components/Breadcrumb/Breadcrumb\";\nimport { CaretDownIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  DEFAULT_PAGE_SIZE,\n  FIRST_PAGE,\n  TableWithPagination,\n} from \"@app/components/TableWithPagination/TableWithPagination\";\nimport { IAction, IRow, IRowData } from \"@patternfly/react-table\";\nimport { formatDistance } from \"date-fns\";\nimport \"./InstancePage.css\";\nimport { InstanceDetails } from \"@app/Instance/InstanceDetails/InstanceDetails\";\nimport StatusLabel from \"@app/components/StatusLabel/StatusLabel\";\nimport { useGetBridgeApi } from \"../../../hooks/useBridgesApi/useGetBridgeApi\";\nimport PageHeaderSkeleton from \"@app/components/PageHeaderSkeleton/PageHeaderSkeleton\";\nimport { TableWithPaginationSkeleton } from \"@app/components/TableWithPaginationSkeleton/TableWithPaginationSkeleton\";\nimport { useGetProcessorsApi } from \"../../../hooks/useProcessorsApi/useGetProcessorsApi\";\nimport { usePolling } from \"../../../hooks/usePolling/usePolling\";\nimport { BridgeResponse, ManagedResourceStatus } from \"@openapi/generated\";\nimport DeleteInstance from \"@app/Instance/DeleteInstance/DeleteInstance\";\nimport { TableRow } from \"@app/components/Table\";\nimport { canDeleteResource } from \"@utils/resourceUtils\";\nimport DeleteProcessor from \"@app/Processor/DeleteProcessor/DeleteProcessor\";\n\ninterface InstanceRouteParams {\n  instanceId: string;\n}\n\nconst InstancePage = (): JSX.Element => {\n  const { instanceId } = useParams<InstanceRouteParams>();\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n  const location = useLocation();\n  const history = useHistory();\n  const goToHome = useCallback((): void => history.push(`/`), [history]);\n\n  const processorsTabRef = React.createRef<HTMLElement>();\n\n  const [currentPage, setCurrentPage] = useState<number>(FIRST_PAGE);\n  const [currentPageSize, setCurrentPageSize] =\n    useState<number>(DEFAULT_PAGE_SIZE);\n  const [totalRows, setTotalRows] = useState<number>();\n  const [activeTabKey, setActiveTabKey] = useState<number | string>(0);\n  const [isDropdownActionOpen, setIsDropdownActionOpen] =\n    useState<boolean>(false);\n  const [showInstanceDrawer, setShowInstanceDrawer] = useState<boolean>(false);\n\n  const {\n    getBridge,\n    bridge,\n    isLoading: isBridgeLoading,\n    error: bridgeError,\n  } = useGetBridgeApi();\n\n  useEffect(() => {\n    getBridge(instanceId);\n  }, [getBridge, instanceId]);\n\n  const {\n    getProcessors,\n    processorListResponse,\n    isLoading: areProcessorsLoading,\n    error: processorsError,\n  } = useGetProcessorsApi();\n\n  const triggerGetProcessors = useCallback(\n    (): void => getProcessors(instanceId, currentPage, currentPageSize, true),\n    [currentPage, currentPageSize, getProcessors, instanceId]\n  );\n\n  usePolling(() => triggerGetProcessors(), 10000);\n\n  useEffect(\n    () => getProcessors(instanceId, FIRST_PAGE, DEFAULT_PAGE_SIZE),\n    [getProcessors, instanceId]\n  );\n\n  useEffect(() => {\n    if (processorListResponse) {\n      setCurrentPage(processorListResponse.page ?? FIRST_PAGE);\n      setTotalRows(processorListResponse.total ?? 0);\n    }\n  }, [processorListResponse]);\n\n  useEffect(() => {\n    if (bridgeError) {\n      console.error(bridgeError);\n      goToHome();\n    }\n\n    if (processorsError) {\n      console.error(processorsError);\n    }\n  }, [bridgeError, goToHome, processorsError]);\n\n  const handleTabClick = (\n    _: React.MouseEvent<HTMLElement, MouseEvent>,\n    eventKey: number | string\n  ): void => {\n    setActiveTabKey(eventKey);\n  };\n\n  const processorsOverviewColumns = [\n    {\n      accessor: \"name\",\n      label: t(\"common.name\"),\n      formatter: (value: IRowData, row?: IRow): JSX.Element => {\n        const processorId = (row as BridgeResponse)?.id ?? \"\";\n        return (\n          <Link\n            data-testid=\"tableProcessors-linkProcessor\"\n            to={`${location.pathname}/processor/${processorId}`}\n          >\n            {value}\n          </Link>\n        );\n      },\n    },\n    { accessor: \"id\", label: t(\"common.id\") },\n    {\n      accessor: \"type\",\n      label: t(\"common.type\"),\n      formatter: (value: IRowData): string => {\n        const typeString = value as unknown as string;\n        return !typeString || !typeString.length\n          ? \"\"\n          : typeString.charAt(0).toUpperCase() +\n              typeString.slice(1).toLowerCase();\n      },\n    },\n    {\n      accessor: \"status\",\n      label: t(\"common.status\"),\n      formatter: (value: IRowData): JSX.Element => {\n        const statusString = (value as unknown as string) ?? \"\";\n        return <StatusLabel status={statusString} />;\n      },\n    },\n    {\n      accessor: \"submitted_at\",\n      label: t(\"common.submittedAt\"),\n      formatter: (value: IRowData): string => {\n        const date = new Date(value as unknown as string);\n        return formatDistance(date, new Date()) + \" \" + t(\"common.ago\");\n      },\n    },\n  ];\n\n  const customToolbarElement = (\n    <Link to={`${location.pathname}/create-processor`}>\n      <Button ouiaId=\"create-processor\" variant=\"primary\">\n        {t(\"processor.createProcessor\")}\n      </Button>\n    </Link>\n  );\n\n  const onPaginationChange = useCallback(\n    (pageNumber: number, pageSize: number): void => {\n      const correctPageNumber =\n        pageSize === currentPageSize ? pageNumber : FIRST_PAGE;\n      setCurrentPage(correctPageNumber);\n      setCurrentPageSize(pageSize);\n      getProcessors(instanceId, correctPageNumber, pageSize);\n    },\n    [currentPageSize, getProcessors, instanceId]\n  );\n\n  const [showInstanceDeleteModal, setShowInstanceDeleteModal] = useState(false);\n  const [deleteProcessorId, setDeleteProcessorId] = useState(\"\");\n  const [deleteProcessorName, setDeleteProcessorName] = useState(\"\");\n\n  const deleteInstance = (): void => {\n    setShowInstanceDeleteModal(true);\n  };\n\n  const handleOnDeleteInstanceSuccess = useCallback((): void => {\n    setShowInstanceDeleteModal(false);\n    history.push(`/`);\n  }, [history]);\n\n  const [showProcessorDeleteModal, setShowProcessorDeleteModal] =\n    useState(false);\n\n  const deleteProcessor = (id: string, name: string): void => {\n    setDeleteProcessorId(id);\n    setDeleteProcessorName(name);\n    setShowProcessorDeleteModal(true);\n  };\n\n  const handleOnDeleteProcessorSuccess = useCallback((): void => {\n    setShowProcessorDeleteModal(false);\n    getProcessors(instanceId, currentPage, currentPageSize);\n  }, [getProcessors, instanceId, currentPage, currentPageSize]);\n\n  const tableActions = (rowData: TableRow): IAction[] => [\n    {\n      title: t(\"common.delete\"),\n      onClick: (): void => {\n        const id = (rowData.originalData as BridgeResponse).id;\n        const name = (rowData.originalData as BridgeResponse).name;\n        if (id && name) {\n          deleteProcessor(id, name);\n        }\n      },\n      isDisabled: !canDeleteResource(\n        (rowData.originalData as BridgeResponse).status as ManagedResourceStatus\n      ),\n    },\n  ];\n\n  return (\n    <>\n      {(isBridgeLoading ||\n        (totalRows === undefined && areProcessorsLoading)) && (\n        <>\n          <PageHeaderSkeleton\n            pageTitle={t(\"instance.loadingInstance\")}\n            hasActionDropdown={true}\n            hasLabel={false}\n            totalTabs={1}\n          />\n          <PageSection>\n            <TabContent id=\"instance-skeleton__page__tabs-processors\">\n              <TableWithPaginationSkeleton\n                hasActionColumn={true}\n                columns={processorsOverviewColumns}\n                totalRows={currentPageSize}\n                customToolbarElement={customToolbarElement}\n              />\n            </TabContent>\n          </PageSection>\n        </>\n      )}\n      {bridge && processorListResponse?.items && (\n        <>\n          <Drawer isExpanded={showInstanceDrawer}>\n            <DrawerContent\n              data-ouia-component-id=\"instance-drawer\"\n              panelContent={\n                <InstanceDetails\n                  onClosingDetails={(): void => setShowInstanceDrawer(false)}\n                  instance={bridge}\n                />\n              }\n            >\n              <PageSection\n                variant={PageSectionVariants.light}\n                type=\"breadcrumb\"\n              >\n                <Breadcrumb\n                  path={[\n                    { label: t(\"instance.smartEventInstances\"), linkTo: \"/\" },\n                    { label: bridge.name ?? \"\" },\n                  ]}\n                />\n              </PageSection>\n              <PageSection variant={PageSectionVariants.light}>\n                <Split>\n                  <SplitItem isFilled>\n                    <TextContent>\n                      <Text ouiaId=\"instance-name\" component=\"h1\">\n                        {bridge.name}\n                      </Text>\n                    </TextContent>\n                  </SplitItem>\n                  <SplitItem>\n                    <Dropdown\n                      ouiaId=\"actions\"\n                      onSelect={(): void => setIsDropdownActionOpen(false)}\n                      toggle={\n                        <DropdownToggle\n                          ouiaId=\"actions\"\n                          onToggle={(isOpen: boolean): void =>\n                            setIsDropdownActionOpen(isOpen)\n                          }\n                          toggleIndicator={CaretDownIcon}\n                        >\n                          {t(\"common.actions\")}\n                        </DropdownToggle>\n                      }\n                      isOpen={isDropdownActionOpen}\n                      dropdownItems={[\n                        <DropdownItem\n                          key=\"details\"\n                          ouiaId=\"details\"\n                          onClick={(): void => {\n                            setShowInstanceDrawer(true);\n                          }}\n                        >\n                          {t(\"common.details\")}\n                        </DropdownItem>,\n                        <DropdownItem\n                          key=\"delete\"\n                          ouiaId=\"delete\"\n                          onClick={deleteInstance}\n                          isDisabled={\n                            !canDeleteResource(\n                              bridge.status as ManagedResourceStatus\n                            )\n                          }\n                        >\n                          {t(\"common.delete\")}\n                        </DropdownItem>,\n                      ]}\n                    />\n                  </SplitItem>\n                </Split>\n              </PageSection>\n              <PageSection variant={PageSectionVariants.light} type=\"tabs\">\n                <Tabs\n                  className=\"instance-page__tabs\"\n                  ouiaId=\"instance-details\"\n                  usePageInsets\n                  activeKey={activeTabKey}\n                  onSelect={handleTabClick}\n                >\n                  <Tab\n                    eventKey={0}\n                    ouiaId=\"processors\"\n                    tabContentId=\"instance-page__tabs-processors\"\n                    tabContentRef={processorsTabRef}\n                    title={\n                      <TabTitleText>{t(\"common.processors\")}</TabTitleText>\n                    }\n                  />\n                </Tabs>\n              </PageSection>\n              <PageSection>\n                <TabContent\n                  eventKey={0}\n                  id=\"instance-page__tabs-processors\"\n                  ouiaId=\"processors\"\n                  ref={processorsTabRef}\n                  aria-label=\"Processors tab\"\n                >\n                  <TableWithPagination\n                    columns={processorsOverviewColumns}\n                    customToolbarElement={customToolbarElement}\n                    rows={processorListResponse.items}\n                    tableLabel={t(\n                      \"openbridgeTempDictionary:processor.processorsListTable\"\n                    )}\n                    isLoading={areProcessorsLoading}\n                    onPaginationChange={onPaginationChange}\n                    pageNumber={currentPage}\n                    pageSize={currentPageSize}\n                    totalRows={totalRows ?? 0}\n                    renderActions={({ row, ActionsColumn }): JSX.Element => (\n                      <ActionsColumn items={tableActions(row)} />\n                    )}\n                  >\n                    <EmptyState variant=\"large\">\n                      <EmptyStateIcon icon={PlusCircleIcon} />\n                      <Title headingLevel=\"h4\" size=\"lg\">\n                        {t(\"processor.noProcessors\")}\n                      </Title>\n                    </EmptyState>\n                  </TableWithPagination>\n                </TabContent>\n              </PageSection>\n            </DrawerContent>\n          </Drawer>\n          <DeleteInstance\n            instanceId={bridge.id}\n            instanceName={bridge.name}\n            showDeleteModal={showInstanceDeleteModal}\n            onCanceled={(): void => setShowInstanceDeleteModal(false)}\n            onDeleted={handleOnDeleteInstanceSuccess}\n          />\n          <DeleteProcessor\n            bridgeId={instanceId}\n            processorId={deleteProcessorId}\n            processorName={deleteProcessorName}\n            showDeleteModal={showProcessorDeleteModal}\n            onCanceled={(): void => setShowProcessorDeleteModal(false)}\n            onDeleted={handleOnDeleteProcessorSuccess}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default InstancePage;\n","import React, { FormEvent, useCallback, useEffect, useState } from \"react\";\nimport {\n  Alert,\n  AlertGroup,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface CreateInstanceProps {\n  /** Flag to indicate the creation request is in progress */\n  isLoading: boolean;\n  /** Flag to show/hide the modal */\n  isModalOpen: boolean;\n  /** Callback to close the modal */\n  onClose: () => void;\n  /** Callback to create the instance */\n  onCreate: (name: string) => void;\n  /** invalid instance name used to create an instance */\n  existingInstanceName?: string;\n}\n\nconst CreateInstance = (props: CreateInstanceProps): JSX.Element => {\n  const { isLoading, isModalOpen, onClose, onCreate, existingInstanceName } =\n    props;\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const { t } = useTranslation(\"openbridgeTempDictionary\");\n\n  const FORM_ID = \"create-instance-form\";\n\n  const validate = useCallback(() => {\n    if (name.trim() === \"\") {\n      setError(t(\"common.required\"));\n      return false;\n    }\n    if (existingInstanceName && name.trim() === existingInstanceName) {\n      setError(t(\"instance.errors.invalidName\"));\n      return false;\n    }\n    setError(null);\n    return true;\n  }, [name, t, existingInstanceName]);\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (validate()) {\n        onCreate(name.trim());\n      }\n    },\n    [name, onCreate, validate]\n  );\n\n  const handleNameChange = useCallback(\n    (name: string) => {\n      setName(name);\n      if (existingInstanceName) {\n        validate();\n      }\n    },\n    [existingInstanceName, validate]\n  );\n\n  useEffect(() => {\n    if (existingInstanceName) {\n      validate();\n    }\n  }, [existingInstanceName, validate]);\n\n  useEffect(() => {\n    if (isModalOpen) {\n      setName(\"\");\n      setError(null);\n    }\n  }, [isModalOpen]);\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      title={t(\"instance.createASEInstance\")}\n      ouiaId=\"create-instance\"\n      width={640}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"submit\"\n          ouiaId=\"submit\"\n          variant=\"primary\"\n          type=\"submit\"\n          form={FORM_ID}\n          isDisabled={isLoading}\n          spinnerAriaValueText={t(\"common.submittingRequest\")}\n          isLoading={isLoading}\n        >\n          {t(\"instance.createSEInstance\")}\n        </Button>,\n        <Button key=\"cancel\" ouiaId=\"cancel\" variant=\"link\" onClick={onClose}>\n          {t(\"common.cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id={FORM_ID} onSubmit={onSubmit}>\n        <FormGroup\n          label={t(\"common.name\")}\n          isRequired\n          fieldId=\"instance-name\"\n          validated={error ? \"error\" : \"default\"}\n          helperTextInvalid={error}\n        >\n          <TextInput\n            isRequired\n            ouiaId=\"new-name\"\n            type=\"text\"\n            maxLength={255}\n            id=\"instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleNameChange}\n            onBlur={validate}\n            validated={error ? \"error\" : \"default\"}\n            isDisabled={isLoading}\n          />\n        </FormGroup>\n        <AlertGroup>\n          <Alert\n            variant=\"info\"\n            ouiaId=\"info-instance-available-soon\"\n            isInline={true}\n            isPlain={true}\n            title={t(\"instance.instanceWillBeAvailableShortly\")}\n          />\n        </AlertGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default CreateInstance;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Drawer,\n  DrawerContent,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport { IAction, IRow, IRowData } from \"@patternfly/react-table\";\nimport { Link } from \"react-router-dom\";\nimport { formatDistance } from \"date-fns\";\nimport {\n  DEFAULT_PAGE_SIZE,\n  FIRST_PAGE,\n  TableWithPagination,\n} from \"@app/components/TableWithPagination/TableWithPagination\";\nimport CreateInstance from \"@app/Instance/CreateInstance/CreateInstance\";\nimport { InstanceDetails } from \"@app/Instance/InstanceDetails/InstanceDetails\";\nimport StatusLabel from \"@app/components/StatusLabel/StatusLabel\";\nimport { useGetBridgesApi } from \"../../../hooks/useBridgesApi/useGetBridgesApi\";\nimport { usePolling } from \"../../../hooks/usePolling/usePolling\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { TableWithPaginationSkeleton } from \"@app/components/TableWithPaginationSkeleton/TableWithPaginationSkeleton\";\nimport { useCreateBridgeApi } from \"../../../hooks/useBridgesApi/useCreateBridgeApi\";\nimport axios from \"axios\";\nimport { ResponseError } from \"../../../types/Error\";\nimport { BridgeResponse, ManagedResourceStatus } from \"@openapi/generated\";\nimport DeleteInstance from \"@app/Instance/DeleteInstance/DeleteInstance\";\nimport { TableRow } from \"@app/components/Table\";\nimport { canDeleteResource } from \"@utils/resourceUtils\";\n\nconst InstancesListPage = (): JSX.Element => {\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const [currentPage, setCurrentPage] = useState<number>(FIRST_PAGE);\n  const [currentPageSize, setCurrentPageSize] =\n    useState<number>(DEFAULT_PAGE_SIZE);\n  const [totalRows, setTotalRows] = useState<number>();\n  const [showInstanceDrawer, setShowInstanceDrawer] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<BridgeResponse>();\n\n  const columnNames = [\n    {\n      accessor: \"name\",\n      label: t(\"common.name\"),\n      formatter: (value: IRowData, row?: IRow): JSX.Element => {\n        const bridgeId = (row as BridgeResponse)?.id ?? \"\";\n        const status = (row as BridgeResponse)?.status;\n\n        return status === ManagedResourceStatus.Ready ? (\n          <Link\n            data-testid=\"tableInstances-linkInstance\"\n            to={`/instance/${bridgeId}`}\n          >\n            {value}\n          </Link>\n        ) : (\n          <>{value}</>\n        );\n      },\n    },\n    {\n      accessor: \"status\",\n      label: t(\"common.status\"),\n      formatter: (value: IRowData): JSX.Element => {\n        const statusString = (value as unknown as string) ?? \"\";\n        return <StatusLabel status={statusString} />;\n      },\n    },\n    {\n      accessor: \"submitted_at\",\n      label: t(\"common.submittedAt\"),\n      formatter: (value: IRowData): string => {\n        const date = new Date(value as unknown as string);\n        return formatDistance(date, new Date()) + \" \" + t(\"common.ago\");\n      },\n    },\n  ];\n\n  const { bridgeListResponse, isLoading, getBridges, error } =\n    useGetBridgesApi();\n\n  const triggerGetBridges = useCallback(\n    (): void => getBridges(currentPage, currentPageSize, true),\n    [currentPage, currentPageSize, getBridges]\n  );\n\n  usePolling(() => triggerGetBridges(), 10000);\n\n  useEffect(() => {\n    getBridges(FIRST_PAGE, DEFAULT_PAGE_SIZE);\n  }, [getBridges]);\n\n  useEffect(() => {\n    if (bridgeListResponse) {\n      setCurrentPage(bridgeListResponse.page ?? FIRST_PAGE);\n      setTotalRows(bridgeListResponse.total ?? 0);\n    }\n  }, [bridgeListResponse]);\n\n  useEffect(() => {\n    if (error) {\n      console.error(error);\n    }\n  }, [error]);\n\n  const [showCreateInstance, setShowCreateInstance] = useState(false);\n  const [newBridgeName, setNewBridgeName] = useState(\"\");\n  const [existingBridgeName, setExistingBridgeName] = useState(\"\");\n\n  const {\n    error: createBridgeError,\n    isLoading: createBridgeLoading,\n    createBridge,\n    bridge,\n  } = useCreateBridgeApi();\n\n  const handleCreateBridge = useCallback(\n    (name: string) => {\n      setNewBridgeName(name);\n      createBridge({ name });\n    },\n    [createBridge]\n  );\n\n  useEffect(() => {\n    if (bridge) {\n      closeCreateInstanceDialog();\n      getBridges(currentPage, currentPageSize);\n    }\n  }, [bridge, getBridges, currentPage, currentPageSize]);\n\n  useEffect(() => {\n    if (createBridgeError) {\n      if (axios.isAxiosError(createBridgeError)) {\n        // TODO: replace error code string with a value coming from an error catalog\n        //  See https://issues.redhat.com/browse/MGDOBR-669 for more details.\n        if (\n          (createBridgeError.response?.data as ResponseError).code ===\n          \"OPENBRIDGE-1\"\n        ) {\n          setExistingBridgeName(newBridgeName);\n        }\n      }\n    }\n  }, [createBridgeError, newBridgeName]);\n\n  const closeCreateInstanceDialog = (): void => {\n    setShowCreateInstance(false);\n    setNewBridgeName(\"\");\n    setExistingBridgeName(\"\");\n  };\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteInstanceId, setDeleteInstanceId] = useState<string>();\n  const [deleteInstanceName, setDeleteInstanceName] = useState<string>();\n\n  const deleteInstance = (id: string, name: string): void => {\n    setDeleteInstanceId(id);\n    setDeleteInstanceName(name);\n    setShowDeleteModal(true);\n  };\n\n  const resetDeleteInstance = useCallback((): void => {\n    setDeleteInstanceId(\"\");\n    setDeleteInstanceName(\"\");\n  }, []);\n\n  const handleOnDeleteSuccess = useCallback((): void => {\n    setShowDeleteModal(false);\n    getBridges(currentPage, currentPageSize);\n    resetDeleteInstance();\n  }, [currentPage, currentPageSize, getBridges, resetDeleteInstance]);\n\n  const handleOnDeleteCancel = useCallback((): void => {\n    setShowDeleteModal(false);\n    resetDeleteInstance();\n  }, [resetDeleteInstance]);\n\n  const tableActions = (rowData: TableRow): IAction[] => [\n    {\n      title: t(\"common.details\"),\n      onClick: (): void => {\n        setSelectedInstance(rowData.originalData as BridgeResponse);\n        setShowInstanceDrawer(true);\n      },\n    },\n    {\n      title: t(\"common.delete\"),\n      onClick: (): void => {\n        const id = (rowData.originalData as BridgeResponse).id;\n        const name = (rowData.originalData as BridgeResponse).name;\n        if (id && name) {\n          deleteInstance(id, name);\n        }\n      },\n      isDisabled: !canDeleteResource(\n        (rowData.originalData as BridgeResponse).status as ManagedResourceStatus\n      ),\n    },\n  ];\n\n  const customToolbarElement = (\n    <>\n      <Button\n        ouiaId=\"create-smart-event-instance\"\n        onClick={(): void => setShowCreateInstance(true)}\n      >\n        {t(\"instance.createSEInstance\")}\n      </Button>\n      <CreateInstance\n        isLoading={createBridgeLoading}\n        isModalOpen={showCreateInstance}\n        onClose={closeCreateInstanceDialog}\n        onCreate={handleCreateBridge}\n        existingInstanceName={existingBridgeName}\n      />\n    </>\n  );\n\n  const onPaginationChange = useCallback(\n    (pageNumber: number, pageSize: number): void => {\n      const correctPageNumber =\n        pageSize === currentPageSize ? pageNumber : FIRST_PAGE;\n      setCurrentPage(correctPageNumber);\n      setCurrentPageSize(pageSize);\n      getBridges(correctPageNumber, pageSize);\n    },\n    [currentPageSize, getBridges]\n  );\n\n  const pageContent = (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text ouiaId=\"instances-page-title\" component=\"h1\">\n            {t(\"openbridgeTempDictionary:instance.instancesListPageTitle\")}\n          </Text>\n        </TextContent>\n      </PageSection>\n      <PageSection>\n        {totalRows === undefined && isLoading && (\n          <TableWithPaginationSkeleton\n            columns={columnNames}\n            customToolbarElement={customToolbarElement}\n            totalRows={currentPageSize}\n            hasActionColumn={true}\n          />\n        )}\n        {bridgeListResponse?.items && (\n          <TableWithPagination\n            columns={columnNames}\n            customToolbarElement={customToolbarElement}\n            isLoading={isLoading}\n            rows={bridgeListResponse.items}\n            totalRows={totalRows ?? 0}\n            pageNumber={currentPage}\n            pageSize={currentPageSize}\n            onPaginationChange={onPaginationChange}\n            tableLabel={t(\n              \"openbridgeTempDictionary:instance.instancesListTable\"\n            )}\n            renderActions={({ row, ActionsColumn }): JSX.Element => (\n              <ActionsColumn items={tableActions(row)} />\n            )}\n          >\n            <EmptyState variant=\"large\">\n              <EmptyStateIcon icon={PlusCircleIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                {t(\"instance.noInstances\")}\n              </Title>\n              <EmptyStateBody>\n                {/* @TODO Quick start guide link missing */}\n                {t(\"common.quickStartAccess\")}\n              </EmptyStateBody>\n            </EmptyState>\n          </TableWithPagination>\n        )}\n      </PageSection>\n    </>\n  );\n\n  return (\n    <>\n      <Drawer isExpanded={showInstanceDrawer}>\n        <DrawerContent\n          data-ouia-component-id=\"instance-drawer\"\n          panelContent={\n            selectedInstance ? (\n              <InstanceDetails\n                onClosingDetails={(): void => setShowInstanceDrawer(false)}\n                instance={selectedInstance}\n              />\n            ) : null\n          }\n        >\n          {pageContent}\n        </DrawerContent>\n      </Drawer>\n      <DeleteInstance\n        showDeleteModal={showDeleteModal}\n        instanceId={deleteInstanceId}\n        instanceName={deleteInstanceName}\n        onDeleted={handleOnDeleteSuccess}\n        onCanceled={handleOnDeleteCancel}\n      />\n    </>\n  );\n};\n\nexport default InstancesListPage;\n","import {\n  BridgeListResponse,\n  BridgesApi,\n  Configuration,\n} from \"@openapi/generated\";\nimport { useCallback, useRef, useState } from \"react\";\nimport axios, { CancelTokenSource } from \"axios\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useGetBridgesApi(): {\n  getBridges: (pageReq?: number, sizeReq?: number, isPolling?: boolean) => void;\n  bridgeListResponse?: BridgeListResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [bridgeListResponse, setBridgeListResponse] =\n    useState<BridgeListResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(true);\n  const prevCallTokenSource = useRef<CancelTokenSource>();\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const getBridges = useCallback(\n    (pageReq?: number, sizeReq?: number, isPolling = false): void => {\n      setIsLoading(!isPolling); // no loading, when the call is generated from a polling\n      prevCallTokenSource.current?.cancel();\n\n      const CancelToken = axios.CancelToken;\n      const source = CancelToken.source();\n      prevCallTokenSource.current = source;\n\n      const bridgeApi = new BridgesApi(\n        new Configuration({\n          accessToken: getToken,\n          basePath: apiBaseUrl,\n        })\n      );\n      bridgeApi\n        .getBridges(pageReq, sizeReq, {\n          cancelToken: source.token,\n        })\n        .then((response) => {\n          setBridgeListResponse(response.data);\n          setIsLoading(false);\n        })\n        .catch((err) => {\n          if (!axios.isCancel(err)) {\n            setError(err);\n            setIsLoading(false);\n          }\n        });\n    },\n    [getToken, apiBaseUrl]\n  );\n\n  return { getBridges, isLoading, bridgeListResponse, error };\n}\n","import {\n  BridgeRequest,\n  BridgesApi,\n  Configuration,\n  BridgeResponse,\n} from \"@openapi/generated\";\nimport { useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useCreateBridgeApi(): {\n  createBridge: (bridgeRequest: BridgeRequest) => void;\n  bridge?: BridgeResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [bridge, setBridge] = useState<BridgeResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(false);\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const createBridge = (bridgeRequest: BridgeRequest): void => {\n    setIsLoading(true);\n    setBridge(undefined);\n    setError(undefined);\n    const bridgeApi = new BridgesApi(\n      new Configuration({\n        accessToken: getToken,\n        basePath: apiBaseUrl,\n      })\n    );\n    bridgeApi\n      .createBridge(bridgeRequest)\n      .then((response) => setBridge(response.data))\n      .catch((err) => setError(err))\n      .finally(() => setIsLoading(false));\n  };\n\n  return { createBridge, isLoading, bridge, error };\n}\n","import React from \"react\";\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon, TrashAltIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport { EventFilter } from \"../../../../types/Processor\";\n\ninterface FiltersEditProps {\n  filters: EventFilter[];\n  onChange: (filters: EventFilter[]) => void;\n}\n\nconst FiltersEdit = (props: FiltersEditProps): JSX.Element => {\n  const { filters, onChange } = props;\n\n  const addFilter = (): void => {\n    onChange([...filters, { key: \"\", type: \"\", value: \"\" }]);\n  };\n\n  const deleteFilter = (index: number): void => {\n    onChange(filters.filter((_event, eventIndex) => eventIndex !== index));\n  };\n\n  const updateFilter = (filter: EventFilter, index: number): void => {\n    onChange(\n      filters.map((_event, eventIndex): EventFilter => {\n        if (eventIndex === index) {\n          return filter;\n        }\n        return _event;\n      })\n    );\n  };\n\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const filterTypesOptions = [\n    {\n      value: \"\",\n      label: t(\"common.selectType\"),\n      isPlaceholder: true,\n    },\n    {\n      value: \"StringEquals\",\n      label: t(\"processor.stringEquals\"),\n      isPlaceholder: false,\n    },\n    {\n      value: \"StringContains\",\n      label: t(\"processor.stringContains\"),\n      isPlaceholder: false,\n    },\n    {\n      value: \"StringBeginsWith\",\n      label: t(\"processor.stringBeginsWith\"),\n      isPlaceholder: false,\n    },\n    {\n      value: \"ValuesIn\",\n      label: t(\"processor.valuesIn\"),\n      isPlaceholder: false,\n    },\n  ];\n\n  return (\n    <Stack hasGutter={true}>\n      <StackItem>\n        <Stack hasGutter={true}>\n          {filters.map((filter, index) => (\n            <StackItem\n              key={`filter-${filter.type}-${index}`}\n              data-ouia-component-id={`item-${index}`}\n              data-testid=\"filter-item\"\n            >\n              <Split hasGutter={true}>\n                <SplitItem isFilled>\n                  <FormGroup\n                    fieldId={`filter-key-${index}`}\n                    label={t(\"common.key\")}\n                  >\n                    <TextInput\n                      type=\"text\"\n                      id={`filter-key-${index}`}\n                      ouiaId=\"filter-key\"\n                      name={`filter-key-${index}`}\n                      aria-describedby={`filter-key-${index}`}\n                      value={filter.key}\n                      onChange={(key): void =>\n                        updateFilter({ ...filter, key }, index)\n                      }\n                    />\n                  </FormGroup>\n                </SplitItem>\n                <SplitItem isFilled>\n                  <FormGroup\n                    fieldId={`filter-type-${index}`}\n                    label={t(\"common.type\")}\n                  >\n                    <FormSelect\n                      id={`filter-type-${index}`}\n                      ouiaId=\"filter-type\"\n                      aria-label={t(\"common.type\")}\n                      value={filter.type}\n                      onChange={(type): void =>\n                        updateFilter({ ...filter, type }, index)\n                      }\n                    >\n                      {filterTypesOptions.map((option, index) => (\n                        <FormSelectOption\n                          key={index}\n                          value={option.value}\n                          label={option.label}\n                          isPlaceholder={option.isPlaceholder}\n                        />\n                      ))}\n                    </FormSelect>\n                  </FormGroup>\n                </SplitItem>\n                <SplitItem isFilled>\n                  <FormGroup\n                    fieldId={`filter-value-${index}`}\n                    label={t(\"common.value\")}\n                  >\n                    <TextInput\n                      type=\"text\"\n                      id={`filter-value-${index}`}\n                      ouiaId=\"filter-value\"\n                      name={`filter-value-${index}`}\n                      aria-describedby={`filter-value-${index}`}\n                      value={filter.value}\n                      onChange={(value): void =>\n                        updateFilter({ ...filter, value }, index)\n                      }\n                    />\n                  </FormGroup>\n                </SplitItem>\n                <SplitItem>\n                  <Flex\n                    direction={{ default: \"column\" }}\n                    justifyContent={{ default: \"justifyContentFlexEnd\" }}\n                    style={{ height: \"100%\" }}\n                  >\n                    <FlexItem>\n                      <Button\n                        variant=\"plain\"\n                        ouiaId=\"delete-item\"\n                        aria-label={t(\"processor.deleteFilter\")}\n                        onClick={(): void => deleteFilter(index)}\n                        isDisabled={filters.length === 1}\n                      >\n                        <TrashAltIcon />\n                      </Button>\n                    </FlexItem>\n                  </Flex>\n                </SplitItem>\n              </Split>\n            </StackItem>\n          ))}\n        </Stack>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"link\"\n          ouiaId=\"add-filter\"\n          icon={<PlusCircleIcon />}\n          onClick={addFilter}\n          isInline={true}\n        >\n          {t(\"processor.addFilter\")}\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default FiltersEdit;\n","import { useTranslation } from \"react-i18next\";\nimport { FieldValidation } from \"../../../types/Processor\";\n\nexport function useValidationBase(): {\n  isRequired: (value: string) => FieldValidation;\n  isHTTPUrl: (value: string) => FieldValidation;\n} {\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const isRequired = (value: string): FieldValidation => {\n    return {\n      isValid: value.trim().length > 0,\n      errorMessage: t(\"common.required\"),\n    };\n  };\n\n  const isHTTPUrl = (value: string): FieldValidation => {\n    if (value.trim().length === 0) {\n      return {\n        isValid: false,\n        errorMessage: t(\"common.required\"),\n      };\n    }\n    const isValidUrl = (value: string): boolean => {\n      let url: URL;\n      try {\n        url = new URL(value);\n      } catch (e) {\n        return false;\n      }\n      return url.protocol === \"http:\" || url.protocol === \"https:\";\n    };\n    return {\n      isValid: isValidUrl(value),\n      errorMessage: t(\"processor.errors.invalidUrl\"),\n    };\n  };\n  return { isRequired, isHTTPUrl };\n}\n","import { useCallback, useState } from \"react\";\nimport { omit } from \"lodash\";\nimport { Action, Source } from \"@openapi/generated\";\nimport { useTranslation } from \"react-i18next\";\nimport { ConfigType, ProcessorValidation } from \"../../../types/Processor\";\n\nexport function useValidateConfigParams(\n  // Current value of the source or action configuration provided by the user\n  config: Action | Source | undefined,\n  // List of supported configuration types\n  configTypes: ConfigType[]\n): {\n  // Validation object containing the validation status\n  validation: ProcessorValidation;\n  // Validate function that will validate the whole action or source configuration\n  validate: () => boolean;\n  // Function to reset the validation status of a single field\n  resetValidation: (propertyName: string) => void;\n  // Function to validate a single field\n  validateField: (typeName: string, propertyName: string) => boolean;\n} {\n  const [validation, setValidation] = useState<ProcessorValidation>({\n    isValid: undefined,\n    errors: {},\n  });\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const isEmpty = (value: string): boolean => {\n    return value.trim().length === 0;\n  };\n\n  const resetValidation = useCallback((propertyName: string): void => {\n    setValidation((prevState) => ({\n      ...prevState,\n      errors: omit(prevState.errors, propertyName),\n    }));\n  }, []);\n\n  const validateType = useCallback((): boolean => {\n    if (isEmpty(config?.type ?? \"\")) {\n      setValidation((prevState) => ({\n        ...prevState,\n        errors: { ...prevState.errors, type: t(\"common.required\") },\n      }));\n      return false;\n    } else {\n      resetValidation(\"type\");\n      return true;\n    }\n  }, [config, resetValidation, t]);\n\n  const validateField = useCallback(\n    (typeName: string, fieldName: string): boolean => {\n      const configType = configTypes.find((type) => type.name === typeName);\n      if (config && configType) {\n        const field = configType.fields.find(\n          (field) => field.name === fieldName\n        );\n        if (field) {\n          // Run the field validation function provided by configTypes with the current\n          // value of the field\n          const fieldValidation = field.validate(config.parameters[fieldName]);\n          // When the field value is valid, clean any possible previous error associated to the field\n          if (fieldValidation.isValid) {\n            resetValidation(field.name);\n          } else {\n            // When the field value is not valid, add an error entry for it in the\n            // validation object, using the error message coming from the field validation outcome\n            setValidation((prevState) => ({\n              ...prevState,\n              errors: {\n                ...prevState.errors,\n                [fieldName]: fieldValidation.errorMessage,\n              },\n            }));\n          }\n          return fieldValidation.isValid;\n        }\n      }\n      return false;\n    },\n    [config, configTypes, resetValidation]\n  );\n\n  const validate = useCallback((): boolean => {\n    // Array of validation functions to run when validating the whole (action or source) config.\n    // In the initial state it only contains the validation of the config type.\n    const validations = [validateType];\n\n    // If a config type is set, retrieve its details from the configTypes array\n    if (config?.type) {\n      const configType = configTypes.find((type) => type.name === config.type);\n      if (configType) {\n        // For each field of the config type selected by the user, generate a validation function\n        // and push it to the validations array.\n        configType.fields.map((field) => {\n          validations.push((): boolean =>\n            validateField(config.type, field.name)\n          );\n        });\n      }\n    }\n\n    // Run all the validation functions in the validations array to determine if the config is valid.\n    const isValid = validations.reduce(\n      (prev: boolean, curr: () => boolean) => curr() && prev,\n      true\n    );\n\n    // Update the validation object with the new validation result. Also return it.\n    setValidation((prevState) => ({ ...prevState, isValid }));\n    return isValid;\n  }, [config, configTypes, validateType, validateField]);\n\n  return { validation, validate, resetValidation, validateField };\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { Action } from \"@openapi/generated\";\nimport { useValidationBase } from \"@app/Processor/ProcessorEdit/useValidationBase\";\nimport { useValidateConfigParams } from \"@app/Processor/ProcessorEdit/useValidateConfigParams\";\nimport { ConfigType } from \"../../../../types/Processor\";\n\ninterface ActionEditProps {\n  action?: Action;\n  onChange: (action: Action) => void;\n  registerValidation: (validationFunction: () => boolean) => void;\n}\n\nconst ActionEdit = (props: ActionEditProps): JSX.Element => {\n  const { action, onChange, registerValidation } = props;\n  const [type, setType] = useState(action?.type ?? \"\");\n  const [parameters, setParameters] = useState(action?.parameters ?? {});\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n  const { isRequired, isHTTPUrl } = useValidationBase();\n\n  const updateConfiguration = (parameters: Action[\"parameters\"]): void => {\n    setParameters(parameters);\n    onChange({\n      type,\n      parameters,\n    });\n  };\n\n  const actionTypes: ConfigType[] = [\n    {\n      name: \"\",\n      label: t(\"processor.selectAction\"),\n      isPlaceholder: true,\n      fields: [],\n    },\n    {\n      name: \"KafkaTopic\",\n      label: t(\"processor.actions.KafkaTopic\"),\n      isPlaceholder: false,\n      fields: [\n        {\n          name: \"topic\",\n          label: t(\"common.kafkaTopic\"),\n          validate: isRequired,\n        },\n      ],\n    },\n    {\n      name: \"Webhook\",\n      label: t(\"processor.actions.Webhook\"),\n      isPlaceholder: false,\n      fields: [\n        {\n          name: \"endpoint\",\n          label: t(\"common.endpoint\"),\n          validate: isHTTPUrl,\n        },\n      ],\n    },\n    {\n      name: \"SendToBridge\",\n      label: t(\"processor.actions.SendToBridge\"),\n      isPlaceholder: false,\n      fields: [\n        {\n          name: \"bridgeId\",\n          label: t(\"instance.instanceId\"),\n          validate: isRequired,\n        },\n      ],\n    },\n    {\n      name: \"Slack\",\n      label: t(\"processor.actions.Slack\"),\n      isPlaceholder: false,\n      fields: [\n        {\n          name: \"channel\",\n          label: t(\"processor.channel\"),\n          validate: isRequired,\n        },\n        {\n          name: \"webhookUrl\",\n          label: t(\"processor.webhookUrl\"),\n          validate: isHTTPUrl,\n        },\n      ],\n    },\n  ];\n\n  const { validate, validation, resetValidation, validateField } =\n    useValidateConfigParams(action, actionTypes);\n\n  const updateType = (type: string): void => {\n    setType(type);\n    const emptyParameters: { [key: string]: string } = {};\n    switch (type) {\n      case \"KafkaTopic\":\n        emptyParameters.topic = \"\";\n        break;\n      case \"Webhook\":\n        emptyParameters.endpoint = \"\";\n        break;\n      case \"SendToBridge\":\n        emptyParameters.bridgeId = \"\";\n        break;\n      case \"Slack\":\n        emptyParameters.channel = \"\";\n        emptyParameters.webhookUrl = \"\";\n        break;\n    }\n    onChange({\n      type,\n      parameters: emptyParameters,\n    });\n    if (type) {\n      resetValidation(\"type\");\n    }\n  };\n\n  useEffect(() => {\n    if (registerValidation) {\n      registerValidation(validate);\n    }\n  }, [validate, registerValidation]);\n\n  useEffect(() => {\n    if (action) {\n      setType(action.type);\n      setParameters(action.parameters);\n    }\n  }, [action]);\n\n  return (\n    <>\n      <FormGroup\n        fieldId={`action-type`}\n        label={t(\"processor.actionType\")}\n        isRequired={true}\n        helperTextInvalid={validation.errors.type}\n        validated={validation.errors.type ? \"error\" : \"default\"}\n        className={validation.errors.type && \"processor-field-error\"}\n      >\n        <FormSelect\n          id={`action-type`}\n          ouiaId=\"action-type\"\n          aria-label={t(\"processor.actionType\")}\n          isRequired={true}\n          value={type}\n          onChange={(type: string): void => updateType(type)}\n          validated={validation.errors.type ? \"error\" : \"default\"}\n        >\n          {actionTypes.map((option, index) => (\n            <FormSelectOption\n              key={index}\n              value={option.name}\n              label={option.label}\n              isPlaceholder={option.isPlaceholder}\n            />\n          ))}\n        </FormSelect>\n      </FormGroup>\n      {type === \"\" && (\n        <FormGroup\n          fieldId={`action-config`}\n          label={t(\"processor.actionConfiguration\")}\n        >\n          <TextInput\n            type=\"text\"\n            id=\"action-config\"\n            ouiaId=\"missing-actions\"\n            name=\"action-config\"\n            aria-describedby=\"action-config\"\n            isDisabled={true}\n          />\n        </FormGroup>\n      )}\n      {type !== \"\" && (\n        <>\n          {actionTypes\n            .find((actionType) => actionType.name === type)\n            ?.fields.map((field) => {\n              return (\n                <FormGroup\n                  key={field.name}\n                  fieldId={field.name}\n                  label={field.label}\n                  isRequired={true}\n                  helperTextInvalid={validation.errors[field.name]}\n                  validated={\n                    validation.errors[field.name] ? \"error\" : \"default\"\n                  }\n                  className={\n                    validation.errors[field.name] && \"processor-field-error\"\n                  }\n                >\n                  <TextInput\n                    type=\"text\"\n                    id={field.name}\n                    ouiaId={field.name}\n                    name={field.name}\n                    aria-describedby={field.name}\n                    isRequired={true}\n                    value={parameters[field.name] ?? \"\"}\n                    validated={\n                      validation.errors[field.name] ? \"error\" : \"default\"\n                    }\n                    onChange={(value: string): void => {\n                      updateConfiguration({\n                        ...parameters,\n                        [field.name]: value,\n                      });\n                    }}\n                    onBlur={(): void => {\n                      validateField(type, field.name);\n                    }}\n                  />\n                </FormGroup>\n              );\n            })}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ActionEdit;\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { useValidationBase } from \"@app/Processor/ProcessorEdit/useValidationBase\";\nimport { Source } from \"@openapi/generated\";\nimport { useValidateConfigParams } from \"@app/Processor/ProcessorEdit/useValidateConfigParams\";\nimport { ConfigType } from \"../../../../types/Processor\";\n\ninterface SourceEditProps {\n  source?: Source;\n  onChange: (source: Source) => void;\n  registerValidation: (validationFunction: () => boolean) => void;\n}\n\nconst SourceEdit = (props: SourceEditProps): JSX.Element => {\n  const { source, onChange, registerValidation } = props;\n  const [type, setType] = useState(source?.type ?? \"\");\n  const [parameters, setParameters] = useState(source?.parameters ?? {});\n\n  const updateType = (type: string): void => {\n    setType(type);\n    const emptyParameters: { [key: string]: string } = {};\n    switch (type) {\n      case \"Slack\":\n        emptyParameters.channel = \"\";\n        emptyParameters.token = \"\";\n        break;\n    }\n    onChange({\n      ...source,\n      type: type,\n      parameters: emptyParameters,\n    });\n    if (type) {\n      resetValidation(\"type\");\n    }\n  };\n\n  const updateParameters = (parameters: Source[\"parameters\"]): void => {\n    setParameters(parameters);\n    onChange({\n      ...source,\n      type: type,\n      parameters,\n    });\n  };\n\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const { isRequired } = useValidationBase();\n\n  const sourceTypes: ConfigType[] = [\n    {\n      name: \"\",\n      label: t(\"processor.selectSource\"),\n      isPlaceholder: true,\n      fields: [],\n    },\n    {\n      name: \"Slack\",\n      label: t(\"processor.sources.Slack\"),\n      isPlaceholder: false,\n      fields: [\n        {\n          name: \"channel\",\n          label: t(\"processor.channel\"),\n          validate: isRequired,\n        },\n        {\n          name: \"token\",\n          label: t(\"processor.token\"),\n          validate: isRequired,\n        },\n      ],\n    },\n  ];\n\n  const { validate, validation, resetValidation, validateField } =\n    useValidateConfigParams(source, sourceTypes);\n\n  useEffect(() => {\n    if (registerValidation) {\n      registerValidation(validate);\n    }\n  }, [validate, registerValidation]);\n\n  useEffect((): void => {\n    if (source) {\n      setType(source.type);\n      setParameters(source.parameters);\n    }\n  }, [source]);\n\n  return (\n    <>\n      <FormGroup\n        fieldId={`source-type`}\n        label={t(\"processor.sourceType\")}\n        isRequired={true}\n        helperTextInvalid={validation.errors.type}\n        validated={validation.errors.type ? \"error\" : \"default\"}\n        className={validation.errors.type && \"processor-field-error\"}\n      >\n        <FormSelect\n          id={`source-type`}\n          ouiaId=\"source-type\"\n          aria-label={t(\"processor.sourceType\")}\n          isRequired={true}\n          value={type}\n          onChange={(type: string): void => updateType(type)}\n          validated={validation.errors.type ? \"error\" : \"default\"}\n        >\n          {sourceTypes.map(\n            (option, index): JSX.Element => (\n              <FormSelectOption\n                key={index}\n                value={option.name}\n                label={option.label}\n                isPlaceholder={option.isPlaceholder}\n              />\n            )\n          )}\n        </FormSelect>\n      </FormGroup>\n      {type === \"\" && (\n        <FormGroup\n          fieldId=\"source-parameters\"\n          label={t(\"processor.sourceConfiguration\")}\n        >\n          <TextInput\n            type=\"text\"\n            id=\"source-parameters\"\n            ouiaId=\"missing-source-parameters\"\n            name=\"source-parameters\"\n            aria-describedby=\"source-parameters\"\n            isDisabled={true}\n          />\n        </FormGroup>\n      )}\n      {type !== \"\" && (\n        <>\n          {sourceTypes\n            .find((sourceType) => sourceType.name === type)\n            ?.fields.map((field) => {\n              return (\n                <FormGroup\n                  key={field.name}\n                  fieldId={field.name}\n                  label={field.label}\n                  isRequired={true}\n                  helperTextInvalid={validation.errors[field.name]}\n                  validated={\n                    validation.errors[field.name] ? \"error\" : \"default\"\n                  }\n                  className={\n                    validation.errors[field.name] && \"processor-field-error\"\n                  }\n                >\n                  <TextInput\n                    type=\"text\"\n                    id={field.name}\n                    ouiaId={field.name}\n                    name={field.name}\n                    aria-describedby={field.name}\n                    isRequired={true}\n                    value={parameters[field.name] ?? \"\"}\n                    onChange={(value: string): void => {\n                      updateParameters({\n                        ...parameters,\n                        [field.name]: value,\n                      });\n                    }}\n                    onBlur={(): void => {\n                      validateField(type, field.name);\n                    }}\n                  />\n                </FormGroup>\n              );\n            })}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SourceEdit;\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertGroup,\n  Button,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSection,\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n  TextInput,\n  Tile,\n} from \"@patternfly/react-core\";\nimport FiltersEdit from \"@app/Processor/ProcessorEdit/FiltersEdit/FiltersEdit\";\nimport { CodeEditor } from \"@patternfly/react-code-editor\";\nimport ActionEdit from \"@app/Processor/ProcessorEdit/ActionEdit/ActionEdit\";\nimport {\n  Action,\n  ProcessorRequest,\n  ProcessorResponse,\n} from \"@openapi/generated\";\nimport SourceEdit from \"@app/Processor/ProcessorEdit/SourceEdit/SourceEdit\";\nimport { EventFilter, ProcessorFormData } from \"../../../types/Processor\";\nimport { useValidateProcessor } from \"@app/Processor/ProcessorEdit/useValidateProcessor\";\nimport \"./ProcessorEdit.css\";\n\ninterface ProcessorEditProps {\n  processor?: ProcessorResponse;\n  existingProcessorName?: string;\n  isLoading: boolean;\n  saveButtonLabel: string;\n  onSave: (requestData: ProcessorRequest) => void;\n  onCancel: () => void;\n  processorTypeSection?: JSX.Element;\n}\n\nconst ProcessorEdit = (props: ProcessorEditProps): JSX.Element => {\n  const {\n    existingProcessorName,\n    isLoading,\n    saveButtonLabel,\n    onSave,\n    onCancel,\n    processor,\n    processorTypeSection,\n  } = props;\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n  const [processorType, setProcessorType] = useState(processor?.type ?? \"\");\n  const [name, setName] = useState(processor?.name ?? \"\");\n  const [filters, setFilters] = useState<EventFilter[]>(\n    (processor?.filters as unknown as EventFilter[]) ?? [\n      { key: \"\", type: \"\", value: \"\" },\n    ]\n  );\n  const [transformation, setTransformation] = useState(\n    processor?.transformationTemplate ?? \"\"\n  );\n  const [action, setAction] = useState<Action>(\n    processor?.action ?? {\n      type: \"\",\n      parameters: {},\n    }\n  );\n  const [source, setSource] = useState(\n    processor?.source ?? {\n      type: \"\",\n      parameters: {},\n    }\n  );\n  const [request, setRequest] = useState<ProcessorFormData>({\n    name,\n    type: processorType,\n    filters,\n    transformationTemplate: transformation,\n    action,\n    source,\n  });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const {\n    registerValidateConfig,\n    validateName,\n    validation,\n    validate,\n    resetValidation,\n  } = useValidateProcessor(request, existingProcessorName);\n\n  useEffect(() => {\n    setRequest({\n      name,\n      type: processorType,\n      filters,\n      transformationTemplate: transformation,\n      action,\n      source,\n    });\n  }, [name, processorType, filters, transformation, action, source]);\n\n  const prepareRequest = (formData: ProcessorFormData): ProcessorRequest => {\n    const requestData: ProcessorRequest = { name: formData.name };\n    if (formData.type === \"sink\") {\n      requestData.action = formData.action;\n    } else {\n      requestData.source = formData.source;\n    }\n    if (formData.filters && formData.filters.length > 0) {\n      const filtersData = formData.filters.filter(\n        (filter) => filter.type && filter.value && filter.key\n      );\n      if (filtersData.length > 0) {\n        requestData.filters =\n          filtersData as unknown as ProcessorRequest[\"filters\"];\n      }\n    }\n    if (\n      formData.transformationTemplate &&\n      formData.transformationTemplate.trim().length > 0\n    ) {\n      requestData.transformationTemplate =\n        formData.transformationTemplate.trim();\n    }\n    return requestData;\n  };\n\n  const handleSubmit = (): void => {\n    setIsSubmitted(true);\n    if (validate() && request) {\n      const requestData = prepareRequest(request);\n      onSave(requestData);\n    }\n  };\n\n  useEffect(() => {\n    if (existingProcessorName) {\n      setIsSubmitted(true);\n      validate();\n    }\n  }, [existingProcessorName, validate]);\n\n  useEffect(() => {\n    if (isSubmitted) {\n      document.querySelector(\".processor-field-error\")?.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n      setIsSubmitted(false);\n    }\n  }, [isSubmitted]);\n\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"processor-edit__page-section\"\n      >\n        <section className={\"processor-edit__container\"}>\n          <Flex direction={{ default: \"column\" }} style={{ height: \"100%\" }}>\n            <Flex\n              direction={{ default: \"column\" }}\n              grow={{ default: \"grow\" }}\n              flexWrap={{ default: \"nowrap\" }}\n              className={\"processor-edit__outer-wrap\"}\n            >\n              <Flex\n                direction={{ default: \"column\" }}\n                grow={{ default: \"grow\" }}\n                className={\"processor-edit__inner-wrap\"}\n              >\n                <FlexItem\n                  grow={{ default: \"grow\" }}\n                  className={\"processor-edit__content-wrap\"}\n                >\n                  <Form className={\"processor-edit__form\"}>\n                    <FormSection\n                      title={t(\"processor.generalInformation\")}\n                      titleElement=\"h2\"\n                    >\n                      {processorTypeSection ? (\n                        processorTypeSection\n                      ) : (\n                        <FormGroup\n                          label={t(\"processor.selectProcessorType\")}\n                          fieldId={\"processor-type\"}\n                          isRequired\n                          helperTextInvalid={validation.errors.processorType}\n                          validated={\n                            validation.errors.processorType\n                              ? \"error\"\n                              : \"default\"\n                          }\n                          className={\n                            validation.errors.processorType &&\n                            \"processor-field-error\"\n                          }\n                        >\n                          <Grid\n                            hasGutter={true}\n                            className={\"processor-form__type-selection\"}\n                          >\n                            <GridItem span={6}>\n                              <Tile\n                                title={t(\"processor.sourceProcessor\")}\n                                isSelected={processorType === \"source\"}\n                                style={{ height: \"100%\" }}\n                                onClick={(): void => {\n                                  setProcessorType(\"source\");\n                                  resetValidation(\"processorType\");\n                                }}\n                              >\n                                {t(\"processor.sourceProcessorDescription\")}\n                              </Tile>\n                            </GridItem>\n                            <GridItem span={6}>\n                              <Tile\n                                title={t(\"processor.sinkProcessor\")}\n                                style={{ width: \"100%\", height: \"100%\" }}\n                                isSelected={processorType === \"sink\"}\n                                onClick={(): void => {\n                                  setProcessorType(\"sink\");\n                                  resetValidation(\"processorType\");\n                                }}\n                              >\n                                {t(\"processor.sinkProcessorDescription\")}\n                              </Tile>\n                            </GridItem>\n                          </Grid>\n                        </FormGroup>\n                      )}\n                      <FormGroup\n                        fieldId={\"processor-name\"}\n                        label={t(\"processor.processorName\")}\n                        isRequired={true}\n                        helperTextInvalid={validation.errors.name}\n                        validated={validation.errors.name ? \"error\" : \"default\"}\n                        className={\n                          validation.errors.name && \"processor-field-error\"\n                        }\n                      >\n                        <TextInput\n                          type=\"text\"\n                          id=\"processor-name\"\n                          ouiaId=\"processor-name\"\n                          name=\"processor-name\"\n                          aria-describedby=\"processor-name\"\n                          isRequired={true}\n                          maxLength={255}\n                          value={name}\n                          onChange={setName}\n                          validated={\n                            validation.errors.name ? \"error\" : \"default\"\n                          }\n                          onBlur={(): void => {\n                            validateName();\n                          }}\n                        />\n                      </FormGroup>\n                    </FormSection>\n                    {processorType !== \"\" && (\n                      <>\n                        {processorType === \"source\" && (\n                          <FormSection title={t(\"processor.source\")}>\n                            <TextContent>\n                              <Text\n                                component=\"p\"\n                                ouiaId=\"source-type-description\"\n                              >\n                                {t(\n                                  \"processor.selectSourceProcessorTypeDescription\"\n                                )}\n                              </Text>\n                            </TextContent>\n                            <SourceEdit\n                              source={source}\n                              onChange={setSource}\n                              registerValidation={registerValidateConfig}\n                            />\n                          </FormSection>\n                        )}\n\n                        <FormSection\n                          title={t(\"processor.filters\")}\n                          titleElement=\"h2\"\n                        >\n                          <FiltersEdit\n                            filters={filters}\n                            onChange={setFilters}\n                          />\n                        </FormSection>\n                        <FormSection title={t(\"processor.transformation\")}>\n                          <TextContent>\n                            <Text\n                              component=\"p\"\n                              ouiaId={\"transformation-description\"}\n                            >\n                              {t(\"processor.addTransformationDescription\")}\n                            </Text>\n                          </TextContent>\n                          <CodeEditor\n                            id={\"transformation-template\"}\n                            height={\"300px\"}\n                            isLineNumbersVisible={true}\n                            code={transformation}\n                            onChange={setTransformation}\n                            options={{\n                              scrollbar: { alwaysConsumeMouseWheel: false },\n                            }}\n                          />\n                        </FormSection>\n                        {processorType === \"sink\" && (\n                          <FormSection title={t(\"processor.action\")}>\n                            <TextContent>\n                              <Text component=\"p\" ouiaId=\"action-description\">\n                                {t(\"processor.selectActionDescription\")}\n                              </Text>\n                            </TextContent>\n                            <ActionEdit\n                              action={action}\n                              onChange={setAction}\n                              registerValidation={registerValidateConfig}\n                            />\n                          </FormSection>\n                        )}\n                        {processorType !== \"\" && (\n                          <AlertGroup\n                            className={\"processor-edit__form__notice\"}\n                          >\n                            <Alert\n                              variant=\"info\"\n                              ouiaId=\"info-processor-available-soon\"\n                              isInline={true}\n                              isPlain={true}\n                              title={t(\n                                \"processor.processorWillBeAvailableShortly\"\n                              )}\n                            />\n                          </AlertGroup>\n                        )}\n                      </>\n                    )}\n                  </Form>\n                </FlexItem>\n              </Flex>\n              <Flex\n                flexWrap={{ default: \"wrap\" }}\n                shrink={{ default: \"shrink\" }}\n              >\n                <ActionGroup className={\"processor-edit__actions\"}>\n                  <Button\n                    variant=\"primary\"\n                    ouiaId=\"submit\"\n                    onClick={handleSubmit}\n                    isLoading={isLoading}\n                    isDisabled={isLoading}\n                  >\n                    {saveButtonLabel}\n                  </Button>\n                  <Button\n                    variant=\"link\"\n                    ouiaId=\"cancel\"\n                    onClick={onCancel}\n                    isDisabled={isLoading}\n                  >\n                    {t(\"common.cancel\")}\n                  </Button>\n                </ActionGroup>\n              </Flex>\n            </Flex>\n          </Flex>\n        </section>\n      </PageSection>\n    </>\n  );\n};\n\nexport default ProcessorEdit;\n","import { useCallback, useRef, useState } from \"react\";\nimport {\n  ProcessorFormData,\n  ProcessorValidation,\n} from \"../../../types/Processor\";\nimport { omit } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nexport function useValidateProcessor(\n  processor: ProcessorFormData,\n  existingProcessorName?: string\n): {\n  validate: () => boolean;\n  validation: ProcessorValidation;\n  validateName: () => boolean;\n  validateProcessorType: () => boolean;\n  registerValidateConfig: (action: () => boolean) => void;\n  resetValidation: (propertyName: string) => void;\n  existingProcessorName?: string;\n} {\n  const [validation, setValidation] = useState<ProcessorValidation>({\n    isValid: undefined,\n    errors: {},\n  });\n  const { name, type } = processor;\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n  const validateConfig = useRef<(() => boolean) | undefined>();\n\n  const registerValidateConfig = (callback: () => boolean): void => {\n    validateConfig.current = callback;\n  };\n\n  const isEmpty = (value: string): boolean => {\n    return value.trim().length === 0;\n  };\n\n  const resetValidation = useCallback((propertyName: string): void => {\n    setValidation((prevState) => ({\n      ...prevState,\n      errors: omit(prevState.errors, propertyName),\n    }));\n  }, []);\n\n  const validateName = useCallback((): boolean => {\n    if (isEmpty(name)) {\n      setValidation((prevState) => ({\n        ...prevState,\n        errors: { ...prevState.errors, name: t(\"common.required\") },\n      }));\n      return false;\n    }\n    if (existingProcessorName && name.trim() === existingProcessorName) {\n      setValidation((prevState) => ({\n        ...prevState,\n        errors: {\n          ...prevState.errors,\n          name: t(\"processor.errors.invalidName\"),\n        },\n      }));\n      return false;\n    }\n    resetValidation(\"name\");\n    return true;\n  }, [name, resetValidation, existingProcessorName, t]);\n\n  const validateProcessorType = useCallback((): boolean => {\n    if (isEmpty(type)) {\n      setValidation((prevState) => ({\n        ...prevState,\n        errors: {\n          ...prevState.errors,\n          processorType: t(\"processor.errors.missingProcessorType\"),\n        },\n      }));\n      return false;\n    } else {\n      resetValidation(\"processorType\");\n      return true;\n    }\n  }, [type, resetValidation, t]);\n\n  const validate = useCallback((): boolean => {\n    const validations = [\n      validateName,\n      validateProcessorType,\n      validateConfig.current,\n    ];\n\n    const isValid = validations.reduce(\n      (prev: boolean, curr: (() => boolean) | undefined) =>\n        (curr?.() ?? prev) && prev,\n      true\n    );\n    setValidation((prevState) => ({ ...prevState, isValid }));\n    return isValid;\n  }, [validateName, validateProcessorType, validateConfig]);\n\n  return {\n    validate,\n    validation,\n    validateName,\n    validateProcessorType,\n    registerValidateConfig,\n    resetValidation,\n  };\n}\n","import React from \"react\";\nimport {\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  Skeleton,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\n\nconst ProcessorEditSkeleton = (): JSX.Element => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      padding={{ default: \"noPadding\" }}\n      className=\"processor-edit__page-section\"\n    >\n      <section className=\"processor-edit__form\">\n        <Flex\n          direction={{ default: \"column\" }}\n          spaceItems={{ default: \"spaceItemsXl\" }}\n        >\n          <FlexItem>\n            <Skeleton fontSize=\"xl\" width=\"30%\" />\n          </FlexItem>\n          <FlexItem>\n            <Stack hasGutter={true}>\n              <StackItem>\n                <Skeleton fontSize=\"sm\" width=\"20%\" />\n              </StackItem>\n              <StackItem>\n                <Grid hasGutter={true}>\n                  <GridItem span={6}>\n                    <Skeleton shape=\"square\" width=\"100%\" height=\"110px\" />\n                  </GridItem>\n                  <GridItem span={6}>\n                    <Skeleton shape=\"square\" width=\"100%\" height=\"110px\" />\n                  </GridItem>\n                </Grid>\n              </StackItem>\n            </Stack>\n          </FlexItem>\n          <FlexItem>\n            <Stack hasGutter={true}>\n              <StackItem>\n                <Skeleton fontSize=\"sm\" width=\"20%\" />\n              </StackItem>\n              <StackItem>\n                <Skeleton fontSize=\"xl\" width=\"100%\" />\n              </StackItem>\n            </Stack>\n          </FlexItem>\n        </Flex>\n      </section>\n    </PageSection>\n  );\n};\n\nexport default ProcessorEditSkeleton;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport axios from \"axios\";\nimport ProcessorEdit from \"@app/Processor/ProcessorEdit/ProcessorEdit\";\nimport { Breadcrumb } from \"@app/components/Breadcrumb/Breadcrumb\";\nimport { useGetBridgeApi } from \"../../../hooks/useBridgesApi/useGetBridgeApi\";\nimport PageHeaderSkeleton from \"@app/components/PageHeaderSkeleton/PageHeaderSkeleton\";\nimport { useAddProcessorToBridgeApi } from \"../../../hooks/useProcessorsApi/useAddProcessorToBridgeApi\";\nimport { ProcessorRequest } from \"@openapi/generated\";\nimport { ResponseError } from \"../../../types/Error\";\nimport ProcessorEditSkeleton from \"@app/Processor/ProcessorEdit/ProcessorEditSkeleton\";\n\nconst CreateProcessorPage = (): JSX.Element => {\n  const { instanceId } = useParams<InstanceRouteParams>();\n  const [existingProcessorName, setExistingProcessorName] = useState<\n    string | undefined\n  >();\n  const [requestData, setRequestData] = useState<ProcessorRequest>();\n  const history = useHistory();\n  const goToInstance = useCallback(\n    (): void => history.push(`/instance/${instanceId}`),\n    [instanceId, history]\n  );\n  const goToHome = useCallback((): void => history.push(`/`), [history]);\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const {\n    getBridge,\n    bridge,\n    isLoading: isBridgeLoading,\n    error: bridgeError,\n  } = useGetBridgeApi();\n\n  useEffect(() => {\n    getBridge(instanceId);\n  }, [getBridge, instanceId]);\n\n  useEffect(() => {\n    if (bridgeError) {\n      goToHome();\n    }\n  }, [bridgeError, goToHome]);\n\n  const {\n    addProcessorToBridge,\n    isLoading: isAddLoading,\n    processor: addedProcessor,\n    error: processorError,\n  } = useAddProcessorToBridgeApi();\n\n  const handleSave = (requestData: ProcessorRequest): void => {\n    setRequestData(requestData);\n    addProcessorToBridge(instanceId, requestData);\n  };\n\n  useEffect(() => {\n    if (addedProcessor) {\n      goToInstance();\n    }\n  }, [addedProcessor, goToInstance]);\n\n  useEffect(() => {\n    if (processorError && axios.isAxiosError(processorError)) {\n      // TODO: replace error code string with a value coming from an error catalog\n      //  See https://issues.redhat.com/browse/MGDOBR-669 for more details.\n      if (\n        (processorError.response?.data as ResponseError).code === \"OPENBRIDGE-1\"\n      ) {\n        setExistingProcessorName(requestData?.name);\n      }\n    }\n  }, [processorError, requestData]);\n\n  return (\n    <>\n      {isBridgeLoading && (\n        <>\n          <PageHeaderSkeleton\n            pageTitle={t(\"instance.processor.loadingProcessor\")}\n            hasActionDropdown={false}\n            hasLabel={false}\n          />\n          <ProcessorEditSkeleton />\n        </>\n      )}\n      {bridge && (\n        <>\n          <PageSection type=\"breadcrumb\">\n            <Breadcrumb\n              path={[\n                { label: t(\"instance.smartEventInstances\"), linkTo: \"/\" },\n                { label: bridge.name ?? \"\", linkTo: `/instance/${instanceId}` },\n                { label: t(\"processor.createProcessor\") },\n              ]}\n            />\n          </PageSection>\n          <PageSection\n            variant={PageSectionVariants.light}\n            hasShadowBottom={true}\n          >\n            <TextContent>\n              <Text component=\"h1\" ouiaId=\"page-name\">\n                {t(\"processor.createProcessor\")}\n              </Text>\n            </TextContent>\n          </PageSection>\n          <ProcessorEdit\n            saveButtonLabel={t(\"common.create\")}\n            onSave={handleSave}\n            onCancel={goToInstance}\n            isLoading={isAddLoading}\n            existingProcessorName={existingProcessorName}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\ntype InstanceRouteParams = {\n  instanceId: string;\n};\n\nexport default CreateProcessorPage;\n","import {\n  Configuration,\n  ProcessorResponse,\n  ProcessorRequest,\n  ProcessorsApi,\n} from \"@openapi/generated\";\nimport { useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useAddProcessorToBridgeApi(): {\n  addProcessorToBridge: (\n    bridgeId: string,\n    processorRequest: ProcessorRequest\n  ) => void;\n  processor?: ProcessorResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [processor, setProcessor] = useState<ProcessorResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(false);\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const addProcessorToBridge = (\n    bridgeId: string,\n    processorRequest: ProcessorRequest\n  ): void => {\n    setProcessor(undefined);\n    setError(undefined);\n    setIsLoading(true);\n    const processorsApi = new ProcessorsApi(\n      new Configuration({\n        accessToken: getToken,\n        basePath: apiBaseUrl,\n      })\n    );\n    processorsApi\n      .addProcessorToBridge(bridgeId, processorRequest)\n      .then((response) => setProcessor(response.data))\n      .catch((err) => setError(err))\n      .finally(() => setIsLoading(false));\n  };\n\n  return { addProcessorToBridge, isLoading, processor, error };\n}\n","import React from \"react\";\nimport {\n  CodeBlock,\n  CodeBlockCode,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { Processor } from \"../../../types/Processor\";\nimport \"./ProcessorDetail.css\";\n\ninterface ProcessorDetailProps {\n  /**\n   * The processor to display\n   */\n  processor: Processor;\n}\n\nconst ProcessorDetail = (props: ProcessorDetailProps): JSX.Element => {\n  const { processor } = props;\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Stack hasGutter={true}>\n          <StackItem>\n            <TextContent>\n              <Text component={TextVariants.h2} ouiaId=\"type\">\n                {t(\"processor.processorType\")}\n              </Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <Label color={\"blue\"} data-testid=\"processor-type-label\">\n              {t(`processor.${processor.type}`)}\n            </Label>\n          </StackItem>\n        </Stack>\n      </PageSection>\n      {processor.type === \"source\" && (\n        <PageSection variant={PageSectionVariants.light}>\n          <Stack hasGutter={true}>\n            <StackItem>\n              <TextContent>\n                <Text component={TextVariants.h2} ouiaId=\"source-section\">\n                  {t(\"processor.source\")}\n                </Text>\n              </TextContent>\n            </StackItem>\n            <StackItem>\n              <DescriptionList>\n                <DescriptionListGroup key=\"source-type\">\n                  <DescriptionListTerm>\n                    {t(\"processor.sourceType\")}\n                  </DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {processor.source.type}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                {Object.keys(processor.source.parameters).map(\n                  (key): JSX.Element => (\n                    <DescriptionListGroup key={key}>\n                      <DescriptionListTerm>\n                        {t(`processor.${key}`)}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {processor.source.parameters[key]}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  )\n                )}\n              </DescriptionList>\n            </StackItem>\n          </Stack>\n        </PageSection>\n      )}\n      <PageSection variant={PageSectionVariants.light}>\n        <Stack hasGutter={true}>\n          <StackItem>\n            <TextContent>\n              <Text component={TextVariants.h2} ouiaId=\"filters-section\">\n                {t(\"processor.filters\")}\n              </Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            {processor.filters?.length ? (\n              <TableComposable\n                variant={\"compact\"}\n                ouiaId=\"filters-descriptions\"\n                borders={true}\n                className=\"processor-detail__filters\"\n                data-ouia-component-id={\"filters\"}\n              >\n                <Thead>\n                  <Tr ouiaId=\"table-head\">\n                    <Th>{t(\"common.key\")}</Th>\n                    <Th>{t(\"common.type\")}</Th>\n                    <Th>{t(\"common.value\")}</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {processor.filters?.map(\n                    (filter): JSX.Element => (\n                      <Tr key={filter.key} ouiaId={filter.key}>\n                        <Td>{filter.key}</Td>\n                        <Td>{t(`processor.${filter.type}`)}</Td>\n                        <Td>{filter.value}</Td>\n                      </Tr>\n                    )\n                  )}\n                </Tbody>\n              </TableComposable>\n            ) : (\n              <TextContent>\n                <Text component={TextVariants.p} ouiaId=\"no-filters\">\n                  {t(\"processor.noFilters\")}\n                </Text>\n              </TextContent>\n            )}\n          </StackItem>\n        </Stack>\n      </PageSection>\n      {processor.type === \"sink\" && (\n        <>\n          <PageSection variant={PageSectionVariants.light}>\n            <Stack hasGutter={true}>\n              <StackItem>\n                <TextContent>\n                  <Text\n                    component={TextVariants.h2}\n                    ouiaId=\"transformation-section\"\n                  >\n                    {t(\"processor.transformation\")}\n                  </Text>\n                </TextContent>\n              </StackItem>\n              {processor.transformationTemplate ? (\n                <>\n                  <StackItem>\n                    <TextContent>\n                      <Text\n                        component={TextVariants.p}\n                        ouiaId=\"transformation-template\"\n                      >\n                        {t(\"processor.transformationTemplate\")}\n                      </Text>\n                    </TextContent>\n                  </StackItem>\n                  <StackItem>\n                    <CodeBlock className=\"processor-detail__transformation-template\">\n                      <CodeBlockCode>\n                        {processor.transformationTemplate}\n                      </CodeBlockCode>\n                    </CodeBlock>\n                  </StackItem>\n                </>\n              ) : (\n                <StackItem>\n                  <TextContent>\n                    <Text component={TextVariants.p} ouiaId=\"no-transformation\">\n                      {t(\"processor.noTransformationTemplate\")}\n                    </Text>\n                  </TextContent>\n                </StackItem>\n              )}\n            </Stack>\n          </PageSection>\n          <PageSection variant={PageSectionVariants.light}>\n            <Stack hasGutter={true}>\n              <StackItem>\n                <TextContent>\n                  <Text component={TextVariants.h2} ouiaId=\"action-section\">\n                    {t(\"processor.action\")}\n                  </Text>\n                </TextContent>\n              </StackItem>\n              <StackItem>\n                <DescriptionList>\n                  <DescriptionListGroup key=\"action-type\">\n                    <DescriptionListTerm>\n                      {t(\"processor.actionType\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(`processor.actions.${processor.action.type}`)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  {Object.keys(processor.action.parameters).map(\n                    (key): JSX.Element => (\n                      <DescriptionListGroup key={key}>\n                        <DescriptionListTerm>\n                          {t(`processor.${key}`)}\n                        </DescriptionListTerm>\n                        <DescriptionListDescription>\n                          {processor.action.parameters[key]}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )\n                  )}\n                </DescriptionList>\n              </StackItem>\n            </Stack>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ProcessorDetail;\n","import React from \"react\";\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  PageSection,\n  PageSectionVariants,\n  Skeleton,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ProcessorDetailSkeleton = (): JSX.Element => {\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Stack hasGutter={true}>\n          <StackItem>\n            <Skeleton\n              width=\"150px\"\n              screenreaderText={t(\"processor.loadingProcessorType\")}\n            />\n          </StackItem>\n          <StackItem>\n            <Skeleton width=\"80px\" />\n          </StackItem>\n        </Stack>\n      </PageSection>\n      <DescriptionListSkeleton />\n      <DescriptionListSkeleton isLarge={true} />\n      <DescriptionListSkeleton isLarge={true} />\n    </>\n  );\n};\n\nexport default ProcessorDetailSkeleton;\n\ntype DescriptionListSkeletonProps = {\n  isLarge?: boolean;\n};\n\nconst DescriptionListSkeleton = ({\n  isLarge = false,\n}: DescriptionListSkeletonProps): JSX.Element => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <Stack hasGutter={true}>\n        <StackItem>\n          <Skeleton fontSize=\"xl\" width=\"100px\" />\n        </StackItem>\n        <StackItem>\n          <DescriptionList>\n            <DescriptionListGroup key=\"action-type\">\n              <DescriptionListTerm>\n                <Skeleton fontSize=\"md\" width=\"80px\" />\n              </DescriptionListTerm>\n              <DescriptionListDescription>\n                <Skeleton fontSize=\"md\" width={isLarge ? \"600px\" : \"160px\"} />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport isEqual from \"lodash.isequal\";\nimport isEqualWith from \"lodash.isequalwith\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  FormGroup,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport ProcessorDetail from \"@app/Processor/ProcessorDetail/ProcessorDetail\";\nimport { CaretDownIcon } from \"@patternfly/react-icons\";\nimport { Breadcrumb } from \"@app/components/Breadcrumb/Breadcrumb\";\nimport StatusLabel from \"@app/components/StatusLabel/StatusLabel\";\nimport { useGetBridgeApi } from \"../../../hooks/useBridgesApi/useGetBridgeApi\";\nimport { useGetProcessorApi } from \"../../../hooks/useProcessorsApi/useGetProcessorApi\";\nimport PageHeaderSkeleton from \"@app/components/PageHeaderSkeleton/PageHeaderSkeleton\";\nimport { Processor } from \"../../../types/Processor\";\nimport ProcessorDetailSkeleton from \"@app/Processor/ProcessorDetail/ProcessorDetailSkeleton\";\nimport ProcessorEdit from \"@app/Processor/ProcessorEdit/ProcessorEdit\";\nimport { useUpdateProcessorApi } from \"../../../hooks/useProcessorsApi/useUpdateProcessorApi\";\nimport {\n  ManagedResourceStatus,\n  ProcessorRequest,\n  ProcessorResponse,\n} from \"@openapi/generated\";\nimport axios from \"axios\";\nimport { ResponseError } from \"../../../types/Error\";\nimport DeleteProcessor from \"@app/Processor/DeleteProcessor/DeleteProcessor\";\nimport { canDeleteResource } from \"@utils/resourceUtils\";\n\nconst ProcessorDetailPage = (): JSX.Element => {\n  const { instanceId, processorId } = useParams<ProcessorRouteParams>();\n  const history = useHistory();\n  const { t } = useTranslation([\"openbridgeTempDictionary\"]);\n\n  const goToInstance = useCallback(\n    (): void => history.push(`/instance/${instanceId}`),\n    [history, instanceId]\n  );\n  const goToHome = useCallback((): void => history.push(`/`), [history]);\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentProcessor, setCurrentProcessor] = useState<ProcessorResponse>();\n  const [isActionsOpen, setIsActionsOpen] = useState(false);\n  const [existingProcessorName, setExistingProcessorName] = useState<\n    string | undefined\n  >();\n  const [requestData, setRequestData] = useState<ProcessorRequest>();\n  const actionsToggle = (isOpen: boolean): void => {\n    setIsActionsOpen(isOpen);\n  };\n  const actionsSelect = (): void => {\n    setIsActionsOpen(!isActionsOpen);\n  };\n\n  const {\n    getBridge,\n    bridge,\n    isLoading: isBridgeLoading,\n    error: bridgeError,\n  } = useGetBridgeApi();\n\n  useEffect(() => {\n    getBridge(instanceId);\n  }, [getBridge, instanceId]);\n\n  const {\n    getProcessor,\n    processor,\n    isLoading: isProcessorLoading,\n    error: processorError,\n  } = useGetProcessorApi();\n\n  useEffect(() => {\n    getProcessor(instanceId, processorId);\n  }, [getProcessor, instanceId, processorId]);\n\n  const {\n    updateProcessor,\n    processor: updatedProcessor,\n    isLoading: updateProcessorLoading,\n    error: updateProcessorError,\n  } = useUpdateProcessorApi();\n\n  useEffect(() => {\n    setCurrentProcessor(processor);\n  }, [processor]);\n\n  useEffect(() => {\n    setCurrentProcessor(updatedProcessor);\n    setIsEditing(false);\n  }, [updatedProcessor]);\n\n  useEffect(() => {\n    if (bridgeError) {\n      console.error(bridgeError);\n      goToHome();\n    }\n    if (processorError) {\n      console.error(processorError);\n      goToInstance();\n    }\n    if (updateProcessorError && axios.isAxiosError(updateProcessorError)) {\n      // TODO: replace error code string with a value coming from an error catalog\n      //  See https://issues.redhat.com/browse/MGDOBR-669 for more details.\n      if (\n        (updateProcessorError.response?.data as ResponseError).code ===\n        \"OPENBRIDGE-1\"\n      ) {\n        setExistingProcessorName(requestData?.name);\n      }\n    }\n  }, [\n    bridgeError,\n    processorError,\n    goToHome,\n    goToInstance,\n    updateProcessorError,\n    requestData?.name,\n  ]);\n\n  const processorNotChanged = useCallback(\n    (prevDef: ProcessorResponse, updatedDef: ProcessorRequest): boolean =>\n      isEqualWith(\n        prevDef,\n        updatedDef,\n        (prev: ProcessorResponse, next: ProcessorRequest) =>\n          isEqual(prev.name, next.name) &&\n          isEqual(prev.filters, next.filters) &&\n          isEqual(prev.transformationTemplate, next.transformationTemplate) &&\n          isEqual(prev.action, next.action) &&\n          isEqual(prev.source, next.source)\n      ),\n    []\n  );\n\n  const handleUpdateProcessorSaving = useCallback(\n    (processorRequest: ProcessorRequest) => {\n      if (\n        currentProcessor &&\n        processorNotChanged(currentProcessor, processorRequest)\n      ) {\n        setIsEditing(false);\n        return;\n      }\n      setRequestData(processorRequest);\n      updateProcessor(instanceId, processorId, processorRequest);\n    },\n    [\n      currentProcessor,\n      instanceId,\n      processorId,\n      processorNotChanged,\n      updateProcessor,\n    ]\n  );\n\n  const getProcessorTypeSection = useCallback(\n    (processor: ProcessorResponse) => (\n      <Stack>\n        <StackItem>\n          <FormGroup\n            label={t(\"processor.processorType\")}\n            fieldId={\"processor-type\"}\n          />\n        </StackItem>\n        <StackItem>\n          <Label color={\"blue\"} data-testid=\"processor-type-label\">\n            {processor.type && t(`processor.${processor.type}`)}\n          </Label>\n        </StackItem>\n      </Stack>\n    ),\n    [t]\n  );\n\n  const [showProcessorDeleteModal, setShowProcessorDeleteModal] =\n    useState(false);\n\n  const deleteProcessor = (): void => {\n    setShowProcessorDeleteModal(true);\n  };\n\n  const handleOnDeleteProcessorSuccess = useCallback((): void => {\n    setShowProcessorDeleteModal(false);\n    goToInstance();\n  }, [goToInstance]);\n\n  const actionItems = [\n    <DropdownItem\n      key=\"delete\"\n      ouiaId=\"delete\"\n      component=\"button\"\n      onClick={(): void => deleteProcessor()}\n      isDisabled={\n        !currentProcessor ||\n        !canDeleteResource(currentProcessor.status as ManagedResourceStatus)\n      }\n    >\n      {t(\"processor.delete\")}\n    </DropdownItem>,\n  ];\n\n  return (\n    <>\n      {(isBridgeLoading || isProcessorLoading) && (\n        <>\n          <PageHeaderSkeleton\n            pageTitle={t(\"processor.loadingProcessor\")}\n            hasEditButton={true}\n            hasActionDropdown={true}\n            hasLabel={true}\n          />\n          <ProcessorDetailSkeleton />\n        </>\n      )}\n      {bridge && currentProcessor && (\n        <>\n          <PageSection\n            variant={PageSectionVariants.light}\n            hasShadowBottom={true}\n            type=\"breadcrumb\"\n          >\n            <Breadcrumb\n              path={[\n                { label: t(\"instance.smartEventInstances\"), linkTo: \"/\" },\n                { label: bridge.name ?? \"\", linkTo: `/instance/${instanceId}` },\n                { label: currentProcessor.name ?? \"\" },\n              ]}\n            />\n          </PageSection>\n          <PageSection\n            variant={PageSectionVariants.light}\n            hasShadowBottom={true}\n          >\n            <Split hasGutter={true}>\n              <SplitItem isFilled={true}>\n                <Stack hasGutter={true}>\n                  <StackItem>\n                    <TextContent>\n                      <Text component=\"h1\" ouiaId=\"processor-name\">\n                        {currentProcessor.name}\n                      </Text>\n                    </TextContent>\n                  </StackItem>\n                  <StackItem>\n                    <StatusLabel status={currentProcessor.status ?? \"\"} />\n                  </StackItem>\n                </Stack>\n              </SplitItem>\n              {!isEditing && (\n                <SplitItem>\n                  <Split hasGutter={true}>\n                    <SplitItem>\n                      <Button\n                        isAriaDisabled={\n                          currentProcessor.status !==\n                          ManagedResourceStatus.Ready\n                        }\n                        ouiaId=\"edit\"\n                        onClick={(): void => setIsEditing(true)}\n                      >\n                        {t(\"common.edit\")}\n                      </Button>\n                    </SplitItem>\n                    <SplitItem>\n                      <Dropdown\n                        ouiaId=\"processor-actions\"\n                        onSelect={actionsSelect}\n                        alignments={{ sm: \"right\" }}\n                        toggle={\n                          <DropdownToggle\n                            id=\"toggle-id\"\n                            ouiaId=\"actions-toggle\"\n                            onToggle={actionsToggle}\n                            toggleIndicator={CaretDownIcon}\n                          >\n                            {t(\"common.actions\")}\n                          </DropdownToggle>\n                        }\n                        isOpen={isActionsOpen}\n                        dropdownItems={actionItems}\n                      />\n                    </SplitItem>\n                  </Split>\n                </SplitItem>\n              )}\n            </Split>\n          </PageSection>\n          {isEditing ? (\n            <ProcessorEdit\n              processorTypeSection={getProcessorTypeSection(currentProcessor)}\n              processor={currentProcessor}\n              isLoading={updateProcessorLoading}\n              saveButtonLabel={t(\"common.save\")}\n              onSave={handleUpdateProcessorSaving}\n              onCancel={(): void => setIsEditing(false)}\n              existingProcessorName={existingProcessorName}\n            />\n          ) : (\n            <>\n              <ProcessorDetail\n                processor={currentProcessor as unknown as Processor}\n              />\n              <DeleteProcessor\n                showDeleteModal={showProcessorDeleteModal}\n                bridgeId={bridge.id as string}\n                processorId={currentProcessor.id as string}\n                processorName={currentProcessor.name as string}\n                onDeleted={handleOnDeleteProcessorSuccess}\n                onCanceled={(): void => setShowProcessorDeleteModal(false)}\n              />\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ProcessorDetailPage;\n\ntype ProcessorRouteParams = {\n  instanceId: string;\n  processorId: string;\n};\n","import {\n  Configuration,\n  ProcessorResponse,\n  ProcessorsApi,\n} from \"@openapi/generated\";\nimport { useCallback, useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useGetProcessorApi(): {\n  getProcessor: (bridgeId: string, processorId: string) => void;\n  processor?: ProcessorResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [processor, setProcessor] = useState<ProcessorResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(true);\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const getProcessor = useCallback(\n    (bridgeId: string, processorId: string) => {\n      const processorsApi = new ProcessorsApi(\n        new Configuration({\n          accessToken: getToken,\n          basePath: apiBaseUrl,\n        })\n      );\n      processorsApi\n        .getProcessor(bridgeId, processorId)\n        .then((response) => setProcessor(response.data))\n        .catch((err) => setError(err))\n        .finally(() => setIsLoading(false));\n    },\n    [getToken, apiBaseUrl]\n  );\n\n  return { getProcessor, isLoading, processor, error };\n}\n","import {\n  Configuration,\n  ProcessorResponse,\n  ProcessorRequest,\n  ProcessorsApi,\n} from \"@openapi/generated\";\nimport { useState } from \"react\";\nimport { useSmartEvents } from \"@contexts/SmartEventsContext\";\n\nexport function useUpdateProcessorApi(): {\n  updateProcessor: (\n    bridgeId: string,\n    processorId: string,\n    processorRequest: ProcessorRequest\n  ) => void;\n  processor?: ProcessorResponse;\n  isLoading: boolean;\n  error: unknown;\n} {\n  const [processor, setProcessor] = useState<ProcessorResponse>();\n  const [error, setError] = useState<unknown>();\n  const [isLoading, setIsLoading] = useState(false);\n  const { getToken, apiBaseUrl } = useSmartEvents();\n\n  const updateProcessor = (\n    bridgeId: string,\n    processorId: string,\n    processorRequest: ProcessorRequest\n  ): void => {\n    setIsLoading(true);\n    setError(undefined);\n    setProcessor(undefined);\n    const processorsApi = new ProcessorsApi(\n      new Configuration({\n        accessToken: getToken,\n        basePath: apiBaseUrl,\n      })\n    );\n    processorsApi\n      .updateProcessor(bridgeId, processorId, processorRequest)\n      .then((response) => setProcessor(response.data))\n      .catch((err) => setError(err))\n      .finally(() => setIsLoading(false));\n  };\n\n  return { updateProcessor, isLoading, processor, error };\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport InstancePage from \"@app/Instance/InstancePage/InstancePage\";\nimport InstancesListPage from \"@app/Instance/InstancesListPage/InstancesListPage\";\nimport CreateProcessorPage from \"@app/Processor/CreateProcessorPage/CreateProcessorPage\";\nimport ProcessorDetailPage from \"@app/Processor/ProcessorDetailPage/ProcessorDetailPage\";\n\nconst Routes = (): JSX.Element => {\n  return (\n    <Switch>\n      <Route exact path={\"/\"}>\n        <InstancesListPage />\n      </Route>\n      <Route path={`/instance/:instanceId/processor/:processorId`}>\n        <ProcessorDetailPage />\n      </Route>\n      <Route path={`/instance/:instanceId/create-processor`}>\n        <CreateProcessorPage />\n      </Route>\n      <Route path={`/instance/:instanceId`}>\n        <InstancePage />\n      </Route>\n      <Route path=\"*\">\n        <>\n          <p>no match</p>\n        </>\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import React, { createContext, useContext } from \"react\";\n\ntype AppContextType = {\n  getToken: () => Promise<string>;\n  getUsername: () => Promise<string>;\n  apiBaseUrl: string;\n};\n\ntype AppContextProviderProps = AppContextType & {\n  children: React.ReactNode;\n};\n\nconst SmartEventsContext = createContext<AppContextType | null>(null);\n\nexport const SmartEventsContextProvider = ({\n  getToken,\n  getUsername,\n  apiBaseUrl,\n  children,\n}: AppContextProviderProps): JSX.Element => (\n  <SmartEventsContext.Provider\n    value={{\n      getToken,\n      getUsername,\n      apiBaseUrl,\n    }}\n  >\n    {children}\n  </SmartEventsContext.Provider>\n);\n\nexport const useSmartEvents = (): AppContextType => {\n  const context = useContext(SmartEventsContext);\n  if (!context)\n    throw new Error(\n      \"useSmartEvents must be used inside an SmartEventsContextProvider\"\n    );\n\n  return {\n    ...context,\n  };\n};\n"],"names":["Breadcrumb","path","ouiaId","map","pathItem","itemIndex","isLastItem","length","BreadcrumbItem","label","key","isActive","render","className","linkTo","Link","to","Table","ariaLabel","columns","cssClasses","rows","variant","children","renderActions","TableComposable","css","Thead","Tr","column","transformColumns","Th","Tbody","Td","colSpan","objectRow","cells","accessor","formatter","value","originalData","transformRows","row","rowIndex","name","id","cell","cellIndex","ActionsColumn","Pagination","itemCount","page","perPage","onChange","isCompact","style","float","perPageOptions","title","onSetPage","_","onPerPageSelect","TableSkeleton","totalRows","hasActionColumn","Array","keys","rowNumber","Skeleton","TableWithPagination","customToolbarElement","isLoading","pageNumber","pageSize","onPaginationChange","tableLabel","getPagination","isBottom","PaginationVariant","Card","Toolbar","ToolbarContent","ToolbarItem","alignment","default","InstanceDetails","instance","onClosingDetails","t","useTranslation","formatDate","dateStr","format","Date","DrawerPanelContent","widths","DrawerHead","Stack","StackItem","TextContent","Text","component","DrawerActions","DrawerCloseButton","onClick","DrawerContentBody","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ClipboardCopy","isReadOnly","hoverTip","clickTip","endpoint","submitted_at","published_at","props","status","Label","color","icon","CheckCircleIcon","textTransform","replace","constructor","configuration","basePath","axios","this","RequiredError","Error","field","msg","super","functionName","paramName","paramValue","object","accessToken","url","objects","searchParams","URLSearchParams","search","isArray","delete","item","append","set","toString","requestOptions","nonString","isJsonMime","headers","JSON","stringify","undefined","pathname","hash","axiosArgs","globalAxios","BASE_PATH","axiosRequestArgs","options","request","BridgesApiFp","localVarAxiosParamCreator","createBridge","bridgeRequest","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","headersFromBaseOptions","data","deleteBridge","bridgeId","localVarPath","encodeURIComponent","String","getBridge","getBridges","size","localVarQueryParameter","BridgesApiAxiosParamCreator","localVarAxiosArgs","BridgesApi","then","ProcessorsApiFp","addProcessorToBridge","processorRequest","deleteProcessor","processorId","getProcessor","listProcessors","updateProcessor","ProcessorsApiAxiosParamCreator","ProcessorsApi","Configuration","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","ManagedResourceStatus","useGetBridgeApi","bridge","setBridge","useState","error","setError","setIsLoading","getToken","apiBaseUrl","useCallback","response","catch","err","finally","pageTitle","hasEditButton","hasActionDropdown","hasLabel","totalTabs","PageSection","PageSectionVariants","hasShadowBottom","type","Split","hasGutter","SplitItem","fontSize","width","isFilled","screenreaderText","Tabs","usePageInsets","tabNumber","Tab","eventKey","TableWithPaginationSkeleton","useGetProcessorsApi","processorListResponse","setProcessorListResponse","prevCallTokenSource","useRef","getProcessors","pageReq","sizeReq","isPolling","current","cancel","source","cancelToken","token","usePolling","callback","delay","savedCallback","useEffect","setInterval","clearInterval","DeleteModal","modalTitle","resourceName","resourceType","onCancel","onConfirm","showDialog","isPreloading","blockedDeletionReason","nameValue","setNameValue","canDelete","onCancelDelete","deleteActions","Button","isDisabled","closeActions","Modal","ModalVariant","titleIconVariant","isOpen","onClose","actions","ModalBoxBody","Bullseye","Spinner","isSVG","TextVariants","Trans","i18nKey","values","Form","onSubmit","event","preventDefault","FormGroup","fieldId","TextInput","autoComplete","validated","ValidatedOptions","showDeleteModal","instanceId","instanceName","onDeleted","onCanceled","preloading","setPreloading","deleteBlockedReason","setDeleteBlockedReason","total","deleteBridgeLoading","success","bridgeDeleteSuccess","bridgeDeleteError","setSuccess","useDeleteBridgeApi","code","canDeleteResource","resourceStatus","processorName","useDeleteProcessorApi","console","useParams","location","useLocation","history","useHistory","goToHome","push","processorsTabRef","currentPage","setCurrentPage","currentPageSize","setCurrentPageSize","setTotalRows","activeTabKey","setActiveTabKey","isDropdownActionOpen","setIsDropdownActionOpen","showInstanceDrawer","setShowInstanceDrawer","isBridgeLoading","bridgeError","areProcessorsLoading","processorsError","triggerGetProcessors","processorsOverviewColumns","typeString","charAt","toUpperCase","slice","statusString","date","formatDistance","correctPageNumber","showInstanceDeleteModal","setShowInstanceDeleteModal","deleteProcessorId","setDeleteProcessorId","deleteProcessorName","setDeleteProcessorName","handleOnDeleteInstanceSuccess","showProcessorDeleteModal","setShowProcessorDeleteModal","handleOnDeleteProcessorSuccess","tableActions","rowData","TabContent","items","Drawer","isExpanded","DrawerContent","panelContent","Dropdown","onSelect","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","dropdownItems","DropdownItem","activeKey","tabContentId","tabContentRef","TabTitleText","ref","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","headingLevel","isModalOpen","onCreate","existingInstanceName","setName","FORM_ID","validate","trim","handleNameChange","form","spinnerAriaValueText","isRequired","helperTextInvalid","maxLength","onBlur","AlertGroup","Alert","isInline","isPlain","selectedInstance","setSelectedInstance","columnNames","bridgeListResponse","setBridgeListResponse","useGetBridgesApi","triggerGetBridges","showCreateInstance","setShowCreateInstance","newBridgeName","setNewBridgeName","existingBridgeName","setExistingBridgeName","createBridgeError","createBridgeLoading","useCreateBridgeApi","handleCreateBridge","closeCreateInstanceDialog","setShowDeleteModal","deleteInstanceId","setDeleteInstanceId","deleteInstanceName","setDeleteInstanceName","resetDeleteInstance","handleOnDeleteSuccess","handleOnDeleteCancel","deleteInstance","pageContent","EmptyStateBody","filters","updateFilter","filter","index","_event","eventIndex","filterTypesOptions","isPlaceholder","FormSelect","option","FormSelectOption","Flex","direction","justifyContent","height","FlexItem","deleteFilter","TrashAltIcon","useValidationBase","isValid","errorMessage","isHTTPUrl","e","protocol","isValidUrl","useValidateConfigParams","config","configTypes","validation","setValidation","errors","resetValidation","propertyName","prevState","omit","validateType","validateField","typeName","fieldName","configType","find","fields","fieldValidation","parameters","validations","reduce","prev","curr","action","registerValidation","setType","setParameters","actionTypes","emptyParameters","topic","channel","webhookUrl","updateType","actionType","updateConfiguration","sourceTypes","sourceType","updateParameters","existingProcessorName","saveButtonLabel","onSave","processor","processorTypeSection","processorType","setProcessorType","setFilters","transformation","setTransformation","transformationTemplate","setAction","setSource","setRequest","isSubmitted","setIsSubmitted","registerValidateConfig","validateName","validateConfig","isEmpty","validateProcessorType","useValidateProcessor","document","querySelector","scrollIntoView","behavior","block","inline","padding","grow","flexWrap","FormSection","titleElement","Grid","GridItem","span","Tile","isSelected","CodeEditor","isLineNumbersVisible","scrollbar","alwaysConsumeMouseWheel","shrink","ActionGroup","requestData","formData","filtersData","prepareRequest","spaceItems","shape","setExistingProcessorName","setRequestData","goToInstance","isAddLoading","addedProcessor","processorError","setProcessor","useAddProcessorToBridgeApi","Object","borders","CodeBlock","CodeBlockCode","DescriptionListSkeleton","isLarge","isEditing","setIsEditing","currentProcessor","setCurrentProcessor","isActionsOpen","setIsActionsOpen","isProcessorLoading","useGetProcessorApi","updatedProcessor","updateProcessorLoading","updateProcessorError","useUpdateProcessorApi","processorNotChanged","prevDef","updatedDef","next","handleUpdateProcessorSaving","getProcessorTypeSection","actionItems","isAriaDisabled","alignments","sm","Switch","Route","exact","SmartEventsContext","createContext","SmartEventsContextProvider","getUsername","Provider","useSmartEvents","context","useContext"],"sourceRoot":""}