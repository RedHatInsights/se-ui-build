{"version":3,"file":"8899.630b3fa9.js","mappings":"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AEFV,WAAY,CACVuB,aAAc,CACZrB,MAAO,gBACPL,YAAa,2BACbnB,KAAM,UAER8C,eAAgB,CACdtB,MAAO,aACP,UAAW,cACXgB,MAAO,CACL,CACEhB,MAAO,aACPL,YAAa,mCACbnB,KAAM,SACNyC,OAAQ,YAEV,CACEtB,YAAa,4CACbnB,KAAM,SACNsB,WAAY,MAIlByB,eAAgB,CACdvB,MAAO,aACP,UAAW,cACXgB,MAAO,CACL,CACEhB,MAAO,aACPL,YAAa,mCACbnB,KAAM,SACNyC,OAAQ,YAEV,CACEtB,YAAa,4CACbnB,KAAM,SACNsB,WAAY,MAIlB0B,WAAY,CACVxB,MAAO,aACPL,YAAa,+BACbnB,KAAM,SACN0B,QAAS,YACTuB,KAAM,CACJ,aACA,YACA,iBACA,iBACA,iBACA,aACA,iBACA,iBACA,iBACA,eACA,eACA,aACA,aACA,YACA,YACA,YACA,iBACA,iBACA,iBACA,iBACA,aACA,YACA,YACA,YACA,YACA,YACA,aACA,iBACA,gBACA,gBACA,gBACA,gBACA,qBAKR,yBAA0B,CACxBjD,KAAM,SACNqB,sBAAsB,EACtBW,SAAU,CACR,iBACA,uBACA,2BAEFV,WAAY,CACV4B,eAAgB,CACd1B,MAAO,aACPL,YAAa,qCACbnB,KAAM,UAERmD,qBAAsB,CACpB3B,MAAO,mBACPL,YACE,iIACFnB,KAAM,UAERoD,wBAAyB,CACvB5B,MAAO,sBACPL,YACE,kHACFnB,KAAM,SACN,UAAW,cACXyC,OAAQ,YAId,oBAAqB,CACnBzC,KAAM,SACNqB,sBAAsB,EACtBW,SAAU,CACR,yBACA,aACA,iBACA,kBAEFV,WAAY,CACV+B,uBAAwB,CACtB7B,MAAO,cACPL,YAAa,4BACbnB,KAAM,UAERsD,sBAAuB,CACrB9B,MAAO,sBACPL,YAAa,sCACbnB,KAAM,UACN+B,SAAS,GAEXe,eAAgB,CACdtB,MAAO,aACP,UAAW,cACXgB,MAAO,CACL,CACEhB,MAAO,aACPL,YAAa,mCACbnB,KAAM,SACNyC,OAAQ,YAEV,CACEtB,YAAa,4CACbnB,KAAM,SACNsB,WAAY,MAIlBy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","sources":["webpack://smartevents-ui/./mocked-api/data.ts","webpack://smartevents-ui/./mocked-api/schemasData.ts","webpack://smartevents-ui/./mocked-api/cloudProvidersData.ts","webpack://smartevents-ui/./mocked-api/handlers.ts","webpack://smartevents-ui/./mocked-api/browser.ts","webpack://smartevents-ui/./openapi/generated/model/processor-type.ts","webpack://smartevents-ui/./src/app/components/AppLayout/Patternfly-Logo.svg","webpack://smartevents-ui/./src/Keycloak.tsx","webpack://smartevents-ui/./src/app/components/AppLayout/AppLayout.tsx","webpack://smartevents-ui/./src/App.tsx","webpack://smartevents-ui/./src/AppMocked.tsx","webpack://smartevents-ui/./src/bootstrap.tsx"],"sourcesContent":["export const instancesData = [\n  {\n    kind: \"Bridge\",\n    id: \"3543edaa-1851-4ad7-96be-ebde7d20d717\",\n    name: \"Instance one\",\n    href: \"/api/smartevents_mgmt/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717\",\n    owner: \"bebianco@redhat.com\",\n    status: \"ready\",\n    submitted_at: \"2022-02-24T13:34:00Z\",\n    published_at: \"2022-02-24T13:35:00Z\",\n    endpoint:\n      \"https://3543edaa-1851-4ad7-96be-ebde7d20d717.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"830c8f0d-c677-492f-8d7e-0f81893fbba6\",\n    name: \"Instance two\",\n    href: \"/api/smartevents_mgmt/v1/bridges/830c8f0d-c677-492f-8d7e-0f81893fbba6\",\n    owner: \"bebianco@redhat.com\",\n    status: \"ready\",\n    submitted_at: \"2022-02-20T11:23:00Z\",\n    published_at: \"2022-02-20T11:24:00Z\",\n    endpoint:\n      \"https://830c8f0d-c677-492f-8d7e-0f81893fbba6.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"ee22ce62-1f23-4dd7-b106-e4158baf8228\",\n    name: \"Instance three\",\n    href: \"/api/smartevents_mgmt/v1/bridges/ee22ce62-1f23-4dd7-b106-e4158baf8228\",\n    owner: \"bebianco@redhat.com\",\n    status: \"accepted\",\n    submitted_at: \"2022-02-15T12:03:00Z\",\n    published_at: \"2022-02-15T12:04:00Z\",\n    endpoint:\n      \"https://ee22ce62-1f23-4dd7-b106-e4158baf8228.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"21ac90ba-76d2-4f88-b08b-2547ef359bae\",\n    name: \"Instance four\",\n    href: \"/api/smartevents_mgmt/v1/bridges/21ac90ba-76d2-4f88-b08b-2547ef359bae\",\n    owner: \"bebianco@redhat.com\",\n    status: \"provisioning\",\n    submitted_at: \"2022-02-10T16:34:00Z\",\n    published_at: \"2022-02-10T16:35:00Z\",\n    endpoint:\n      \"https://21ac90ba-76d2-4f88-b08b-2547ef359bae.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"d4de4dd9-42fe-48ec-8ac7-42163e6e971a\",\n    name: \"error-test\",\n    href: \"/api/smartevents_mgmt/v1/bridges/d4de4dd9-42fe-48ec-8ac7-42163e6e971a\",\n    owner: \"bebianco@redhat.com\",\n    status: \"ready\",\n    submitted_at: \"2022-02-05T13:58:00Z\",\n    published_at: \"2022-02-05T13:59:00Z\",\n    endpoint:\n      \"https://d4de4dd9-42fe-48ec-8ac7-42163e6e971a.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"d7e13602-b046-4120-b377-15d61e21c31a\",\n    name: \"Instance six\",\n    href: \"/api/smartevents_mgmt/v1/bridges/d7e13602-b046-4120-b377-15d61e21c31a\",\n    owner: \"bebianco@redhat.com\",\n    status: \"ready\",\n    submitted_at: \"2022-02-01T12:02:00Z\",\n    published_at: \"2022-02-01T12:03:00Z\",\n    endpoint:\n      \"https://d7e13602-b046-4120-b377-15d61e21c31a.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"3a7efbed-3562-4a95-9c32-f49d12d8cab2\",\n    name: \"Instance seven\",\n    href: \"/api/smartevents_mgmt/v1/bridges/3a7efbed-3562-4a95-9c32-f49d12d8cab2\",\n    owner: \"bebianco@redhat.com\",\n    status: \"ready\",\n    submitted_at: \"2021-12-25T21:46:00Z\",\n    published_at: \"2021-12-25T21:47:00Z\",\n    endpoint:\n      \"https://3a7efbed-3562-4a95-9c32-f49d12d8cab2.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"fa648473-3662-4bbc-99ba-158d9ab95ccc\",\n    name: \"Instance eight\",\n    owner: \"bebianco@redhat.com\",\n    href: \"/api/smartevents_mgmt/v1/bridges/fa648473-3662-4bbc-99ba-158d9ab95ccc\",\n    status: \"ready\",\n    submitted_at: \"2021-12-20T12:21:00Z\",\n    published_at: \"2021-12-20T12:22:00Z\",\n    endpoint:\n      \"https://fa648473-3662-4bbc-99ba-158d9ab95ccc.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"04f131c3-b34c-4ee2-b153-fbff0bb91ece\",\n    name: \"Instance nine\",\n    owner: \"bebianco@redhat.com\",\n    href: \"/api/smartevents_mgmt/v1/bridges/04f131c3-b34c-4ee2-b153-fbff0bb91ece\",\n    status: \"ready\",\n    submitted_at: \"2021-12-15T16:09:00Z\",\n    published_at: \"2021-12-15T16:10:00Z\",\n    endpoint:\n      \"https://04f131c3-b34c-4ee2-b153-fbff0bb91ece.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"c28da8c0-05e4-42f3-a3fd-615cc7fbb382\",\n    name: \"Instance ten\",\n    owner: \"bebianco@redhat.com\",\n    href: \"/api/smartevents_mgmt/v1/bridges/c28da8c0-05e4-42f3-a3fd-615cc7fbb382\",\n    status: \"ready\",\n    submitted_at: \"2021-12-10T11:34:00Z\",\n    published_at: \"2021-12-10T11:35:00Z\",\n    endpoint:\n      \"https://c28da8c0-05e4-42f3-a3fd-615cc7fbb382.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"a8c1cb57-0ab3-4ccb-8c55-ef8a8b166846\",\n    name: \"Instance eleven\",\n    owner: \"bebianco@redhat.com\",\n    href: \"/api/smartevents_mgmt/v1/bridges/a8c1cb57-0ab3-4ccb-8c55-ef8a8b166846\",\n    status: \"ready\",\n    submitted_at: \"2021-12-05T11:34:00Z\",\n    published_at: \"2021-12-05T11:35:00Z\",\n    endpoint:\n      \"https://a8c1cb57-0ab3-4ccb-8c55-ef8a8b166846.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"e176d63b-6fdc-43ce-afc8-45160f456502\",\n    name: \"Instance twelve\",\n    owner: \"bebianco@redhat.com\",\n    href: \"/api/smartevents_mgmt/v1/bridges/e176d63b-6fdc-43ce-afc8-45160f456502\",\n    status: \"ready\",\n    submitted_at: \"2021-12-01T11:34:00Z\",\n    published_at: \"2021-12-01T11:35:00Z\",\n    endpoint:\n      \"https://e176d63b-6fdc-43ce-afc8-45160f456502.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n];\n\nexport const processorData = [\n  {\n    kind: \"Processor\",\n    id: \"a72fb8e7-162b-4ae8-9672-f9f5b86fb3d7\",\n    name: \"Processor one\",\n    type: \"sink\",\n    href: \"/api/smartevents_mgmt/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/a72fb8e7-162b-4ae8-9672-f9f5b86fb3d7\",\n    submitted_at: \"2022-04-12T12:10:46.029400+0000\",\n    published_at: \"2022-04-12T12:12:52.416527+0000\",\n    transformationTemplate: \"Hi! This is a test message\",\n    status: \"ready\",\n    action: {\n      type: \"slack_sink_0.1\",\n      parameters: JSON.stringify({\n        slack_channel: \"#test\",\n        slack_webhook_url:\n          \"https://hooks.slack.com/services/XXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXX\",\n        slack_username: \"test\",\n      }),\n    },\n  },\n  {\n    kind: \"Processor\",\n    id: \"fa373030-c0d2-11ec-9d64-0242ac120002\",\n    name: \"Processor two\",\n    type: \"sink\",\n    href: \"/api/smartevents_mgmt/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/fa373030-c0d2-11ec-9d64-0242ac120002\",\n    submitted_at: \"2022-04-15T12:10:46.029400+0000\",\n    published_at: \"2022-04-15T12:12:52.416527+0000\",\n    filters: [\n      {\n        type: \"StringEquals\",\n        key: \"data.name\",\n        value: \"John\",\n      },\n    ],\n    status: \"ready\",\n    action: {\n      type: \"slack_sink_0.1\",\n      parameters: JSON.stringify({\n        slack_channel: \"test\",\n        slack_webhook_url:\n          \"https://hooks.slack.com/services/XXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXX\",\n      }),\n    },\n  },\n  {\n    kind: \"Processor\",\n    id: \"f8f34af4-caed-11ec-9d64-0242ac120002\",\n    name: \"Processor three\",\n    type: \"source\",\n    href: \"/api/smartevents_mgmt/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/f8f34af4-caed-11ec-9d64-0242ac120002\",\n    submitted_at: \"2022-04-15T12:10:46.029400+0000\",\n    published_at: \"2022-04-15T12:12:52.416527+0000\",\n    filters: [\n      {\n        type: \"StringEquals\",\n        key: \"data.name\",\n        value: \"John\",\n      },\n    ],\n    status: \"accepted\",\n    source: {\n      type: \"slack_source_0.1\",\n      parameters: JSON.stringify({\n        slack_channel: \"#test\",\n        slack_token: \"***********\",\n      }),\n    },\n  },\n  {\n    kind: \"Processor\",\n    id: \"sourcef4-ead8-6g8v-as8e-0642tdjek002\",\n    name: \"Processor four\",\n    type: \"source\",\n    href: \"/api/smartevents_mgmt/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/sourcef4-ead8-6g8v-as8e-0642tdjek002\",\n    submitted_at: \"2022-05-15T12:10:46.029400+0000\",\n    published_at: \"2022-05-15T12:12:52.416527+0000\",\n    filters: [],\n    status: \"ready\",\n    source: {\n      type: \"slack_source_0.1\",\n      parameters: JSON.stringify({\n        slack_channel: \"#test\",\n        slack_token: \"***********\",\n      }),\n    },\n  },\n];\n","export const schemaCatalogData = [\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"ansible_tower_job_template_sink_0.1\",\n    name: \"Ansible Tower Job Template\",\n    description: \"Launch a job template in Ansible Tower.\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/ansible_tower_job_template_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"kafka_topic_sink_0.1\",\n    name: \"Kafka Topic\",\n    description: \"Send the event to a kafka topic.\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/kafka_topic_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"send_to_bridge_sink_0.1\",\n    name: \"Send To Bridge\",\n    description: \"Send the event to a Bridge instance.\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/send_to_bridge_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"slack_sink_0.1\",\n    name: \"Slack\",\n    description: \"Send the event to a slack channel.\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/slack_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"webhook_sink_0.1\",\n    name: \"Webhook\",\n    description: \"Send the event to a webhook.\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/webhook_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"aws_lambda_sink_0.1\",\n    name: \"AWS Lambda\",\n    description: \"Send the event to an AWS lambda.\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/aws_lambda_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"google_pubsub_sink_0.1\",\n    name: \"Google PubSub\",\n    description: \"Send the event to Google PubSub\",\n    type: \"action\",\n    href: \"/api/smartevents_mgmt/v1/schemas/actions/google_pubsub_sink_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"aws_s3_source_0.1\",\n    name: \"Aws S3 Source\",\n    description: \"Ingest data from Aws S3.\",\n    type: \"source\",\n    href: \"/api/smartevents_mgmt/v1/schemas/sources/aws_s3_source_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"aws_sqs_source_0.1\",\n    name: \"Aws Sqs Source\",\n    description: \"Ingest data from Aws Sqs.\",\n    type: \"source\",\n    href: \"/api/smartevents_mgmt/v1/schemas/sources/aws_sqs_source_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"slack_source_0.1\",\n    name: \"Slack Source\",\n    description: \"Ingest data from a Slack channel.\",\n    type: \"source\",\n    href: \"/api/smartevents_mgmt/v1/schemas/sources/slack_source_0.1\",\n  },\n  {\n    kind: \"ProcessorSchemaEntry\",\n    id: \"google_pubsub_source_0.1\",\n    name: \"Google PubSub Source\",\n    description: \"Ingest data from Google PubSub.\",\n    type: \"source\",\n    href: \"/api/smartevents_mgmt/v1/schemas/sources/google_pubsub_source_0.1\",\n  },\n];\n\nexport const schemasData: { [key: string]: object } = {\n  \"ansible_tower_job_template_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    properties: {\n      endpoint: {\n        type: \"string\",\n        title: \"Endpoint\",\n        description: \"Ansible Tower instance base endpoint.\",\n        pattern:\n          \"(http|https):\\\\/\\\\/([\\\\w_-]+(?:(?:\\\\.[\\\\w_-]+)+))([\\\\w.,@?^=%&:\\\\/~+#-]*[\\\\w@?^=%&\\\\/~+#-])\",\n        example: \"https://my.ansible-tower.host\",\n      },\n      job_template_id: {\n        type: \"string\",\n        title: \"Job Template ID\",\n        description: \"The ID of the job template to trigger.\",\n        example: \"14\",\n      },\n      basic_auth_username: {\n        type: \"string\",\n        title: \"Basic Auth Username\",\n        description: \"The username for basic auth.\",\n        example: \"kermit\",\n      },\n      basic_auth_password: {\n        type: \"string\",\n        title: \"Basic Auth Password\",\n        description: \"The password for basic auth.\",\n        example: \"mypassword\",\n      },\n      ssl_verification_disabled: {\n        type: \"boolean\",\n        title: \"SSL Verification Disabled\",\n        description: \"Specify if SSL verification has to be disabled\",\n        default: false,\n      },\n    },\n    required: [\"endpoint\", \"job_template_id\"],\n    optional: [\n      \"basic_auth_username\",\n      \"basic_auth_password\",\n      \"ssl_verification_disabled\",\n    ],\n    dependentRequired: {\n      basic_auth_username: [\"basic_auth_password\"],\n      basic_auth_password: [\"basic_auth_username\"],\n    },\n  },\n  \"kafka_topic_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    properties: {\n      topic: {\n        type: \"string\",\n        title: \"Topic Name\",\n        description: \"The topic where to send the event.\",\n        example: \"my-topic\",\n      },\n      kafka_broker_url: {\n        type: \"string\",\n        title: \"Broker URL\",\n        description: \"RHOSAK Broker URL\",\n        example: \"username-c--hj---mhlksdfss-p--a.bf2.kafka.rhcloud.com:443\",\n      },\n      kafka_client_id: {\n        type: \"string\",\n        title: \"Client Id\",\n        description:\n          \"The Client Id part of the credentials to authenticate to Kafka\",\n      },\n      kafka_client_secret: {\n        type: \"string\",\n        title: \"Client Secret\",\n        description:\n          \"The Client Secret part of the credentials to authenticate to Kafka\",\n      },\n    },\n    required: [\n      \"topic\",\n      \"kafka_broker_url\",\n      \"kafka_client_id\",\n      \"kafka_client_secret\",\n    ],\n  },\n  \"send_to_bridge_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    properties: {\n      bridgeId: {\n        type: \"string\",\n        title: \"Bridge ID\",\n        description:\n          \"The bridgeId of the instance to target. If not specified the bridgeId is the processor's owner bridge itself.\",\n        example: \"f1fbd010-93cf-4be1-aa78-b37ba48858fe\",\n      },\n    },\n    optional: [\"bridgeId\"],\n  },\n  \"slack_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\"slack_channel\", \"slack_webhook_url\"],\n    properties: {\n      slack_channel: {\n        title: \"Channel\",\n        description: \"The Slack channel to send messages to.\",\n        type: \"string\",\n        example: \"#myroom\",\n      },\n      slack_webhook_url: {\n        title: \"Webhook URL\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Webhook URL\",\n            description:\n              \"The webhook URL used by the Slack channel to handle incoming messages.\",\n            type: \"string\",\n            format: \"password\",\n            $comment: \"https://stackoverflow.com/a/6041965/9360757\",\n            pattern:\n              \"(http|https):\\\\/\\\\/([\\\\w_-]+(?:(?:\\\\.[\\\\w_-]+)+))([\\\\w.,@?^=%&:\\\\/~+#-]*[\\\\w@?^=%&\\\\/~+#-])\",\n          },\n          {\n            description: \"An opaque reference to the slack_webhook_url\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      slack_icon_emoji: {\n        title: \"Icon Emoji\",\n        description: \"Use a Slack emoji as an avatar.\",\n        type: \"string\",\n      },\n      slack_icon_url: {\n        title: \"Icon URL\",\n        description:\n          \"The avatar that the component will use when sending message to a channel or user.\",\n        type: \"string\",\n      },\n      slack_username: {\n        title: \"Username\",\n        description:\n          \"This is the username that the bot will have when sending messages to a channel or user.\",\n        type: \"string\",\n      },\n    },\n  },\n  \"webhook_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    properties: {\n      endpoint: {\n        type: \"string\",\n        title: \"Endpoint\",\n        description: \"The endpoint that receives the webhook.\",\n        $comment: \"https://stackoverflow.com/a/6041965/9360757\",\n        pattern:\n          \"(http|https):\\\\/\\\\/([\\\\w_-]+(?:(?:\\\\.[\\\\w_-]+)+))([\\\\w.,@?^=%&:\\\\/~+#-]*[\\\\w@?^=%&\\\\/~+#-])\",\n        example: \"https://webhook.site/#!/f1fbd010-93cf-4be1-aa78-b37ba48858fe\",\n      },\n      basic_auth_username: {\n        type: \"string\",\n        title: \"Basic Auth Username\",\n        description: \"The username for basic auth.\",\n        example: \"kermit\",\n        format: \"password\",\n      },\n      basic_auth_password: {\n        type: \"string\",\n        title: \"Basic Auth Password\",\n        description: \"The password for basic auth.\",\n        example: \"mypassword\",\n        format: \"password\",\n      },\n      ssl_verification_disabled: {\n        type: \"boolean\",\n        title: \"SSL Verification Disabled\",\n        description: \"Specify if SSL verification has to be disabled\",\n        example: \"false\",\n        default: false,\n      },\n    },\n    required: [\"endpoint\"],\n    optional: [\n      \"basic_auth_username\",\n      \"basic_auth_password\",\n      \"ssl_verification_disabled\",\n    ],\n    dependentRequired: {\n      basic_auth_username: [\"basic_auth_password\"],\n      basic_auth_password: [\"basic_auth_username\"],\n    },\n  },\n  \"aws_lambda_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\n      \"aws_function\",\n      \"aws_region\",\n      \"aws_access_key\",\n      \"aws_secret_key\",\n    ],\n    properties: {\n      aws_function: {\n        title: \"Function Name\",\n        description: \"The Lambda Function name\",\n        type: \"string\",\n      },\n      aws_access_key: {\n        title: \"Access Key\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Access Key\",\n            description: \"The access key obtained from AWS\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the aws_access_key\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      aws_secret_key: {\n        title: \"Secret Key\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Secret Key\",\n            description: \"The secret key obtained from AWS\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the aws_secret_key\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      aws_region: {\n        title: \"AWS Region\",\n        description: \"The AWS region to connect to\",\n        type: \"string\",\n        example: \"eu-west-1\",\n        enum: [\n          \"af-south-1\",\n          \"ap-east-1\",\n          \"ap-northeast-1\",\n          \"ap-northeast-2\",\n          \"ap-northeast-3\",\n          \"ap-south-1\",\n          \"ap-southeast-1\",\n          \"ap-southeast-2\",\n          \"ap-southeast-3\",\n          \"ca-central-1\",\n          \"eu-central-1\",\n          \"eu-north-1\",\n          \"eu-south-1\",\n          \"eu-west-1\",\n          \"eu-west-2\",\n          \"eu-west-3\",\n          \"fips-us-east-1\",\n          \"fips-us-east-2\",\n          \"fips-us-west-1\",\n          \"fips-us-west-2\",\n          \"me-south-1\",\n          \"sa-east-1\",\n          \"us-east-1\",\n          \"us-east-2\",\n          \"us-west-1\",\n          \"us-west-2\",\n          \"cn-north-1\",\n          \"cn-northwest-1\",\n          \"us-gov-east-1\",\n          \"us-gov-west-1\",\n          \"us-iso-east-1\",\n          \"us-iso-west-1\",\n          \"us-isob-east-1\",\n        ],\n      },\n    },\n  },\n  \"google_pubsub_sink_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\n      \"gcp_project_id\",\n      \"gcp_destination_name\",\n      \"gcp_service_account_key\",\n    ],\n    properties: {\n      gcp_project_id: {\n        title: \"Project Id\",\n        description: \"The Google Cloud PubSub Project Id\",\n        type: \"string\",\n      },\n      gcp_destination_name: {\n        title: \"Destination Name\",\n        description:\n          \"The Destination Name. For the consumer this will be the subscription name, while for the producer this will be the topic name.\",\n        type: \"string\",\n      },\n      gcp_service_account_key: {\n        title: \"Service Account Key\",\n        description:\n          \"The Service account key that can be used as credentials for the PubSub publisher/subscriber in base64 encoding.\",\n        type: \"string\",\n        \"x-group\": \"credentials\",\n        format: \"base64\",\n      },\n    },\n  },\n  \"aws_s3_source_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\n      \"aws_bucket_name_or_arn\",\n      \"aws_region\",\n      \"aws_access_key\",\n      \"aws_secret_key\",\n    ],\n    properties: {\n      aws_bucket_name_or_arn: {\n        title: \"Bucket Name\",\n        description: \"The S3 Bucket name or ARN\",\n        type: \"string\",\n      },\n      aws_delete_after_read: {\n        title: \"Auto-delete Objects\",\n        description: \"Delete objects after consuming them\",\n        type: \"boolean\",\n        default: true,\n      },\n      aws_access_key: {\n        title: \"Access Key\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Access Key\",\n            description: \"The access key obtained from AWS\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the aws_access_key\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      aws_secret_key: {\n        title: \"Secret Key\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Secret Key\",\n            description: \"The secret key obtained from AWS\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the aws_secret_key\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      aws_region: {\n        title: \"AWS Region\",\n        description: \"The AWS region to connect to\",\n        type: \"string\",\n        example: \"eu-west-1\",\n        enum: [\n          \"af-south-1\",\n          \"ap-east-1\",\n          \"ap-northeast-1\",\n          \"ap-northeast-2\",\n          \"ap-northeast-3\",\n          \"ap-south-1\",\n          \"ap-southeast-1\",\n          \"ap-southeast-2\",\n          \"ap-southeast-3\",\n          \"ca-central-1\",\n          \"eu-central-1\",\n          \"eu-north-1\",\n          \"eu-south-1\",\n          \"eu-west-1\",\n          \"eu-west-2\",\n          \"eu-west-3\",\n          \"fips-us-east-1\",\n          \"fips-us-east-2\",\n          \"fips-us-west-1\",\n          \"fips-us-west-2\",\n          \"me-south-1\",\n          \"sa-east-1\",\n          \"us-east-1\",\n          \"us-east-2\",\n          \"us-west-1\",\n          \"us-west-2\",\n          \"cn-north-1\",\n          \"cn-northwest-1\",\n          \"us-gov-east-1\",\n          \"us-gov-west-1\",\n          \"us-iso-east-1\",\n          \"us-iso-west-1\",\n          \"us-isob-east-1\",\n        ],\n      },\n      aws_auto_create_bucket: {\n        title: \"Autocreate Bucket\",\n        description: \"Setting the autocreation of the S3 bucket bucketName.\",\n        type: \"boolean\",\n        default: false,\n      },\n      aws_include_body: {\n        title: \"Include Body\",\n        description:\n          \"If it is true, the exchange will be consumed and put into the body and closed. If false the S3Object stream will be put raw into the body and the headers will be set with the S3 object metadata.\",\n        type: \"boolean\",\n        default: true,\n      },\n      aws_prefix: {\n        title: \"Prefix\",\n        description: \"The AWS S3 bucket prefix to consider while searching\",\n        type: \"string\",\n        example: \"folder/\",\n      },\n      aws_ignore_body: {\n        title: \"Ignore Body\",\n        description:\n          \"If it is true, the S3 Object Body will be ignored completely, if it is set to false the S3 Object will be put in the body. Setting this to true, will override any behavior defined by includeBody option.\",\n        type: \"boolean\",\n        default: false,\n      },\n      aws_uri_endpoint_override: {\n        title: \"Overwrite Endpoint URI\",\n        description:\n          \"Set the overriding endpoint URI. This option needs to be used in combination with overrideEndpoint option.\",\n        type: \"string\",\n      },\n      aws_override_endpoint: {\n        title: \"Endpoint Overwrite\",\n        description:\n          \"Set the need for overiding the endpoint URI. This option needs to be used in combination with uriEndpointOverride setting.\",\n        type: \"boolean\",\n        default: false,\n      },\n      aws_delay: {\n        title: \"Delay\",\n        description: \"Milliseconds before the next poll of the selected bucket\",\n        type: \"integer\",\n        default: 500,\n      },\n    },\n  },\n  \"aws_sqs_source_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\n      \"aws_queue_name_or_arn\",\n      \"aws_region\",\n      \"aws_access_key\",\n      \"aws_secret_key\",\n    ],\n    properties: {\n      aws_queue_name_or_arn: {\n        title: \"Queue Name\",\n        description: \"The SQS Queue Name or ARN\",\n        type: \"string\",\n        pattern:\n          \"^https://sqs\\\\.([a-z]+-[a-z]+-[0-9])\\\\.amazonaws\\\\.com/[0-9]{12}/([^/]+)$\",\n      },\n      aws_delete_after_read: {\n        title: \"Auto-delete Messages\",\n        description: \"Delete messages after consuming them\",\n        type: \"boolean\",\n        default: true,\n      },\n      aws_access_key: {\n        title: \"Access Key\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Access Key\",\n            description: \"The access key obtained from AWS\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the aws_access_key\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      aws_secret_key: {\n        title: \"Secret Key\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Secret Key\",\n            description: \"The secret key obtained from AWS\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the aws_secret_key\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      aws_region: {\n        title: \"AWS Region\",\n        description: \"The AWS region to connect to\",\n        type: \"string\",\n        example: \"eu-west-1\",\n        enum: [\n          \"af-south-1\",\n          \"ap-east-1\",\n          \"ap-northeast-1\",\n          \"ap-northeast-2\",\n          \"ap-northeast-3\",\n          \"ap-south-1\",\n          \"ap-southeast-1\",\n          \"ap-southeast-2\",\n          \"ap-southeast-3\",\n          \"ca-central-1\",\n          \"eu-central-1\",\n          \"eu-north-1\",\n          \"eu-south-1\",\n          \"eu-west-1\",\n          \"eu-west-2\",\n          \"eu-west-3\",\n          \"fips-us-east-1\",\n          \"fips-us-east-2\",\n          \"fips-us-west-1\",\n          \"fips-us-west-2\",\n          \"me-south-1\",\n          \"sa-east-1\",\n          \"us-east-1\",\n          \"us-east-2\",\n          \"us-west-1\",\n          \"us-west-2\",\n          \"cn-north-1\",\n          \"cn-northwest-1\",\n          \"us-gov-east-1\",\n          \"us-gov-west-1\",\n          \"us-iso-east-1\",\n          \"us-iso-west-1\",\n          \"us-isob-east-1\",\n        ],\n      },\n      aws_auto_create_queue: {\n        title: \"Autocreate Queue\",\n        description: \"Setting the autocreation of the SQS queue.\",\n        type: \"boolean\",\n        default: false,\n      },\n      aws_amazon_a_w_s_host: {\n        title: \"AWS Host\",\n        description: \"The hostname of the Amazon AWS cloud.\",\n        type: \"string\",\n        default: \"amazonaws.com\",\n      },\n      aws_protocol: {\n        title: \"Protocol\",\n        description: \"The underlying protocol used to communicate with SQS\",\n        type: \"string\",\n        enum: [\"http\", \"https\"],\n        default: \"https\",\n      },\n      aws_queue_u_r_l: {\n        title: \"Queue URL\",\n        description: \"The full SQS Queue URL (required if using KEDA)\",\n        type: \"string\",\n      },\n      aws_uri_endpoint_override: {\n        title: \"Overwrite Endpoint URI\",\n        description:\n          \"Set the overriding endpoint URI. This option needs to be used in combination with overrideEndpoint option.\",\n        type: \"string\",\n      },\n      aws_override_endpoint: {\n        title: \"Endpoint Overwrite\",\n        description:\n          \"Set the need for overiding the endpoint URI. This option needs to be used in combination with uriEndpointOverride setting.\",\n        type: \"boolean\",\n        default: false,\n      },\n      aws_delay: {\n        title: \"Delay\",\n        description: \"Milliseconds before the next poll of the selected stream\",\n        type: \"integer\",\n        default: 500,\n      },\n    },\n  },\n  \"slack_source_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\"slack_channel\", \"slack_token\"],\n    properties: {\n      slack_channel: {\n        title: \"Channel\",\n        description: \"The Slack channel to receive messages from\",\n        type: \"string\",\n        example: \"#myroom\",\n      },\n      slack_token: {\n        title: \"Token\",\n        \"x-group\": \"credentials\",\n        oneOf: [\n          {\n            title: \"Token\",\n            description:\n              \"The token to access Slack. A Slack app is needed. This app needs to have channels:history and channels:read permissions. The Bot User OAuth Access Token is the kind of token needed.\",\n            type: \"string\",\n            format: \"password\",\n          },\n          {\n            description: \"An opaque reference to the slack_token\",\n            type: \"object\",\n            properties: {},\n          },\n        ],\n      },\n      slack_delay: {\n        title: \"Delay\",\n        description: \"The delay between polls\",\n        type: \"string\",\n        example: \"1s\",\n      },\n      kafka_topic: {\n        title: \"Topic Names\",\n        description: \"Comma separated list of Kafka topic names\",\n        type: \"string\",\n      },\n    },\n  },\n  \"google_pubsub_source_0.1\": {\n    type: \"object\",\n    additionalProperties: false,\n    required: [\n      \"gcp_project_id\",\n      \"gcp_subscription_name\",\n      \"gcp_service_account_key\",\n    ],\n    properties: {\n      gcp_project_id: {\n        title: \"Project Id\",\n        description: \"The Google Cloud PubSub Project Id\",\n        type: \"string\",\n      },\n      gcp_subscription_name: {\n        title: \"Subscription Name\",\n        description: \"The Subscription Name\",\n        type: \"string\",\n      },\n      gcp_service_account_key: {\n        title: \"Service Account Key\",\n        description:\n          \"The Service account key that can be used as credentials for the PubSub publisher/subscriber\",\n        type: \"string\",\n        \"x-group\": \"credentials\",\n        format: \"base64\",\n      },\n      gcp_synchronous_pull: {\n        title: \"Synchronous Pull\",\n        description:\n          \"If Synchronously pull batches of messages is enabled or not\",\n        type: \"boolean\",\n        default: false,\n      },\n      gcp_max_messages_per_poll: {\n        title: \"Max Messages Per Poll\",\n        description:\n          \"The max number of messages to receive from the server in a single API call\",\n        type: \"integer\",\n        default: 1,\n      },\n      gcp_concurrent_consumers: {\n        title: \"Concurrent Consumers\",\n        description:\n          \"The number of parallel streams consuming from the subscription\",\n        type: \"integer\",\n        default: 1,\n      },\n    },\n  },\n};\n","export const cloudProvidersData = [\n  {\n    kind: \"CloudProvider\",\n    id: \"aws\",\n    name: \"aws\",\n    href: \"/api/v1/cloud_providers/aws\",\n    display_name: \"Amazon Web Services\",\n    enabled: true,\n  },\n];\n\nexport const cloudRegions: {\n  [key: string]: {\n    kind: string;\n    name: string;\n    display_name: string;\n    enabled: boolean;\n  }[];\n} = {\n  aws: [\n    {\n      kind: \"CloudRegion\",\n      name: \"us-east-1\",\n      display_name: \"US East, N. Virginia\",\n      enabled: true,\n    },\n  ],\n};\n","/* tslint:disable @typescript-eslint/no-unsafe-call */\n\nimport { rest } from \"msw\";\nimport { factory, oneOf, primaryKey } from \"@mswjs/data\";\nimport {\n  BridgeRequest,\n  ProcessorRequest,\n  ProcessorResponse,\n  ProcessorType,\n} from \"@openapi/generated\";\nimport { v4 as uuid } from \"uuid\";\nimport { instancesData, processorData } from \"./data\";\nimport { schemaCatalogData, schemasData } from \"./schemasData\";\nimport omit from \"lodash.omit\";\nimport cloneDeep from \"lodash.clonedeep\";\nimport { EventFilter, ProcessorSchemaType } from \"../src/types/Processor\";\nimport { cloudProvidersData, cloudRegions } from \"./cloudProvidersData\";\n\n// api url\nconst apiUrl = `${process.env.BASE_URL ?? \"\"}${\n  process.env.BASE_PATH ?? \"/api/smartevents_mgmt/v1\"\n}`;\n\n// api response delay in ms\nexport const apiDelay = 1000;\nexport const shortApiDelay = 200;\n\n// set up the model\nconst db = factory({\n  bridge: {\n    id: primaryKey(String),\n    name: String,\n    kind: String,\n    href: String,\n    owner: String,\n    submitted_at: String,\n    published_at: String,\n    status: String,\n    endpoint: String,\n  },\n  processor: {\n    id: primaryKey(String),\n    bridge: oneOf(\"bridge\"),\n    type: String,\n    kind: String,\n    name: String,\n    href: String,\n    submitted_at: String,\n    published_at: String,\n    status: String,\n    filters: Array,\n    transformationTemplate: String,\n    action: {\n      type: String,\n      parameters: String,\n    },\n    source: {\n      type: String,\n      parameters: String,\n    },\n  },\n  cloudProvider: {\n    kind: String,\n    id: primaryKey(String),\n    name: String,\n    href: String,\n    display_name: String,\n    enabled: Boolean,\n  },\n  cloudRegion: {\n    cloudProvider: oneOf(\"cloudProvider\"),\n    kind: String,\n    name: primaryKey(String),\n    display_name: String,\n    enabled: Boolean,\n  },\n});\n\n// load demo data\ninstancesData.map((instance, index) => {\n  const bridge = db.bridge.create(instance);\n  // adding processors to first bridge\n  if (index === 0) {\n    processorData.map((processorItem) => {\n      db.processor.create({\n        ...processorItem,\n        bridge: bridge,\n      });\n    });\n  }\n});\ncloudProvidersData.map((provider) => {\n  const cloudProvider = db.cloudProvider.create(provider);\n  // adding regions for each provider\n  const regions = cloudRegions[provider.name];\n  if (regions.length) {\n    regions.map((region) => {\n      db.cloudRegion.create({\n        ...region,\n        cloudProvider: cloudProvider,\n      });\n    });\n  }\n});\n\nexport const handlers = [\n  // bridges\n  // get all bridges\n  rest.get(`${apiUrl}/bridges`, (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get(\"page\") ?? \"0\");\n    const size = parseInt(req.url.searchParams.get(\"size\") ?? \"10\");\n\n    const items = db.bridge.findMany({\n      take: size,\n      skip: page * size,\n      orderBy: {\n        submitted_at: \"desc\",\n      },\n    });\n\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json({\n        kind: \"BridgeList\",\n        items,\n        page,\n        size: items.length,\n        total: db.bridge.count(),\n      })\n    );\n  }),\n  // get a single bridge\n  rest.get(`${apiUrl}/bridges/:bridgeId`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n\n    const bridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (bridge) {\n      return res(ctx.status(200), ctx.delay(apiDelay), ctx.json(bridge));\n    }\n    return res(\n      ctx.status(404),\n      ctx.delay(apiDelay),\n      ctx.json({\n        kind: \"ErrorsResponse\",\n        items: [\n          {\n            ...error_not_found,\n            reason: `Bridge with id '${\n              bridgeId as string\n            }' for customer 'XXXXXXXX' does not exist`,\n          },\n        ],\n      })\n    );\n  }),\n  // create a bridge\n  rest.post(`${apiUrl}/bridges`, (req, res, ctx) => {\n    const { name } = req.body as BridgeRequest;\n\n    const existingBridge = db.bridge.findFirst({\n      where: {\n        name: {\n          equals: name,\n        },\n      },\n    });\n\n    if (existingBridge) {\n      return res(\n        ctx.status(400),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_duplicated_resource,\n              reason: `Bridge with name '${name}' already exists for customer with id 'XXXXXXXX'`,\n            },\n          ],\n        })\n      );\n    }\n\n    if (name == \"error-test\") {\n      return res(\n        ctx.status(500),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_external_component,\n              reason: `Creation was no successful probably due to external component fail'`,\n            },\n          ],\n        })\n      );\n    }\n\n    const id = uuid();\n    const bridge = {\n      kind: \"Bridge\",\n      id,\n      name,\n      href: `/api/smartevents_mgmt/v1/bridges/${id}`,\n      submitted_at: new Date().toISOString(),\n      status: \"accepted\",\n    };\n\n    const newBridge = db.bridge.create(bridge);\n\n    // make the process slower if the instance name contains \"wait\" and make it fail\n    // if the name contains \"fail\"\n    resourceStatusFlow(\n      \"bridge\",\n      \"create\",\n      id,\n      name.includes(\"wait\"),\n      name.includes(\"fail-create\")\n    );\n\n    return res(ctx.status(200), ctx.delay(apiDelay), ctx.json(newBridge));\n  }),\n  // delete a bridge\n  rest.delete(`${apiUrl}/bridges/:bridgeId`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n\n    const existingBridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (existingBridge?.name == \"error-test\") {\n      return res(\n        ctx.status(500),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_external_component,\n              reason: `Deletion was no successful probably due to external component fail'`,\n            },\n          ],\n        })\n      );\n    }\n\n    if (!existingBridge) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_not_found,\n              reason: `Bridge with id '${\n                bridgeId as string\n              }' for customer 'XXXXXXXX' does not exist`,\n            },\n          ],\n        })\n      );\n    }\n\n    const processorsCount = db.processor.count({\n      where: {\n        bridge: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      },\n    });\n\n    if (processorsCount > 0) {\n      return res(\n        ctx.status(400),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [error_bridge_not_deletable],\n        })\n      );\n    }\n\n    db.bridge.update({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n      data: {\n        status: \"deprovision\",\n      },\n    });\n\n    resourceStatusFlow(\n      \"bridge\",\n      \"delete\",\n      bridgeId as string,\n      existingBridge.name.includes(\"wait\"),\n      existingBridge.name.includes(\"fail-delete\")\n    );\n\n    return res(ctx.status(202), ctx.delay(apiDelay), ctx.json({}));\n  }),\n\n  // processors\n  // get all processors of a bridge\n  rest.get(`${apiUrl}/bridges/:bridgeId/processors`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n\n    const page = parseInt(req.url.searchParams.get(\"page\") ?? \"0\");\n    const size = parseInt(req.url.searchParams.get(\"size\") ?? \"10\");\n\n    const bridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (!bridge) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_not_found,\n              reason: `Bridge with id '${\n                bridgeId as string\n              }' for customer 'XXXXXXXX' does not exist`,\n            },\n          ],\n        })\n      );\n    }\n\n    const query = {\n      where: {\n        bridge: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      },\n    };\n\n    const count = db.processor.count(query);\n\n    const items = db.processor\n      .findMany({\n        take: size,\n        skip: page * size,\n        orderBy: {\n          submitted_at: \"desc\",\n        },\n        ...query,\n      })\n      .map((item) =>\n        prepareProcessor(\n          item as unknown as Record<string | number | symbol, unknown>\n        )\n      );\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json({\n        kind: \"ProcessorList\",\n        items,\n        page,\n        size: items.length,\n        total: count,\n      })\n    );\n  }),\n  // get a single processor\n  rest.get(\n    `${apiUrl}/bridges/:bridgeId/processors/:processorId`,\n    (req, res, ctx) => {\n      const { bridgeId, processorId } = req.params;\n      const bridge = db.bridge.findFirst({\n        where: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      });\n\n      if (!bridge) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            kind: \"ErrorsResponse\",\n            items: [\n              {\n                ...error_not_found,\n                reason: `Bridge with id '${\n                  bridgeId as string\n                }' for customer 'XXXXXXXX' does not exist`,\n              },\n            ],\n          })\n        );\n      }\n\n      const processor = db.processor.findFirst({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n      });\n\n      if (processor) {\n        return res(\n          ctx.status(200),\n          ctx.delay(apiDelay),\n          ctx.json(\n            prepareProcessor(\n              processor as unknown as Record<string | number | symbol, unknown>,\n              true\n            )\n          )\n        );\n      }\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_not_found,\n              reason: `Processor with id '${\n                processorId as string\n              }' for customer 'XXXXXXXX' does not exist`,\n            },\n          ],\n        })\n      );\n    }\n  ),\n  // create a processor\n  rest.post(`${apiUrl}/bridges/:bridgeId/processors`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n    const { name, transformationTemplate, filters, action, source } =\n      req.body as MockProcessorRequest;\n\n    const bridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (!bridge) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_not_found,\n              reason: `Bridge with id '${\n                bridgeId as string\n              }' for customer 'XXXXXXXX' does not exist`,\n            },\n          ],\n        })\n      );\n    }\n\n    const existingProcessor = db.processor.findFirst({\n      where: {\n        name: {\n          equals: name,\n        },\n        bridge: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      },\n    });\n\n    if (existingProcessor) {\n      return res(\n        ctx.status(400),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_duplicated_resource,\n              reason: `Processor with name '${name}' already exists for bridge with id ${\n                bridgeId as string\n              } for customer with id 'XXXXXXXXXX'`,\n            },\n          ],\n        })\n      );\n    }\n\n    const id = uuid();\n    const processor = {\n      kind: \"Processor\",\n      id,\n      type: action ? \"sink\" : \"source\",\n      name,\n      href: `/api/smartevents_mgmt/v1/bridges/${\n        bridge?.id ?? \"\"\n      }/processors/${id}`,\n      submitted_at: new Date().toISOString(),\n      status: \"accepted\",\n      filters: filters,\n      transformationTemplate,\n      ...(action\n        ? {\n            action: convertParametersToString(action),\n          }\n        : {}),\n      ...(source\n        ? {\n            source: convertParametersToString(source),\n          }\n        : {}),\n      bridge,\n    };\n\n    const newProcessor = db.processor.create(processor);\n\n    // make the process slower if the resource name contains \"wait\" and make it fail\n    // if the name contains \"fail\"\n    resourceStatusFlow(\n      \"processor\",\n      \"create\",\n      id,\n      name.includes(\"wait\"),\n      name.includes(\"fail-create\")\n    );\n\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json(\n        prepareProcessor(\n          newProcessor as unknown as Record<string | number | symbol, unknown>,\n          true\n        )\n      )\n    );\n  }),\n  // update a processor\n  rest.put(\n    `${apiUrl}/bridges/:bridgeId/processors/:processorId`,\n    (req, res, ctx) => {\n      const { bridgeId, processorId } = req.params;\n      const { name, filters, transformationTemplate, source, action } =\n        req.body as ProcessorRequest;\n\n      const existingBridge = db.bridge.findFirst({\n        where: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      });\n\n      if (!existingBridge) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            kind: \"ErrorsResponse\",\n            items: [\n              {\n                ...error_not_found,\n                reason: `Bridge with id '${\n                  bridgeId as string\n                }' for customer 'XXXXXXXX' does not exist`,\n              },\n            ],\n          })\n        );\n      }\n\n      const processor = db.processor.findFirst({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n      });\n\n      if (!processor) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            kind: \"ErrorsResponse\",\n            items: [\n              {\n                ...error_not_found,\n                reason: `Processor with id '${\n                  processorId as string\n                }' for customer 'XXXXXXXX' does not exist`,\n              },\n            ],\n          })\n        );\n      }\n\n      const existingProcessors = db.processor.findMany({\n        where: {\n          name: {\n            equals: name,\n          },\n          bridge: {\n            id: {\n              equals: bridgeId as string,\n            },\n          },\n        },\n      });\n\n      const processorNameCollision =\n        existingProcessors.length === 1 &&\n        existingProcessors[0].id !== processorId;\n      if (processorNameCollision || existingProcessors.length > 1) {\n        return res(\n          ctx.status(400),\n          ctx.json({\n            kind: \"ErrorsResponse\",\n            items: [\n              {\n                ...error_duplicated_resource,\n                reason: `Processor with name '${name}' already exists for bridge with id ${\n                  bridgeId as string\n                } for customer with id 'XXXXXXXXXX'`,\n              },\n            ],\n          })\n        );\n      }\n\n      const updatedProcessor = db.processor.update({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n        data: {\n          name,\n          status: \"accepted\",\n          filters: filters as unknown as EventFilter[],\n          transformationTemplate,\n          ...(action ? { action: convertParametersToString(action) } : {}),\n          ...(source ? { source: convertParametersToString(source) } : {}),\n        },\n      });\n\n      // make the process slower if the resource name contains \"wait\" and make it fail\n      // if the name contains \"fail\"\n      resourceStatusFlow(\n        \"processor\",\n        \"create\",\n        processorId as string,\n        name.includes(\"wait\"),\n        name.includes(\"fail-create\")\n      );\n\n      return res(\n        ctx.status(200),\n        ctx.delay(apiDelay),\n        ctx.json(\n          prepareProcessor(\n            updatedProcessor as unknown as Record<\n              string | number | symbol,\n              unknown\n            >,\n            true\n          )\n        )\n      );\n    }\n  ),\n  // delete a processor\n  rest.delete(\n    `${apiUrl}/bridges/:bridgeId/processors/:processorId`,\n    (req, res, ctx) => {\n      const { bridgeId, processorId } = req.params;\n\n      const existingBridge = db.bridge.findFirst({\n        where: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      });\n\n      if (!existingBridge) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            kind: \"ErrorsResponse\",\n            items: [\n              {\n                ...error_not_found,\n                reason: `Bridge with id '${\n                  bridgeId as string\n                }' for customer 'XXXXXXXX' does not exist`,\n              },\n            ],\n          })\n        );\n      }\n\n      const existingProcessor = db.processor.findFirst({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n          bridge: {\n            id: {\n              equals: bridgeId as string,\n            },\n          },\n        },\n      });\n\n      if (!existingProcessor) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            kind: \"ErrorsResponse\",\n            items: [\n              {\n                ...error_not_found,\n                reason: `Processor with id '${\n                  bridgeId as string\n                }' for customer 'XXXXXXXX' does not exist`,\n              },\n            ],\n          })\n        );\n      }\n\n      db.processor.update({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n        data: {\n          status: \"deprovision\",\n        },\n      });\n\n      resourceStatusFlow(\n        \"processor\",\n        \"delete\",\n        processorId as string,\n        existingProcessor.name.includes(\"wait\"),\n        existingProcessor.name.includes(\"fail-delete\")\n      );\n\n      return res(ctx.status(202), ctx.delay(apiDelay), ctx.json({}));\n    }\n  ),\n  // get schema catalog\n  rest.get(`${apiUrl}/schemas`, (_req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json({\n        kind: \"SchemaCatalog\",\n        items: schemaCatalogData,\n      })\n    );\n  }),\n  // get single action schema\n  rest.get(`${apiUrl}/schemas/actions/:schemaId`, (req, res, ctx) => {\n    const { schemaId } = req.params;\n\n    const requestedSchema = schemasData[schemaId as string];\n\n    if (!requestedSchema) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_not_found,\n              reason: `The processor json schema '${\n                schemaId as string\n              }' is not in the catalog.`,\n            },\n          ],\n        })\n      );\n    }\n\n    return res(ctx.status(200), ctx.delay(100), ctx.json(requestedSchema));\n  }),\n  // get single source schema\n  rest.get(`${apiUrl}/schemas/sources/:schemaId`, (req, res, ctx) => {\n    const { schemaId } = req.params;\n\n    const requestedSchema = schemasData[schemaId as string];\n\n    if (!requestedSchema) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          kind: \"ErrorsResponse\",\n          items: [\n            {\n              ...error_not_found,\n              reason: `The processor json schema '${\n                schemaId as string\n              }' is not in the catalog.`,\n            },\n          ],\n        })\n      );\n    }\n\n    return res(ctx.status(200), ctx.delay(100), ctx.json(requestedSchema));\n  }),\n  rest.get(`${apiUrl}/cloud_providers`, (_req, res, ctx) => {\n    const items = db.cloudProvider.getAll();\n\n    return res(\n      ctx.status(200),\n      ctx.delay(shortApiDelay),\n      ctx.json({\n        kind: \"CloudProviderList\",\n        items,\n        page: 0,\n        size: items.length,\n        total: items.length,\n      })\n    );\n  }),\n  rest.get(`${apiUrl}/cloud_providers/:providerId/regions`, (req, res, ctx) => {\n    const { providerId } = req.params;\n\n    const query = {\n      where: {\n        cloudProvider: {\n          id: {\n            equals: providerId as string,\n          },\n        },\n      },\n    };\n\n    const items = db.cloudRegion\n      .findMany(query)\n      .map((item) => omit(item, [\"cloudProvider\"]));\n\n    return res(\n      ctx.status(200),\n      ctx.delay(shortApiDelay),\n      ctx.json({\n        kind: \"CloudRegionList\",\n        items,\n        page: 0,\n        size: items.length,\n        total: items.length,\n      })\n    );\n  }),\n];\n\n/**\n * Resource status flow\n *\n * @param type Resource type: \"bridge\" or \"processor\"\n * @param mode Flow mode: \"create\" or \"delete\"\n * @param id Resource id\n * @param wait Make the creation process slower (~1,3m)\n * @param fail Make the creation process fail\n */\nconst resourceStatusFlow = (\n  type: \"processor\" | \"bridge\",\n  mode: \"create\" | \"delete\",\n  id: string,\n  wait: boolean,\n  fail: boolean\n): void => {\n  const waitTime = wait ? 45000 : 8000;\n\n  const updateProcessor = (id: string, status: string): void => {\n    db.processor.update({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n      data: {\n        status() {\n          return status;\n        },\n        published_at(published_at) {\n          return status === \"ready\" ? new Date().toISOString() : published_at;\n        },\n      },\n    });\n  };\n\n  const updateBridge = (id: string, status: string): void => {\n    db.bridge.update({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n      data: {\n        status() {\n          return status;\n        },\n        endpoint(endpoint) {\n          return status === \"ready\"\n            ? `https://ob-${id}.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events`\n            : endpoint;\n        },\n        published_at(published_at) {\n          return status === \"ready\" ? new Date().toISOString() : published_at;\n        },\n      },\n    });\n  };\n\n  const deleteBridge = (id: string): void => {\n    db.bridge.delete({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n    });\n  };\n\n  const deleteProcessor = (id: string): void => {\n    db.processor.delete({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n    });\n  };\n\n  const updateResource = type === \"processor\" ? updateProcessor : updateBridge;\n\n  const stepOne = mode === \"create\" ? \"provisioning\" : \"deleting\";\n  const stepTwo = mode === \"create\" ? \"ready\" : \"deleted\";\n\n  setTimeout(() => {\n    updateResource(id, stepOne);\n  }, waitTime);\n\n  setTimeout(() => {\n    updateResource(id, fail ? \"failed\" : stepTwo);\n  }, waitTime * 2);\n\n  if (mode === \"delete\" && !fail) {\n    setTimeout(() => {\n      if (type === \"processor\") {\n        deleteProcessor(id);\n      } else {\n        deleteBridge(id);\n      }\n    }, waitTime * 2.2);\n  }\n};\n\n/**\n * Prepare processor data to be returned by APIs\n *\n * @param data Processor to clean from unwanted properties before response\n * @param parseConfigParameters Flag indicating if action/source parameters should be parsed\n */\nconst prepareProcessor = (\n  data: Record<string, unknown>,\n  parseConfigParameters = false\n): ProcessorResponse => {\n  // removing properties not needed for the response\n  const omitProperties = [\"bridge\"];\n  const processor = cloneDeep(data);\n\n  if (!(processor.filters as Array<Record<string, unknown>>)?.length) {\n    omitProperties.push(\"filters\");\n  }\n  if (processor.transformationTemplate === \"\") {\n    omitProperties.push(\"transformationTemplate\");\n  }\n\n  if (processor.type === \"source\") {\n    omitProperties.push(\"action\");\n  } else {\n    omitProperties.push(\"source\");\n  }\n\n  if (parseConfigParameters) {\n    const configSection =\n      processor.type === ProcessorType.Source\n        ? ProcessorSchemaType.SOURCE\n        : ProcessorSchemaType.ACTION;\n    const parsedParameters = JSON.parse(\n      (\n        processor[configSection] as {\n          type: string;\n          parameters: string;\n        }\n      ).parameters\n    ) as { [key: string]: unknown };\n    if (processor.type === ProcessorType.Source) {\n      (processor.source as typeof parsedParameters).parameters =\n        parsedParameters;\n    } else {\n      (processor.action as typeof parsedParameters).parameters =\n        parsedParameters;\n    }\n  }\n\n  return omit(processor, omitProperties) as ProcessorResponse;\n};\n\n/**\n * Convert actions/sources parameters to string because that's how they are stored\n * in our fake db\n *\n * @param data Processor action or source to convert\n * @returns Processor action or source with parameters property containing stringified parameters.\n */\nconst convertParametersToString = (\n  data: MockProcessorRequest[\"action\"] | MockProcessorRequest[\"source\"]\n): { type: string; parameters: string } => {\n  return {\n    type: data?.type ?? \"\",\n    parameters: JSON.stringify(data?.parameters),\n  };\n};\n\nconst error_not_found = {\n  kind: \"Error\",\n  id: \"4\",\n  href: \"/api/smartevents_mgmt/v1/errors/4\",\n  code: \"OPENBRIDGE-4\",\n};\n\nconst error_duplicated_resource = {\n  kind: \"Error\",\n  id: \"1\",\n  href: \"/api/smartevents_mgmt/v1/errors/1\",\n  code: \"OPENBRIDGE-1\",\n};\n\nconst error_external_component = {\n  kind: \"Error\",\n  id: \"1\",\n  href: \"/api/smartevents_mgmt/v1/errors/5\",\n  code: \"OPENBRIDGE-5\",\n};\n\nconst error_bridge_not_deletable = {\n  kind: \"Error\",\n  id: \"2\",\n  href: \"/api/smartevents_mgmt/v1/errors/2\",\n  code: \"OPENBRIDGE-2\",\n  reason:\n    \"It is not possible to delete a Bridge instance with active Processors.\",\n};\n\ninterface MockProcessorRequest extends Omit<ProcessorRequest, \"filters\"> {\n  filters: unknown[];\n}\n","import { setupWorker } from \"msw\";\nimport { handlers } from \"./handlers\";\n\n// configuring service worker with its handlers\nexport const worker = setupWorker(...handlers);\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The API exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ProcessorType = {\n    Source: 'source',\n    Sink: 'sink',\n    ErrorHandler: 'error_handler'\n} as const;\n\nexport type ProcessorType = typeof ProcessorType[keyof typeof ProcessorType];\n\n\n\n","export default __webpack_public_path__ + \"f940137c.svg\";","/* eslint-disable @typescript-eslint/await-thenable */\nimport Keycloak from \"keycloak-js\";\n\nexport let keycloak: Keycloak.KeycloakInstance | undefined;\n\n/* Token min validity in seconds\n * Passed to updateToken(). When the token is going to expire before\n * the minimum validity, the token is refreshed.\n */\nconst TOKEN_MIN_VALIDITY_SECONDS = 50;\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const setKeycloakInstance = async (): Promise<void> => {\n  if (!keycloak) await init();\n};\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (): Promise<void> => {\n  try {\n    keycloak = Keycloak({\n      realm: \"redhat-external\",\n      url: \"https://sso.redhat.com/auth/\",\n      clientId: \"cloud-services\",\n    });\n    if (keycloak) {\n      await keycloak.init({\n        onLoad: \"login-required\",\n        promiseType: \"native\",\n      });\n    }\n  } catch (e) {\n    keycloak = undefined;\n    console.warn(\n      \"Auth: Unable to initialize keycloak. Client side will not be configured to use authentication\",\n      e\n    );\n  }\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getKeyCloakToken = async (): Promise<string> => {\n  await keycloak?.updateToken(TOKEN_MIN_VALIDITY_SECONDS);\n  if (keycloak?.token) return keycloak.token;\n  console.error(\"No keycloak token available\");\n  return \"foo\";\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getParsedKeyCloakToken =\n  async (): Promise<Keycloak.KeycloakTokenParsed> => {\n    await keycloak?.updateToken(TOKEN_MIN_VALIDITY_SECONDS);\n    if (keycloak?.tokenParsed) return keycloak.tokenParsed;\n    console.error(\"No keycloak token available\");\n    return {} as Keycloak.KeycloakTokenParsed;\n  };\n\nexport const getUsername = (): Promise<string> => {\n  return getParsedKeyCloakToken().then(\n    (token: unknown) =>\n      (\n        token as {\n          [index: string]: string;\n        }\n      )[\"username\"] ?? \"\"\n  );\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n */\nexport const logout = async (): Promise<void> => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n};\n","import React, { FunctionComponent, ReactNode, useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\n\nimport {\n  Button,\n  Nav,\n  NavItem,\n  NavList,\n  Page,\n  PageHeader,\n  PageHeaderTools,\n  PageHeaderToolsGroup,\n  PageSidebar,\n} from \"@patternfly/react-core\";\n\nimport logo from \"./Patternfly-Logo.svg\";\nimport { logout } from \"../../../Keycloak\";\n\ninterface AppLayoutProps {\n  children: ReactNode;\n  mobileView?: boolean;\n}\n\nexport const AppLayout: FunctionComponent<AppLayoutProps> = ({ children }) => {\n  const [isNavOpen, setIsNavOpen] = useState(true);\n  const [isMobileView, setIsMobileView] = useState(true);\n  const [isNavOpenMobile, setIsNavOpenMobile] = useState(false);\n\n  const onNavToggleMobile = (): void => {\n    setIsNavOpenMobile(!isNavOpenMobile);\n  };\n  const onNavToggle = (): void => {\n    setIsNavOpen(!isNavOpen);\n  };\n  const onPageResize = (props: {\n    mobileView: boolean;\n    windowSize: number;\n  }): void => {\n    setIsMobileView(props.mobileView);\n  };\n\n  const HeaderTools = (\n    <PageHeaderTools>\n      <PageHeaderToolsGroup>\n        <Button variant=\"tertiary\" onClick={(): void => void logout()}>\n          Logout\n        </Button>\n      </PageHeaderToolsGroup>\n    </PageHeaderTools>\n  );\n\n  const Header = (\n    <PageHeader\n      logo={<LogoImg />}\n      showNavToggle\n      isNavOpen={isNavOpen}\n      headerTools={HeaderTools}\n      onNavToggle={isMobileView ? onNavToggleMobile : onNavToggle}\n      aria-label={\"global_navigation\"}\n    />\n  );\n\n  const Navigation = (\n    <Nav\n      id=\"nav-primary-simple\"\n      role=\"navigation\"\n      theme=\"dark\"\n      aria-label={\"global\"}\n    >\n      <NavList id=\"nav-list-simple\">\n        <NavItem id={\"connectors\"} ouiaId=\"smart-events\">\n          <NavLink to={\"/\"} activeClassName=\"pf-m-current\">\n            SmartEvents\n          </NavLink>\n        </NavItem>\n      </NavList>\n    </Nav>\n  );\n  const Sidebar = (\n    <PageSidebar\n      theme=\"dark\"\n      nav={Navigation}\n      isNavOpen={isMobileView ? isNavOpenMobile : isNavOpen}\n    />\n  );\n  return (\n    <Page\n      mainContainerId=\"primary-app-container\"\n      role=\"main\"\n      header={Header}\n      sidebar={Sidebar}\n      onPageResize={onPageResize}\n    >\n      {children}\n    </Page>\n  );\n};\n\nfunction LogoImg(): JSX.Element {\n  const history = useHistory();\n  function handleClick(): void {\n    history.push(\"/\");\n  }\n  return (\n    <img src={logo as string} onClick={handleClick} alt=\"PatternFly Logo\" />\n  );\n}\n","import React, { Suspense, useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"@patternfly/patternfly/patternfly.css\";\nimport \"@patternfly/patternfly/utilities/Accessibility/accessibility.css\";\nimport \"@patternfly/patternfly/utilities/Sizing/sizing.css\";\nimport \"@patternfly/patternfly/utilities/Spacing/spacing.css\";\nimport \"@patternfly/patternfly/utilities/Display/display.css\";\nimport { AppLayout } from \"@app/components/AppLayout/AppLayout\";\nimport Routes from \"@app/Routes/Routes\";\nimport {\n  AppServicesLoading,\n  I18nProvider,\n} from \"@rhoas/app-services-ui-components\";\nimport { getKeyCloakToken, getUsername, setKeycloakInstance } from \"./Keycloak\";\nimport { SmartEventsContextProvider } from \"@contexts/SmartEventsContext\";\n\nconst App = (): JSX.Element => {\n  const [initialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    const init = async (): Promise<void> => {\n      await setKeycloakInstance();\n      setInitialized(true);\n    };\n    void init();\n  }, []);\n\n  const apiBaseUrl = process.env.BASE_URL as string;\n\n  return (\n    <I18nProvider\n      lng=\"en\"\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          openbridgeTempDictionary: () =>\n            import(\"../locales/en/openbridge.json\"),\n        },\n      }}\n      debug={true}\n    >\n      <Suspense fallback={<AppServicesLoading />}>\n        <BrowserRouter basename={\"/\"}>\n          {initialized && (\n            <SmartEventsContextProvider\n              apiBaseUrl={apiBaseUrl}\n              getToken={getKeyCloakToken}\n              getUsername={getUsername}\n            >\n              <AppLayout>\n                <Routes />\n              </AppLayout>\n            </SmartEventsContextProvider>\n          )}\n        </BrowserRouter>\n      </Suspense>\n    </I18nProvider>\n  );\n};\n\nexport default App;\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"@patternfly/patternfly/patternfly.css\";\nimport \"@patternfly/patternfly/utilities/Accessibility/accessibility.css\";\nimport \"@patternfly/patternfly/utilities/Sizing/sizing.css\";\nimport \"@patternfly/patternfly/utilities/Spacing/spacing.css\";\nimport \"@patternfly/patternfly/utilities/Display/display.css\";\nimport { AppLayout } from \"@app/components/AppLayout/AppLayout\";\nimport Routes from \"@app/Routes/Routes\";\nimport {\n  AppServicesLoading,\n  I18nProvider,\n} from \"@rhoas/app-services-ui-components\";\nimport { SmartEventsContextProvider } from \"@contexts/SmartEventsContext\";\nimport { SetupWorkerApi } from \"msw/lib/types/setupWorker/glossary\";\n\n// App using mocked apis trough msw\n\nconst AppMocked = (): JSX.Element => {\n  // starting mock service worker\n  // eslint-disable-next-line @typescript-eslint/no-var-requires,jest/no-mocks-import\n  const { worker } = require(\"./../mocked-api/browser\") as {\n    worker: SetupWorkerApi;\n  };\n  void worker.start();\n\n  const apiBaseUrl = process.env.BASE_URL as string;\n  // setting up dummy auth functions\n  const getToken = (): Promise<string> => Promise.resolve(\"dummy\");\n  const getUsername = (): Promise<string> => Promise.resolve(\"username\");\n\n  return (\n    <SmartEventsContextProvider\n      getToken={getToken}\n      getUsername={getUsername}\n      apiBaseUrl={apiBaseUrl}\n    >\n      <I18nProvider\n        lng=\"en\"\n        resources={{\n          en: {\n            common: () =>\n              import(\n                \"@rhoas/app-services-ui-components/locales/en/common.json\"\n              ),\n            openbridgeTempDictionary: () =>\n              import(\"../locales/en/openbridge.json\"),\n          },\n        }}\n        debug={true}\n      >\n        <Suspense fallback={<AppServicesLoading />}>\n          <BrowserRouter basename={\"/\"}>\n            <AppLayout>\n              <Routes />\n            </AppLayout>\n          </BrowserRouter>\n        </Suspense>\n      </I18nProvider>\n    </SmartEventsContextProvider>\n  );\n};\n\nexport default AppMocked;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport AppMocked from \"./AppMocked\";\n\n// rendering the app with mocked APIs or the regular one based on env MOCKED_API\nif (process.env.MOCKED_API) {\n  ReactDOM.render(<AppMocked />, document.getElementById(\"root\"));\n} else {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n"],"names":["processorData","kind","id","name","type","href","submitted_at","published_at","transformationTemplate","status","action","parameters","JSON","stringify","slack_channel","slack_webhook_url","slack_username","filters","key","value","source","slack_token","schemaCatalogData","description","schemasData","additionalProperties","properties","endpoint","title","pattern","example","job_template_id","basic_auth_username","basic_auth_password","ssl_verification_disabled","default","required","optional","dependentRequired","topic","kafka_broker_url","kafka_client_id","kafka_client_secret","bridgeId","oneOf","format","$comment","slack_icon_emoji","slack_icon_url","aws_function","aws_access_key","aws_secret_key","aws_region","enum","gcp_project_id","gcp_destination_name","gcp_service_account_key","aws_bucket_name_or_arn","aws_delete_after_read","aws_auto_create_bucket","aws_include_body","aws_prefix","aws_ignore_body","aws_uri_endpoint_override","aws_override_endpoint","aws_delay","aws_queue_name_or_arn","aws_auto_create_queue","aws_amazon_a_w_s_host","aws_protocol","aws_queue_u_r_l","slack_delay","kafka_topic","gcp_subscription_name","gcp_synchronous_pull","gcp_max_messages_per_poll","gcp_concurrent_consumers","cloudRegions","aws","display_name","enabled","apiUrl","apiDelay","db","factory","bridge","primaryKey","String","owner","processor","Array","cloudProvider","Boolean","cloudRegion","map","instance","index","create","processorItem","provider","regions","length","region","handlers","r","req","res","ctx","page","parseInt","url","searchParams","get","size","items","findMany","take","skip","orderBy","delay","json","total","count","params","findFirst","where","equals","error_not_found","reason","body","error_duplicated_resource","error_external_component","Date","toISOString","newBridge","resourceStatusFlow","includes","existingBridge","error_bridge_not_deletable","update","data","query","item","prepareProcessor","processorId","convertParametersToString","newProcessor","existingProcessors","updatedProcessor","existingProcessor","_req","schemaId","requestedSchema","getAll","providerId","mode","wait","fail","waitTime","updateResource","stepOne","stepTwo","setTimeout","delete","deleteProcessor","deleteBridge","parseConfigParameters","omitProperties","push","configSection","Processor","parsedParameters","parse","code","worker","setupWorker","ProcessorType","Source","Sink","ErrorHandler","keycloak","setKeycloakInstance","init","realm","clientId","onLoad","promiseType","e","undefined","console","warn","getKeyCloakToken","updateToken","token","error","getUsername","tokenParsed","then","AppLayout","children","isNavOpen","setIsNavOpen","useState","isMobileView","setIsMobileView","isNavOpenMobile","setIsNavOpenMobile","HeaderTools","PageHeaderTools","PageHeaderToolsGroup","Button","variant","onClick","logout","Header","PageHeader","logo","LogoImg","showNavToggle","headerTools","onNavToggle","Navigation","Nav","role","theme","NavList","NavItem","ouiaId","NavLink","to","activeClassName","Sidebar","PageSidebar","nav","Page","mainContainerId","header","sidebar","onPageResize","props","mobileView","history","useHistory","src","alt","initialized","setInitialized","useEffect","I18nProvider","lng","resources","en","common","openbridgeTempDictionary","debug","Suspense","fallback","AppServicesLoading","BrowserRouter","basename","SmartEventsContext","apiBaseUrl","getToken","Routes","start","Promise","resolve","MOCKED_API","document","getElementById"],"sourceRoot":""}