{"version":3,"file":"8287.b01b7edb.js","mappings":"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","sources":["webpack://smartevents-ui/./node_modules/ajv-errors/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ajv_1 = require(\"ajv\");\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nconst code_1 = require(\"ajv/dist/compile/codegen/code\");\nconst validate_1 = require(\"ajv/dist/compile/validate\");\nconst errors_1 = require(\"ajv/dist/compile/errors\");\nconst names_1 = require(\"ajv/dist/compile/names\");\nconst keyword = \"errorMessage\";\nconst used = new ajv_1.Name(\"emUsed\");\nconst KEYWORD_PROPERTY_PARAMS = {\n    required: \"missingProperty\",\n    dependencies: \"property\",\n    dependentRequired: \"property\",\n};\nconst INTERPOLATION = /\\$\\{[^}]+\\}/;\nconst INTERPOLATION_REPLACE = /\\$\\{([^}]+)\\}/g;\nconst EMPTY_STR = /^\"\"\\s*\\+\\s*|\\s*\\+\\s*\"\"$/g;\nfunction errorMessage(options) {\n    return {\n        keyword,\n        schemaType: [\"string\", \"object\"],\n        post: true,\n        code(cxt) {\n            const { gen, data, schema, schemaValue, it } = cxt;\n            if (it.createErrors === false)\n                return;\n            const sch = schema;\n            const instancePath = codegen_1.strConcat(names_1.default.instancePath, it.errorPath);\n            gen.if(ajv_1._ `${names_1.default.errors} > 0`, () => {\n                if (typeof sch == \"object\") {\n                    const [kwdPropErrors, kwdErrors] = keywordErrorsConfig(sch);\n                    if (kwdErrors)\n                        processKeywordErrors(kwdErrors);\n                    if (kwdPropErrors)\n                        processKeywordPropErrors(kwdPropErrors);\n                    processChildErrors(childErrorsConfig(sch));\n                }\n                const schMessage = typeof sch == \"string\" ? sch : sch._;\n                if (schMessage)\n                    processAllErrors(schMessage);\n                if (!options.keepErrors)\n                    removeUsedErrors();\n            });\n            function childErrorsConfig({ properties, items }) {\n                const errors = {};\n                if (properties) {\n                    errors.props = {};\n                    for (const p in properties)\n                        errors.props[p] = [];\n                }\n                if (items) {\n                    errors.items = {};\n                    for (let i = 0; i < items.length; i++)\n                        errors.items[i] = [];\n                }\n                return errors;\n            }\n            function keywordErrorsConfig(emSchema) {\n                let propErrors;\n                let errors;\n                for (const k in emSchema) {\n                    if (k === \"properties\" || k === \"items\")\n                        continue;\n                    const kwdSch = emSchema[k];\n                    if (typeof kwdSch == \"object\") {\n                        propErrors || (propErrors = {});\n                        const errMap = (propErrors[k] = {});\n                        for (const p in kwdSch)\n                            errMap[p] = [];\n                    }\n                    else {\n                        errors || (errors = {});\n                        errors[k] = [];\n                    }\n                }\n                return [propErrors, errors];\n            }\n            function processKeywordErrors(kwdErrors) {\n                const kwdErrs = gen.const(\"emErrors\", ajv_1.stringify(kwdErrors));\n                const templates = gen.const(\"templates\", getTemplatesCode(kwdErrors, schema));\n                gen.forOf(\"err\", names_1.default.vErrors, (err) => gen.if(matchKeywordError(err, kwdErrs), () => gen.code(ajv_1._ `${kwdErrs}[${err}.keyword].push(${err})`).assign(ajv_1._ `${err}.${used}`, true)));\n                const { singleError } = options;\n                if (singleError) {\n                    const message = gen.let(\"message\", ajv_1._ `\"\"`);\n                    const paramsErrors = gen.let(\"paramsErrors\", ajv_1._ `[]`);\n                    loopErrors((key) => {\n                        gen.if(message, () => gen.code(ajv_1._ `${message} += ${typeof singleError == \"string\" ? singleError : \";\"}`));\n                        gen.code(ajv_1._ `${message} += ${errMessage(key)}`);\n                        gen.assign(paramsErrors, ajv_1._ `${paramsErrors}.concat(${kwdErrs}[${key}])`);\n                    });\n                    errors_1.reportError(cxt, { message, params: ajv_1._ `{errors: ${paramsErrors}}` });\n                }\n                else {\n                    loopErrors((key) => errors_1.reportError(cxt, {\n                        message: errMessage(key),\n                        params: ajv_1._ `{errors: ${kwdErrs}[${key}]}`,\n                    }));\n                }\n                function loopErrors(body) {\n                    gen.forIn(\"key\", kwdErrs, (key) => gen.if(ajv_1._ `${kwdErrs}[${key}].length`, () => body(key)));\n                }\n                function errMessage(key) {\n                    return ajv_1._ `${key} in ${templates} ? ${templates}[${key}]() : ${schemaValue}[${key}]`;\n                }\n            }\n            function processKeywordPropErrors(kwdPropErrors) {\n                const kwdErrs = gen.const(\"emErrors\", ajv_1.stringify(kwdPropErrors));\n                const templatesCode = [];\n                for (const k in kwdPropErrors) {\n                    templatesCode.push([\n                        k,\n                        getTemplatesCode(kwdPropErrors[k], schema[k]),\n                    ]);\n                }\n                const templates = gen.const(\"templates\", gen.object(...templatesCode));\n                const kwdPropParams = gen.scopeValue(\"obj\", {\n                    ref: KEYWORD_PROPERTY_PARAMS,\n                    code: ajv_1.stringify(KEYWORD_PROPERTY_PARAMS),\n                });\n                const propParam = gen.let(\"emPropParams\");\n                const paramsErrors = gen.let(\"emParamsErrors\");\n                gen.forOf(\"err\", names_1.default.vErrors, (err) => gen.if(matchKeywordError(err, kwdErrs), () => {\n                    gen.assign(propParam, ajv_1._ `${kwdPropParams}[${err}.keyword]`);\n                    gen.assign(paramsErrors, ajv_1._ `${kwdErrs}[${err}.keyword][${err}.params[${propParam}]]`);\n                    gen.if(paramsErrors, () => gen.code(ajv_1._ `${paramsErrors}.push(${err})`).assign(ajv_1._ `${err}.${used}`, true));\n                }));\n                gen.forIn(\"key\", kwdErrs, (key) => gen.forIn(\"keyProp\", ajv_1._ `${kwdErrs}[${key}]`, (keyProp) => {\n                    gen.assign(paramsErrors, ajv_1._ `${kwdErrs}[${key}][${keyProp}]`);\n                    gen.if(ajv_1._ `${paramsErrors}.length`, () => {\n                        const tmpl = gen.const(\"tmpl\", ajv_1._ `${templates}[${key}] && ${templates}[${key}][${keyProp}]`);\n                        errors_1.reportError(cxt, {\n                            message: ajv_1._ `${tmpl} ? ${tmpl}() : ${schemaValue}[${key}][${keyProp}]`,\n                            params: ajv_1._ `{errors: ${paramsErrors}}`,\n                        });\n                    });\n                }));\n            }\n            function processChildErrors(childErrors) {\n                const { props, items } = childErrors;\n                if (!props && !items)\n                    return;\n                const isObj = ajv_1._ `typeof ${data} == \"object\"`;\n                const isArr = ajv_1._ `Array.isArray(${data})`;\n                const childErrs = gen.let(\"emErrors\");\n                let childKwd;\n                let childProp;\n                const templates = gen.let(\"templates\");\n                if (props && items) {\n                    childKwd = gen.let(\"emChildKwd\");\n                    gen.if(isObj);\n                    gen.if(isArr, () => {\n                        init(items, schema.items);\n                        gen.assign(childKwd, ajv_1.str `items`);\n                    }, () => {\n                        init(props, schema.properties);\n                        gen.assign(childKwd, ajv_1.str `properties`);\n                    });\n                    childProp = ajv_1._ `[${childKwd}]`;\n                }\n                else if (items) {\n                    gen.if(isArr);\n                    init(items, schema.items);\n                    childProp = ajv_1._ `.items`;\n                }\n                else if (props) {\n                    gen.if(codegen_1.and(isObj, codegen_1.not(isArr)));\n                    init(props, schema.properties);\n                    childProp = ajv_1._ `.properties`;\n                }\n                gen.forOf(\"err\", names_1.default.vErrors, (err) => ifMatchesChildError(err, childErrs, (child) => gen.code(ajv_1._ `${childErrs}[${child}].push(${err})`).assign(ajv_1._ `${err}.${used}`, true)));\n                gen.forIn(\"key\", childErrs, (key) => gen.if(ajv_1._ `${childErrs}[${key}].length`, () => {\n                    errors_1.reportError(cxt, {\n                        message: ajv_1._ `${key} in ${templates} ? ${templates}[${key}]() : ${schemaValue}${childProp}[${key}]`,\n                        params: ajv_1._ `{errors: ${childErrs}[${key}]}`,\n                    });\n                    gen.assign(ajv_1._ `${names_1.default.vErrors}[${names_1.default.errors}-1].instancePath`, ajv_1._ `${instancePath} + \"/\" + ${key}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")`);\n                }));\n                gen.endIf();\n                function init(children, msgs) {\n                    gen.assign(childErrs, ajv_1.stringify(children));\n                    gen.assign(templates, getTemplatesCode(children, msgs));\n                }\n            }\n            function processAllErrors(schMessage) {\n                const errs = gen.const(\"emErrs\", ajv_1._ `[]`);\n                gen.forOf(\"err\", names_1.default.vErrors, (err) => gen.if(matchAnyError(err), () => gen.code(ajv_1._ `${errs}.push(${err})`).assign(ajv_1._ `${err}.${used}`, true)));\n                gen.if(ajv_1._ `${errs}.length`, () => errors_1.reportError(cxt, {\n                    message: templateExpr(schMessage),\n                    params: ajv_1._ `{errors: ${errs}}`,\n                }));\n            }\n            function removeUsedErrors() {\n                const errs = gen.const(\"emErrs\", ajv_1._ `[]`);\n                gen.forOf(\"err\", names_1.default.vErrors, (err) => gen.if(ajv_1._ `!${err}.${used}`, () => gen.code(ajv_1._ `${errs}.push(${err})`)));\n                gen.assign(names_1.default.vErrors, errs).assign(names_1.default.errors, ajv_1._ `${errs}.length`);\n            }\n            function matchKeywordError(err, kwdErrs) {\n                return codegen_1.and(ajv_1._ `${err}.keyword !== ${keyword}`, ajv_1._ `!${err}.${used}`, ajv_1._ `${err}.instancePath === ${instancePath}`, ajv_1._ `${err}.keyword in ${kwdErrs}`, \n                // TODO match the end of the string?\n                ajv_1._ `${err}.schemaPath.indexOf(${it.errSchemaPath}) === 0`, ajv_1._ `/^\\\\/[^\\\\/]*$/.test(${err}.schemaPath.slice(${it.errSchemaPath.length}))`);\n            }\n            function ifMatchesChildError(err, childErrs, thenBody) {\n                gen.if(codegen_1.and(ajv_1._ `${err}.keyword !== ${keyword}`, ajv_1._ `!${err}.${used}`, ajv_1._ `${err}.instancePath.indexOf(${instancePath}) === 0`), () => {\n                    const childRegex = gen.scopeValue(\"pattern\", {\n                        ref: /^\\/([^/]*)(?:\\/|$)/,\n                        code: ajv_1._ `new RegExp(\"^\\\\\\/([^/]*)(?:\\\\\\/|$)\")`,\n                    });\n                    const matches = gen.const(\"emMatches\", ajv_1._ `${childRegex}.exec(${err}.instancePath.slice(${instancePath}.length))`);\n                    const child = gen.const(\"emChild\", ajv_1._ `${matches} && ${matches}[1].replace(/~1/g, \"/\").replace(/~0/g, \"~\")`);\n                    gen.if(ajv_1._ `${child} !== undefined && ${child} in ${childErrs}`, () => thenBody(child));\n                });\n            }\n            function matchAnyError(err) {\n                return codegen_1.and(ajv_1._ `${err}.keyword !== ${keyword}`, ajv_1._ `!${err}.${used}`, codegen_1.or(ajv_1._ `${err}.instancePath === ${instancePath}`, codegen_1.and(ajv_1._ `${err}.instancePath.indexOf(${instancePath}) === 0`, ajv_1._ `${err}.instancePath[${instancePath}.length] === \"/\"`)), ajv_1._ `${err}.schemaPath.indexOf(${it.errSchemaPath}) === 0`, ajv_1._ `${err}.schemaPath[${it.errSchemaPath}.length] === \"/\"`);\n            }\n            function getTemplatesCode(keys, msgs) {\n                const templatesCode = [];\n                for (const k in keys) {\n                    const msg = msgs[k];\n                    if (INTERPOLATION.test(msg))\n                        templatesCode.push([k, templateFunc(msg)]);\n                }\n                return gen.object(...templatesCode);\n            }\n            function templateExpr(msg) {\n                if (!INTERPOLATION.test(msg))\n                    return ajv_1.stringify(msg);\n                return new code_1._Code(code_1.safeStringify(msg)\n                    .replace(INTERPOLATION_REPLACE, (_s, ptr) => `\" + JSON.stringify(${validate_1.getData(ptr, it)}) + \"`)\n                    .replace(EMPTY_STR, \"\"));\n            }\n            function templateFunc(msg) {\n                return ajv_1._ `function(){return ${templateExpr(msg)}}`;\n            }\n        },\n        metaSchema: {\n            anyOf: [\n                { type: \"string\" },\n                {\n                    type: \"object\",\n                    properties: {\n                        properties: { $ref: \"#/$defs/stringMap\" },\n                        items: { $ref: \"#/$defs/stringList\" },\n                        required: { $ref: \"#/$defs/stringOrMap\" },\n                        dependencies: { $ref: \"#/$defs/stringOrMap\" },\n                    },\n                    additionalProperties: { type: \"string\" },\n                },\n            ],\n            $defs: {\n                stringMap: {\n                    type: \"object\",\n                    additionalProperties: { type: \"string\" },\n                },\n                stringOrMap: {\n                    anyOf: [{ type: \"string\" }, { $ref: \"#/$defs/stringMap\" }],\n                },\n                stringList: { type: \"array\", items: { type: \"string\" } },\n            },\n        },\n    };\n}\nconst ajvErrors = (ajv, options = {}) => {\n    if (!ajv.opts.allErrors)\n        throw new Error(\"ajv-errors: Ajv option allErrors must be true\");\n    if (ajv.opts.jsPropertySyntax) {\n        throw new Error(\"ajv-errors: ajv option jsPropertySyntax is not supported\");\n    }\n    return ajv.addKeyword(errorMessage(options));\n};\nexports.default = ajvErrors;\nmodule.exports = ajvErrors;\nmodule.exports.default = ajvErrors;\n//# sourceMappingURL=index.js.map"],"names":["Object","defineProperty","exports","value","ajv_1","codegen_1","code_1","validate_1","errors_1","names_1","keyword","used","Name","KEYWORD_PROPERTY_PARAMS","required","dependencies","dependentRequired","INTERPOLATION","INTERPOLATION_REPLACE","EMPTY_STR","errorMessage","options","schemaType","post","code","cxt","gen","data","schema","schemaValue","it","createErrors","sch","instancePath","strConcat","default","errorPath","matchKeywordError","err","kwdErrs","and","_","errSchemaPath","length","getTemplatesCode","keys","msgs","templatesCode","k","msg","test","push","templateFunc","object","templateExpr","_Code","safeStringify","replace","_s","ptr","getData","stringify","if","errors","kwdPropErrors","kwdErrors","emSchema","propErrors","kwdSch","errMap","p","keywordErrorsConfig","const","templates","forOf","vErrors","assign","singleError","message","let","paramsErrors","loopErrors","key","errMessage","reportError","params","body","forIn","processKeywordErrors","kwdPropParams","scopeValue","ref","propParam","keyProp","tmpl","processKeywordPropErrors","childErrors","props","items","isObj","isArr","childErrs","childKwd","childProp","init","str","properties","not","children","thenBody","childRegex","matches","child","ifMatchesChildError","endIf","processChildErrors","i","childErrorsConfig","schMessage","errs","or","matchAnyError","processAllErrors","keepErrors","removeUsedErrors","metaSchema","anyOf","type","$ref","additionalProperties","$defs","stringMap","stringOrMap","stringList","ajvErrors","ajv","opts","allErrors","Error","jsPropertySyntax","addKeyword","module"],"sourceRoot":""}