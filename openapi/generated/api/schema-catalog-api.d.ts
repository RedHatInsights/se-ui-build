/**
 * Red Hat Openshift SmartEvents Fleet Manager
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ProcessorCatalogResponse } from '../model';
/**
 * SchemaCatalogApi - axios parameter creator
 * @export
 */
export declare const SchemaCatalogApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get the action processor JSON schema.
     * @summary Get action processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionProcessorSchema: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the processor catalog with all the available sources and actions.
     * @summary Get processor catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalog: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the source processor JSON schema.
     * @summary Get source processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceProcessorSchema: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SchemaCatalogApi - functional programming interface
 * @export
 */
export declare const SchemaCatalogApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get the action processor JSON schema.
     * @summary Get action processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionProcessorSchema(id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<object>>;
    /**
     * Get the processor catalog with all the available sources and actions.
     * @summary Get processor catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalog(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ProcessorCatalogResponse>>;
    /**
     * Get the source processor JSON schema.
     * @summary Get source processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceProcessorSchema(id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<object>>;
};
/**
 * SchemaCatalogApi - factory interface
 * @export
 */
export declare const SchemaCatalogApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Get the action processor JSON schema.
     * @summary Get action processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionProcessorSchema(id: string, options?: any): AxiosPromise<object>;
    /**
     * Get the processor catalog with all the available sources and actions.
     * @summary Get processor catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalog(options?: any): AxiosPromise<ProcessorCatalogResponse>;
    /**
     * Get the source processor JSON schema.
     * @summary Get source processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceProcessorSchema(id: string, options?: any): AxiosPromise<object>;
};
/**
 * SchemaCatalogApi - interface
 * @export
 * @interface SchemaCatalogApi
 */
export interface SchemaCatalogApiInterface {
    /**
     * Get the action processor JSON schema.
     * @summary Get action processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaCatalogApiInterface
     */
    getActionProcessorSchema(id: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Get the processor catalog with all the available sources and actions.
     * @summary Get processor catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaCatalogApiInterface
     */
    getCatalog(options?: AxiosRequestConfig): AxiosPromise<ProcessorCatalogResponse>;
    /**
     * Get the source processor JSON schema.
     * @summary Get source processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaCatalogApiInterface
     */
    getSourceProcessorSchema(id: string, options?: AxiosRequestConfig): AxiosPromise<object>;
}
/**
 * SchemaCatalogApi - object-oriented interface
 * @export
 * @class SchemaCatalogApi
 * @extends {BaseAPI}
 */
export declare class SchemaCatalogApi extends BaseAPI implements SchemaCatalogApiInterface {
    /**
     * Get the action processor JSON schema.
     * @summary Get action processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaCatalogApi
     */
    getActionProcessorSchema(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Get the processor catalog with all the available sources and actions.
     * @summary Get processor catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaCatalogApi
     */
    getCatalog(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessorCatalogResponse, any>>;
    /**
     * Get the source processor JSON schema.
     * @summary Get source processor schema
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaCatalogApi
     */
    getSourceProcessorSchema(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
