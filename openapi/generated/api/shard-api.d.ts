/**
 * Red Hat Openshift SmartEvents Fleet Manager
 * The api exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BridgeDTO } from '../model';
import { ProcessorDTO } from '../model';
/**
 * ShardApi - axios parameter creator
 * @export
 */
export declare const ShardApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get Bridge instances to be processed by a shard.
     * @summary Get Bridge instances to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridges: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Processors to be processed by a shard.
     * @summary Get Processors to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessors: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Bridge instance.
     * @summary Update a Bridge instance.
     * @param {BridgeDTO} [bridgeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBridge: (bridgeDTO?: BridgeDTO | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Processor.
     * @summary Update a Processor.
     * @param {ProcessorDTO} [processorDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProcessorStatus: (processorDTO?: ProcessorDTO | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ShardApi - functional programming interface
 * @export
 */
export declare const ShardApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get Bridge instances to be processed by a shard.
     * @summary Get Bridge instances to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridges(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<BridgeDTO>>>;
    /**
     * Get Processors to be processed by a shard.
     * @summary Get Processors to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessors(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<ProcessorDTO>>>;
    /**
     * Update a Bridge instance.
     * @summary Update a Bridge instance.
     * @param {BridgeDTO} [bridgeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBridge(bridgeDTO?: BridgeDTO | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update a Processor.
     * @summary Update a Processor.
     * @param {ProcessorDTO} [processorDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProcessorStatus(processorDTO?: ProcessorDTO | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ShardApi - factory interface
 * @export
 */
export declare const ShardApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Get Bridge instances to be processed by a shard.
     * @summary Get Bridge instances to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridges(options?: any): AxiosPromise<Array<BridgeDTO>>;
    /**
     * Get Processors to be processed by a shard.
     * @summary Get Processors to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessors(options?: any): AxiosPromise<Array<ProcessorDTO>>;
    /**
     * Update a Bridge instance.
     * @summary Update a Bridge instance.
     * @param {BridgeDTO} [bridgeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBridge(bridgeDTO?: BridgeDTO | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update a Processor.
     * @summary Update a Processor.
     * @param {ProcessorDTO} [processorDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProcessorStatus(processorDTO?: ProcessorDTO | undefined, options?: any): AxiosPromise<void>;
};
/**
 * ShardApi - interface
 * @export
 * @interface ShardApi
 */
export interface ShardApiInterface {
    /**
     * Get Bridge instances to be processed by a shard.
     * @summary Get Bridge instances to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApiInterface
     */
    getBridges(options?: AxiosRequestConfig): AxiosPromise<Array<BridgeDTO>>;
    /**
     * Get Processors to be processed by a shard.
     * @summary Get Processors to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApiInterface
     */
    getProcessors(options?: AxiosRequestConfig): AxiosPromise<Array<ProcessorDTO>>;
    /**
     * Update a Bridge instance.
     * @summary Update a Bridge instance.
     * @param {BridgeDTO} [bridgeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApiInterface
     */
    updateBridge(bridgeDTO?: BridgeDTO, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a Processor.
     * @summary Update a Processor.
     * @param {ProcessorDTO} [processorDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApiInterface
     */
    updateProcessorStatus(processorDTO?: ProcessorDTO, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * ShardApi - object-oriented interface
 * @export
 * @class ShardApi
 * @extends {BaseAPI}
 */
export declare class ShardApi extends BaseAPI implements ShardApiInterface {
    /**
     * Get Bridge instances to be processed by a shard.
     * @summary Get Bridge instances to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApi
     */
    getBridges(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BridgeDTO[], any>>;
    /**
     * Get Processors to be processed by a shard.
     * @summary Get Processors to be processed by a shard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApi
     */
    getProcessors(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessorDTO[], any>>;
    /**
     * Update a Bridge instance.
     * @summary Update a Bridge instance.
     * @param {BridgeDTO} [bridgeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApi
     */
    updateBridge(bridgeDTO?: BridgeDTO, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a Processor.
     * @summary Update a Processor.
     * @param {ProcessorDTO} [processorDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardApi
     */
    updateProcessorStatus(processorDTO?: ProcessorDTO, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
