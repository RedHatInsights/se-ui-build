{"version":3,"file":"119.38bf161c.js","mappings":"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","sources":["webpack://smartevents-ui/./mocked-api/data.ts","webpack://smartevents-ui/./mocked-api/handlers.ts","webpack://smartevents-ui/./mocked-api/browser.ts","webpack://smartevents-ui/./src/app/components/AppLayout/Patternfly-Logo.svg","webpack://smartevents-ui/./src/Keycloak.tsx","webpack://smartevents-ui/./src/app/components/AppLayout/AppLayout.tsx","webpack://smartevents-ui/./src/App.tsx","webpack://smartevents-ui/./src/AppMocked.tsx","webpack://smartevents-ui/./src/bootstrap.tsx"],"sourcesContent":["export const instancesData = [\n  {\n    kind: \"Bridge\",\n    id: \"3543edaa-1851-4ad7-96be-ebde7d20d717\",\n    name: \"Instance one\",\n    href: \"/api/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717\",\n    status: \"ready\",\n    submitted_at: \"2022-02-24T13:34:00Z\",\n    published_at: \"2022-02-24T13:35:00Z\",\n    endpoint:\n      \"https://3543edaa-1851-4ad7-96be-ebde7d20d717.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"830c8f0d-c677-492f-8d7e-0f81893fbba6\",\n    name: \"Instance two\",\n    href: \"/api/v1/bridges/830c8f0d-c677-492f-8d7e-0f81893fbba6\",\n    status: \"ready\",\n    submitted_at: \"2022-02-20T11:23:00Z\",\n    published_at: \"2022-02-20T11:24:00Z\",\n    endpoint:\n      \"https://830c8f0d-c677-492f-8d7e-0f81893fbba6.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"ee22ce62-1f23-4dd7-b106-e4158baf8228\",\n    name: \"Instance three\",\n    href: \"/api/v1/bridges/ee22ce62-1f23-4dd7-b106-e4158baf8228\",\n    status: \"accepted\",\n    submitted_at: \"2022-02-15T12:03:00Z\",\n    published_at: \"2022-02-15T12:04:00Z\",\n    endpoint:\n      \"https://ee22ce62-1f23-4dd7-b106-e4158baf8228.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"21ac90ba-76d2-4f88-b08b-2547ef359bae\",\n    name: \"Instance four\",\n    href: \"/api/v1/bridges/21ac90ba-76d2-4f88-b08b-2547ef359bae\",\n    status: \"provisioning\",\n    submitted_at: \"2022-02-10T16:34:00Z\",\n    published_at: \"2022-02-10T16:35:00Z\",\n    endpoint:\n      \"https://21ac90ba-76d2-4f88-b08b-2547ef359bae.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"d4de4dd9-42fe-48ec-8ac7-42163e6e971a\",\n    name: \"Instance five\",\n    href: \"/api/v1/bridges/d4de4dd9-42fe-48ec-8ac7-42163e6e971a\",\n    status: \"ready\",\n    submitted_at: \"2022-02-05T13:58:00Z\",\n    published_at: \"2022-02-05T13:59:00Z\",\n    endpoint:\n      \"https://d4de4dd9-42fe-48ec-8ac7-42163e6e971a.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"d7e13602-b046-4120-b377-15d61e21c31a\",\n    name: \"Instance six\",\n    href: \"/api/v1/bridges/d7e13602-b046-4120-b377-15d61e21c31a\",\n    status: \"ready\",\n    submitted_at: \"2022-02-01T12:02:00Z\",\n    published_at: \"2022-02-01T12:03:00Z\",\n    endpoint:\n      \"https://d7e13602-b046-4120-b377-15d61e21c31a.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"3a7efbed-3562-4a95-9c32-f49d12d8cab2\",\n    name: \"Instance seven\",\n    href: \"/api/v1/bridges/3a7efbed-3562-4a95-9c32-f49d12d8cab2\",\n    status: \"ready\",\n    submitted_at: \"2021-12-25T21:46:00Z\",\n    published_at: \"2021-12-25T21:47:00Z\",\n    endpoint:\n      \"https://3a7efbed-3562-4a95-9c32-f49d12d8cab2.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"fa648473-3662-4bbc-99ba-158d9ab95ccc\",\n    name: \"Instance eight\",\n    href: \"/api/v1/bridges/fa648473-3662-4bbc-99ba-158d9ab95ccc\",\n    status: \"ready\",\n    submitted_at: \"2021-12-20T12:21:00Z\",\n    published_at: \"2021-12-20T12:22:00Z\",\n    endpoint:\n      \"https://fa648473-3662-4bbc-99ba-158d9ab95ccc.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"04f131c3-b34c-4ee2-b153-fbff0bb91ece\",\n    name: \"Instance nine\",\n    href: \"/api/v1/bridges/04f131c3-b34c-4ee2-b153-fbff0bb91ece\",\n    status: \"ready\",\n    submitted_at: \"2021-12-15T16:09:00Z\",\n    published_at: \"2021-12-15T16:10:00Z\",\n    endpoint:\n      \"https://04f131c3-b34c-4ee2-b153-fbff0bb91ece.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"c28da8c0-05e4-42f3-a3fd-615cc7fbb382\",\n    name: \"Instance ten\",\n    href: \"/api/v1/bridges/c28da8c0-05e4-42f3-a3fd-615cc7fbb382\",\n    status: \"ready\",\n    submitted_at: \"2021-12-10T11:34:00Z\",\n    published_at: \"2021-12-10T11:35:00Z\",\n    endpoint:\n      \"https://c28da8c0-05e4-42f3-a3fd-615cc7fbb382.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"a8c1cb57-0ab3-4ccb-8c55-ef8a8b166846\",\n    name: \"Instance eleven\",\n    href: \"/api/v1/bridges/a8c1cb57-0ab3-4ccb-8c55-ef8a8b166846\",\n    status: \"ready\",\n    submitted_at: \"2021-12-05T11:34:00Z\",\n    published_at: \"2021-12-05T11:35:00Z\",\n    endpoint:\n      \"https://a8c1cb57-0ab3-4ccb-8c55-ef8a8b166846.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n  {\n    kind: \"Bridge\",\n    id: \"e176d63b-6fdc-43ce-afc8-45160f456502\",\n    name: \"Instance twelve\",\n    href: \"/api/v1/bridges/e176d63b-6fdc-43ce-afc8-45160f456502\",\n    status: \"ready\",\n    submitted_at: \"2021-12-01T11:34:00Z\",\n    published_at: \"2021-12-01T11:35:00Z\",\n    endpoint:\n      \"https://e176d63b-6fdc-43ce-afc8-45160f456502.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events\",\n  },\n];\n\nexport const processorData = [\n  {\n    kind: \"Processor\",\n    id: \"a72fb8e7-162b-4ae8-9672-f9f5b86fb3d7\",\n    name: \"Processor one\",\n    type: \"sink\",\n    href: \"/api/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/a72fb8e7-162b-4ae8-9672-f9f5b86fb3d7\",\n    submitted_at: \"2022-04-12T12:10:46.029400+0000\",\n    published_at: \"2022-04-12T12:12:52.416527+0000\",\n    transformationTemplate: \"Hi! This is a test message\",\n    status: \"ready\",\n    action: {\n      type: \"Slack\",\n      parameters: {\n        channel: \"test\",\n        webhookUrl:\n          \"https://hooks.slack.com/services/XXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXX\",\n      },\n    },\n  },\n  {\n    kind: \"Processor\",\n    id: \"fa373030-c0d2-11ec-9d64-0242ac120002\",\n    name: \"Processor two\",\n    type: \"sink\",\n    href: \"/api/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/fa373030-c0d2-11ec-9d64-0242ac120002\",\n    submitted_at: \"2022-04-15T12:10:46.029400+0000\",\n    published_at: \"2022-04-15T12:12:52.416527+0000\",\n    filters: [\n      {\n        type: \"StringEquals\",\n        key: \"data.name\",\n        value: \"John\",\n      },\n    ],\n    status: \"ready\",\n    action: {\n      type: \"Slack\",\n      parameters: {\n        channel: \"test\",\n        webhookUrl:\n          \"https://hooks.slack.com/services/XXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXX\",\n      },\n    },\n  },\n  {\n    kind: \"Processor\",\n    id: \"f8f34af4-caed-11ec-9d64-0242ac120002\",\n    name: \"Processor three\",\n    type: \"source\",\n    href: \"/api/v1/bridges/3543edaa-1851-4ad7-96be-ebde7d20d717/processors/f8f34af4-caed-11ec-9d64-0242ac120002\",\n    submitted_at: \"2022-04-15T12:10:46.029400+0000\",\n    published_at: \"2022-04-15T12:12:52.416527+0000\",\n    filters: [\n      {\n        type: \"StringEquals\",\n        key: \"data.name\",\n        value: \"John\",\n      },\n    ],\n    status: \"accepted\",\n    source: {\n      type: \"Slack\",\n      parameters: {\n        channel: \"test\",\n        token: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n      },\n    },\n  },\n];\n","/* tslint:disable @typescript-eslint/no-unsafe-call */\n\nimport { rest } from \"msw\";\nimport { factory, oneOf, primaryKey } from \"@mswjs/data\";\nimport {\n  BridgeRequest,\n  ProcessorRequest,\n  ProcessorResponse,\n} from \"@openapi/generated\";\nimport { v4 as uuid } from \"uuid\";\nimport { instancesData, processorData } from \"./data\";\nimport { omit } from \"lodash\";\nimport { EventFilter } from \"../src/types/Processor\";\n\n// api url\nconst apiUrl = `${process.env.BASE_URL ?? \"\"}${\n  process.env.BASE_PATH ?? \"/api/v1\"\n}`;\n\n// api response delay in ms\nconst apiDelay = 1000;\n\n// set up the model\nconst db = factory({\n  bridge: {\n    id: primaryKey(String),\n    name: String,\n    kind: String,\n    href: String,\n    submitted_at: String,\n    published_at: String,\n    status: String,\n    endpoint: String,\n  },\n  processor: {\n    id: primaryKey(String),\n    bridge: oneOf(\"bridge\"),\n    type: String,\n    kind: String,\n    name: String,\n    href: String,\n    submitted_at: String,\n    published_at: String,\n    status: String,\n    filters: Array,\n    transformationTemplate: String,\n    action: {\n      type: String,\n      parameters: {\n        channel: String,\n        webhookUrl: String,\n      },\n    },\n    source: {\n      type: String,\n      parameters: {\n        channel: String,\n        token: String,\n      },\n    },\n  },\n});\n\n// load demo data\ninstancesData.map((instance, index) => {\n  const bridge = db.bridge.create(instance);\n  // adding processors to first bridge\n  if (index === 0) {\n    processorData.map((processorItem) => {\n      db.processor.create({\n        ...processorItem,\n        bridge: bridge,\n      });\n    });\n  }\n});\n\nexport const handlers = [\n  // bridges\n  // get all bridges\n  rest.get(`${apiUrl}/bridges`, (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get(\"page\") ?? \"0\");\n    const size = parseInt(req.url.searchParams.get(\"size\") ?? \"10\");\n\n    const items = db.bridge.findMany({\n      take: size,\n      skip: page * size,\n      orderBy: {\n        submitted_at: \"desc\",\n      },\n    });\n\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json({\n        kind: \"BridgeList\",\n        items,\n        page,\n        size: items.length,\n        total: db.bridge.count(),\n      })\n    );\n  }),\n  // get a single bridge\n  rest.get(`${apiUrl}/bridges/:bridgeId`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n\n    const bridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (bridge) {\n      return res(ctx.status(200), ctx.delay(apiDelay), ctx.json(bridge));\n    }\n    return res(\n      ctx.status(404),\n      ctx.delay(apiDelay),\n      ctx.json({\n        ...error_not_found,\n        reason: `Bridge with id '${\n          bridgeId as string\n        }' for customer 'XXXXXXXX' does not exist`,\n      })\n    );\n  }),\n  // create a bridge\n  rest.post(`${apiUrl}/bridges`, (req, res, ctx) => {\n    const { name } = req.body as BridgeRequest;\n\n    const existingBridge = db.bridge.findFirst({\n      where: {\n        name: {\n          equals: name,\n        },\n      },\n    });\n\n    if (existingBridge) {\n      return res(\n        ctx.status(400),\n        ctx.json({\n          ...error_duplicated_resource,\n          reason: `Bridge with name '${name}' already exists for customer with id 'XXXXXXXX'`,\n        })\n      );\n    }\n\n    const id = uuid();\n    const bridge = {\n      kind: \"Bridge\",\n      id,\n      name,\n      href: `/api/v1/bridges/${id}`,\n      submitted_at: new Date().toISOString(),\n      status: \"accepted\",\n    };\n\n    const newBridge = db.bridge.create(bridge);\n\n    // make the process slower if the instance name contains \"wait\" and make it fail\n    // if the name contains \"fail\"\n    resourceStatusFlow(\n      \"bridge\",\n      \"create\",\n      id,\n      name.includes(\"wait\"),\n      name.includes(\"fail-create\")\n    );\n\n    return res(ctx.status(200), ctx.delay(apiDelay), ctx.json(newBridge));\n  }),\n  // delete a bridge\n  rest.delete(`${apiUrl}/bridges/:bridgeId`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n\n    const existingBridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (!existingBridge) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          ...error_not_found,\n          reason: `Bridge with id '${\n            bridgeId as string\n          }' for customer 'XXXXXXXX' does not exist`,\n        })\n      );\n    }\n\n    const processorsCount = db.processor.count({\n      where: {\n        bridge: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      },\n    });\n\n    if (processorsCount > 0) {\n      return res(\n        ctx.status(400),\n        ctx.delay(apiDelay),\n        ctx.json(error_bridge_not_deletable)\n      );\n    }\n\n    db.bridge.update({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n      data: {\n        status: \"deprovision\",\n      },\n    });\n\n    resourceStatusFlow(\n      \"bridge\",\n      \"delete\",\n      bridgeId as string,\n      existingBridge.name.includes(\"wait\"),\n      existingBridge.name.includes(\"fail-delete\")\n    );\n\n    return res(ctx.status(202), ctx.delay(apiDelay), ctx.json({}));\n  }),\n\n  // processors\n  // get all processors of a bridge\n  rest.get(`${apiUrl}/bridges/:bridgeId/processors`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n\n    const page = parseInt(req.url.searchParams.get(\"page\") ?? \"0\");\n    const size = parseInt(req.url.searchParams.get(\"size\") ?? \"10\");\n\n    const bridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (!bridge) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          ...error_not_found,\n          reason: `Bridge with id '${\n            bridgeId as string\n          }' for customer 'XXXXXXXX' does not exist`,\n        })\n      );\n    }\n\n    const query = {\n      where: {\n        bridge: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      },\n    };\n\n    const count = db.processor.count(query);\n\n    const items = db.processor\n      .findMany({\n        take: size,\n        skip: page * size,\n        orderBy: {\n          submitted_at: \"desc\",\n        },\n        ...query,\n      })\n      .map((item) =>\n        cleanupProcessor(\n          item as unknown as Record<string | number | symbol, unknown>\n        )\n      );\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json({\n        kind: \"ProcessorList\",\n        items,\n        page,\n        size: items.length,\n        total: count,\n      })\n    );\n  }),\n  // get a single processor\n  rest.get(\n    `${apiUrl}/bridges/:bridgeId/processors/:processorId`,\n    (req, res, ctx) => {\n      const { bridgeId, processorId } = req.params;\n      const bridge = db.bridge.findFirst({\n        where: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      });\n\n      if (!bridge) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            ...error_not_found,\n            reason: `Bridge with id '${\n              bridgeId as string\n            }' for customer 'XXXXXXXX' does not exist`,\n          })\n        );\n      }\n\n      const processor = db.processor.findFirst({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n      });\n\n      if (processor) {\n        return res(\n          ctx.status(200),\n          ctx.delay(apiDelay),\n          ctx.json(\n            cleanupProcessor(\n              processor as unknown as Record<string | number | symbol, unknown>\n            )\n          )\n        );\n      }\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          ...error_not_found,\n          reason: `Processor with id '${\n            processorId as string\n          }' for customer 'XXXXXXXX' does not exist`,\n        })\n      );\n    }\n  ),\n  // create a processor\n  rest.post(`${apiUrl}/bridges/:bridgeId/processors`, (req, res, ctx) => {\n    const { bridgeId } = req.params;\n    const { name, transformationTemplate, filters, action, source } =\n      req.body as MockProcessorRequest;\n\n    const bridge = db.bridge.findFirst({\n      where: {\n        id: {\n          equals: bridgeId as string,\n        },\n      },\n    });\n\n    if (!bridge) {\n      return res(\n        ctx.status(404),\n        ctx.delay(apiDelay),\n        ctx.json({\n          ...error_not_found,\n          reason: `Bridge with id '${\n            bridgeId as string\n          }' for customer 'XXXXXXXX' does not exist`,\n        })\n      );\n    }\n\n    const existingProcessor = db.processor.findFirst({\n      where: {\n        name: {\n          equals: name,\n        },\n        bridge: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      },\n    });\n\n    if (existingProcessor) {\n      return res(\n        ctx.status(400),\n        ctx.json({\n          ...error_duplicated_resource,\n          reason: `Processor with name '${name}' already exists for bridge with id ${\n            bridgeId as string\n          } for customer with id 'XXXXXXXXXX'`,\n        })\n      );\n    }\n\n    const id = uuid();\n    const processor = {\n      kind: \"Processor\",\n      id,\n      type: action ? \"sink\" : \"source\",\n      name,\n      href: `/api/v1/bridges/${bridge?.id ?? \"\"}/processors/${id}`,\n      submitted_at: new Date().toISOString(),\n      status: \"accepted\",\n      filters: filters,\n      transformationTemplate,\n      ...(action ? { action } : {}),\n      ...(source ? { source } : {}),\n      bridge,\n    };\n\n    const newProcessor = db.processor.create(processor);\n\n    // make the process slower if the resource name contains \"wait\" and make it fail\n    // if the name contains \"fail\"\n    resourceStatusFlow(\n      \"processor\",\n      \"create\",\n      id,\n      name.includes(\"wait\"),\n      name.includes(\"fail-create\")\n    );\n\n    return res(\n      ctx.status(200),\n      ctx.delay(apiDelay),\n      ctx.json(\n        cleanupProcessor(\n          newProcessor as unknown as Record<string | number | symbol, unknown>\n        )\n      )\n    );\n  }),\n  // update a processor\n  rest.put(\n    `${apiUrl}/bridges/:bridgeId/processors/:processorId`,\n    (req, res, ctx) => {\n      const { bridgeId, processorId } = req.params;\n      const { name, filters, transformationTemplate, source, action } =\n        req.body as ProcessorRequest;\n\n      const existingBridge = db.bridge.findFirst({\n        where: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      });\n\n      if (!existingBridge) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            ...error_not_found,\n            reason: `Bridge with id '${\n              bridgeId as string\n            }' for customer 'XXXXXXXX' does not exist`,\n          })\n        );\n      }\n\n      const processor = db.processor.findFirst({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n      });\n\n      if (!processor) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            ...error_not_found,\n            reason: `Processor with id '${\n              processorId as string\n            }' for customer 'XXXXXXXX' does not exist`,\n          })\n        );\n      }\n\n      const existingProcessors = db.processor.findMany({\n        where: {\n          name: {\n            equals: name,\n          },\n          bridge: {\n            id: {\n              equals: bridgeId as string,\n            },\n          },\n        },\n      });\n\n      const processorNameCollision =\n        existingProcessors.length === 1 &&\n        existingProcessors[0].id !== processorId;\n      if (processorNameCollision || existingProcessors.length > 1) {\n        return res(\n          ctx.status(400),\n          ctx.json({\n            ...error_duplicated_resource,\n            reason: `Processor with name '${name}' already exists for bridge with id ${\n              bridgeId as string\n            } for customer with id 'XXXXXXXXXX'`,\n          })\n        );\n      }\n\n      const updatedProcessor = db.processor.update({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n        data: {\n          name,\n          status: \"accepted\",\n          filters: filters as unknown as EventFilter[],\n          transformationTemplate,\n          ...(action ? { action } : {}),\n          ...(source ? { source } : {}),\n        },\n      });\n\n      // make the process slower if the resource name contains \"wait\" and make it fail\n      // if the name contains \"fail\"\n      resourceStatusFlow(\n        \"processor\",\n        \"create\",\n        processorId as string,\n        name.includes(\"wait\"),\n        name.includes(\"fail-create\")\n      );\n\n      return res(\n        ctx.status(200),\n        ctx.delay(apiDelay),\n        ctx.json(\n          cleanupProcessor(\n            updatedProcessor as unknown as Record<\n              string | number | symbol,\n              unknown\n            >\n          )\n        )\n      );\n    }\n  ),\n  // delete a processor\n  rest.delete(\n    `${apiUrl}/bridges/:bridgeId/processors/:processorId`,\n    (req, res, ctx) => {\n      const { bridgeId, processorId } = req.params;\n\n      const existingBridge = db.bridge.findFirst({\n        where: {\n          id: {\n            equals: bridgeId as string,\n          },\n        },\n      });\n\n      if (!existingBridge) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            ...error_not_found,\n            reason: `Bridge with id '${\n              bridgeId as string\n            }' for customer 'XXXXXXXX' does not exist`,\n          })\n        );\n      }\n\n      const existingProcessor = db.processor.findFirst({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n          bridge: {\n            id: {\n              equals: bridgeId as string,\n            },\n          },\n        },\n      });\n\n      if (!existingProcessor) {\n        return res(\n          ctx.status(404),\n          ctx.delay(apiDelay),\n          ctx.json({\n            ...error_not_found,\n            reason: `Processor with id '${\n              bridgeId as string\n            }' for customer 'XXXXXXXX' does not exist`,\n          })\n        );\n      }\n\n      db.processor.update({\n        where: {\n          id: {\n            equals: processorId as string,\n          },\n        },\n        data: {\n          status: \"deprovision\",\n        },\n      });\n\n      resourceStatusFlow(\n        \"processor\",\n        \"delete\",\n        processorId as string,\n        existingProcessor.name.includes(\"wait\"),\n        existingProcessor.name.includes(\"fail-delete\")\n      );\n\n      return res(ctx.status(202), ctx.delay(apiDelay), ctx.json({}));\n    }\n  ),\n];\n\n/**\n * Resource status flow\n *\n * @param type Resource type: \"bridge\" or \"processor\"\n * @param mode Flow mode: \"create\" or \"delete\"\n * @param id Resource id\n * @param wait Make the creation process slower (~1,3m)\n * @param fail Make the creation process fail\n */\nconst resourceStatusFlow = (\n  type: \"processor\" | \"bridge\",\n  mode: \"create\" | \"delete\",\n  id: string,\n  wait: boolean,\n  fail: boolean\n): void => {\n  const waitTime = wait ? 45000 : 8000;\n\n  const updateProcessor = (id: string, status: string): void => {\n    db.processor.update({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n      data: {\n        status() {\n          return status;\n        },\n        published_at(published_at) {\n          return status === \"ready\" ? new Date().toISOString() : published_at;\n        },\n      },\n    });\n  };\n\n  const updateBridge = (id: string, status: string): void => {\n    db.bridge.update({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n      data: {\n        status() {\n          return status;\n        },\n        endpoint(endpoint) {\n          return status === \"ready\"\n            ? `https://ob-${id}.apps.openbridge-dev.fdvn.p1.openshiftapps.com/events`\n            : endpoint;\n        },\n        published_at(published_at) {\n          return status === \"ready\" ? new Date().toISOString() : published_at;\n        },\n      },\n    });\n  };\n\n  const deleteBridge = (id: string): void => {\n    db.bridge.delete({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n    });\n  };\n\n  const deleteProcessor = (id: string): void => {\n    db.processor.delete({\n      where: {\n        id: {\n          equals: id,\n        },\n      },\n    });\n  };\n\n  const updateResource = type === \"processor\" ? updateProcessor : updateBridge;\n\n  const stepOne = mode === \"create\" ? \"provisioning\" : \"deleting\";\n  const stepTwo = mode === \"create\" ? \"ready\" : \"deleted\";\n\n  setTimeout(() => {\n    updateResource(id, stepOne);\n  }, waitTime);\n\n  setTimeout(() => {\n    updateResource(id, fail ? \"failed\" : stepTwo);\n  }, waitTime * 2);\n\n  if (mode === \"delete\" && !fail) {\n    setTimeout(() => {\n      if (type === \"processor\") {\n        deleteProcessor(id);\n      } else {\n        deleteBridge(id);\n      }\n    }, waitTime * 2.2);\n  }\n};\n\n/**\n * Cleanup processor\n *\n * @param processor Processor to clean from unwanted properties before response\n */\nconst cleanupProcessor = (\n  processor: Record<string, unknown>\n): ProcessorResponse => {\n  // removing properties not needed for the response\n  const omitProperties = [\"bridge\"];\n\n  if (!(processor.filters as Array<Record<string, unknown>>)?.length) {\n    omitProperties.push(\"filters\");\n  }\n  if (processor.transformationTemplate === \"\") {\n    omitProperties.push(\"transformationTemplate\");\n  }\n\n  if (processor.type === \"source\") {\n    omitProperties.push(\"action\");\n  } else {\n    omitProperties.push(\"source\");\n  }\n\n  return omit(processor, omitProperties);\n};\n\nconst error_not_found = {\n  kind: \"Error\",\n  id: \"4\",\n  href: \"/api/v1/errors/4\",\n  code: \"OPENBRIDGE-4\",\n};\n\nconst error_duplicated_resource = {\n  kind: \"Error\",\n  id: \"1\",\n  href: \"/api/v1/errors/1\",\n  code: \"OPENBRIDGE-1\",\n};\n\nconst error_bridge_not_deletable = {\n  kind: \"Error\",\n  id: \"2\",\n  href: \"/api/v1/errors/2\",\n  code: \"OPENBRIDGE-2\",\n  reason:\n    \"It is not possible to delete a Bridge instance with active Processors.\",\n};\n\ninterface MockProcessorRequest extends Omit<ProcessorRequest, \"filters\"> {\n  filters: unknown[];\n}\n","import { setupWorker } from \"msw\";\nimport { handlers } from \"./handlers\";\n\n// configuring service worker with its handlers\nexport const worker = setupWorker(...handlers);\n","export default __webpack_public_path__ + \"f940137c.svg\";","/* eslint-disable @typescript-eslint/await-thenable */\nimport Keycloak from \"keycloak-js\";\n\nexport let keycloak: Keycloak.KeycloakInstance | undefined;\n\n/* Token min validity in seconds\n * Passed to updateToken(). When the token is going to expire before\n * the minimum validity, the token is refreshed.\n */\nconst TOKEN_MIN_VALIDITY_SECONDS = 50;\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const setKeycloakInstance = async (): Promise<void> => {\n  if (!keycloak) await init();\n};\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (): Promise<void> => {\n  try {\n    keycloak = Keycloak({\n      realm: \"redhat-external\",\n      url: \"https://sso.redhat.com/auth/\",\n      clientId: \"cloud-services\",\n    });\n    if (keycloak) {\n      await keycloak.init({\n        onLoad: \"login-required\",\n        promiseType: \"native\",\n      });\n    }\n  } catch (e) {\n    keycloak = undefined;\n    console.warn(\n      \"Auth: Unable to initialize keycloak. Client side will not be configured to use authentication\",\n      e\n    );\n  }\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getKeyCloakToken = async (): Promise<string> => {\n  await keycloak?.updateToken(TOKEN_MIN_VALIDITY_SECONDS);\n  if (keycloak?.token) return keycloak.token;\n  console.error(\"No keycloak token available\");\n  return \"foo\";\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getParsedKeyCloakToken =\n  async (): Promise<Keycloak.KeycloakTokenParsed> => {\n    await keycloak?.updateToken(TOKEN_MIN_VALIDITY_SECONDS);\n    if (keycloak?.tokenParsed) return keycloak.tokenParsed;\n    console.error(\"No keycloak token available\");\n    return {} as Keycloak.KeycloakTokenParsed;\n  };\n\nexport const getUsername = (): Promise<string> => {\n  return getParsedKeyCloakToken().then(\n    (token: unknown) =>\n      (\n        token as {\n          [index: string]: string;\n        }\n      )[\"username\"] ?? \"\"\n  );\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n */\nexport const logout = async (): Promise<void> => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n};\n","import React, { FunctionComponent, ReactNode, useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\n\nimport {\n  Button,\n  Nav,\n  NavItem,\n  NavList,\n  Page,\n  PageHeader,\n  PageHeaderTools,\n  PageHeaderToolsGroup,\n  PageSidebar,\n} from \"@patternfly/react-core\";\n\nimport logo from \"./Patternfly-Logo.svg\";\nimport { logout } from \"../../../Keycloak\";\n\ninterface AppLayoutProps {\n  children: ReactNode;\n  mobileView?: boolean;\n}\n\nexport const AppLayout: FunctionComponent<AppLayoutProps> = ({ children }) => {\n  const [isNavOpen, setIsNavOpen] = useState(true);\n  const [isMobileView, setIsMobileView] = useState(true);\n  const [isNavOpenMobile, setIsNavOpenMobile] = useState(false);\n\n  const onNavToggleMobile = (): void => {\n    setIsNavOpenMobile(!isNavOpenMobile);\n  };\n  const onNavToggle = (): void => {\n    setIsNavOpen(!isNavOpen);\n  };\n  const onPageResize = (props: {\n    mobileView: boolean;\n    windowSize: number;\n  }): void => {\n    setIsMobileView(props.mobileView);\n  };\n\n  const HeaderTools = (\n    <PageHeaderTools>\n      <PageHeaderToolsGroup>\n        <Button variant=\"tertiary\" onClick={(): void => void logout()}>\n          Logout\n        </Button>\n      </PageHeaderToolsGroup>\n    </PageHeaderTools>\n  );\n\n  const Header = (\n    <PageHeader\n      logo={<LogoImg />}\n      showNavToggle\n      isNavOpen={isNavOpen}\n      headerTools={HeaderTools}\n      onNavToggle={isMobileView ? onNavToggleMobile : onNavToggle}\n      aria-label={\"global_navigation\"}\n    />\n  );\n\n  const Navigation = (\n    <Nav\n      id=\"nav-primary-simple\"\n      role=\"navigation\"\n      theme=\"dark\"\n      aria-label={\"global\"}\n    >\n      <NavList id=\"nav-list-simple\">\n        <NavItem id={\"connectors\"} ouiaId=\"smart-events\">\n          <NavLink to={\"/\"} activeClassName=\"pf-m-current\">\n            SmartEvents\n          </NavLink>\n        </NavItem>\n      </NavList>\n    </Nav>\n  );\n  const Sidebar = (\n    <PageSidebar\n      theme=\"dark\"\n      nav={Navigation}\n      isNavOpen={isMobileView ? isNavOpenMobile : isNavOpen}\n    />\n  );\n  return (\n    <Page\n      mainContainerId=\"primary-app-container\"\n      role=\"main\"\n      header={Header}\n      sidebar={Sidebar}\n      onPageResize={onPageResize}\n    >\n      {children}\n    </Page>\n  );\n};\n\nfunction LogoImg(): JSX.Element {\n  const history = useHistory();\n  function handleClick(): void {\n    history.push(\"/\");\n  }\n  return (\n    <img src={logo as string} onClick={handleClick} alt=\"PatternFly Logo\" />\n  );\n}\n","import React, { Suspense, useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"@patternfly/patternfly/patternfly.css\";\nimport \"@patternfly/patternfly/utilities/Accessibility/accessibility.css\";\nimport \"@patternfly/patternfly/utilities/Sizing/sizing.css\";\nimport \"@patternfly/patternfly/utilities/Spacing/spacing.css\";\nimport \"@patternfly/patternfly/utilities/Display/display.css\";\nimport { AppLayout } from \"@app/components/AppLayout/AppLayout\";\nimport Routes from \"@app/Routes/Routes\";\nimport {\n  AppServicesLoading,\n  I18nProvider,\n} from \"@rhoas/app-services-ui-components\";\nimport { getKeyCloakToken, getUsername, setKeycloakInstance } from \"./Keycloak\";\nimport { SmartEventsContextProvider } from \"@contexts/SmartEventsContext\";\n\nconst App = (): JSX.Element => {\n  const [initialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    const init = async (): Promise<void> => {\n      await setKeycloakInstance();\n      setInitialized(true);\n    };\n    void init();\n  }, []);\n\n  const apiBaseUrl = process.env.BASE_URL as string;\n\n  return (\n    <I18nProvider\n      lng=\"en\"\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          openbridgeTempDictionary: () =>\n            import(\"../locales/en/openbridge.json\"),\n        },\n      }}\n      debug={true}\n    >\n      <Suspense fallback={<AppServicesLoading />}>\n        <BrowserRouter basename={\"/\"}>\n          {initialized && (\n            <SmartEventsContextProvider\n              apiBaseUrl={apiBaseUrl}\n              getToken={getKeyCloakToken}\n              getUsername={getUsername}\n            >\n              <AppLayout>\n                <Routes />\n              </AppLayout>\n            </SmartEventsContextProvider>\n          )}\n        </BrowserRouter>\n      </Suspense>\n    </I18nProvider>\n  );\n};\n\nexport default App;\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"@patternfly/patternfly/patternfly.css\";\nimport \"@patternfly/patternfly/utilities/Accessibility/accessibility.css\";\nimport \"@patternfly/patternfly/utilities/Sizing/sizing.css\";\nimport \"@patternfly/patternfly/utilities/Spacing/spacing.css\";\nimport \"@patternfly/patternfly/utilities/Display/display.css\";\nimport { AppLayout } from \"@app/components/AppLayout/AppLayout\";\nimport Routes from \"@app/Routes/Routes\";\nimport {\n  AppServicesLoading,\n  I18nProvider,\n} from \"@rhoas/app-services-ui-components\";\nimport { SmartEventsContextProvider } from \"@contexts/SmartEventsContext\";\nimport { SetupWorkerApi } from \"msw/lib/types/setupWorker/glossary\";\n\n// App using mocked apis trough msw\n\nconst AppMocked = (): JSX.Element => {\n  // starting mock service worker\n  // eslint-disable-next-line @typescript-eslint/no-var-requires,jest/no-mocks-import\n  const { worker } = require(\"./../mocked-api/browser\") as {\n    worker: SetupWorkerApi;\n  };\n  void worker.start();\n\n  const apiBaseUrl = process.env.BASE_URL as string;\n  // setting up dummy auth functions\n  const getToken = (): Promise<string> => Promise.resolve(\"dummy\");\n  const getUsername = (): Promise<string> => Promise.resolve(\"username\");\n\n  return (\n    <SmartEventsContextProvider\n      getToken={getToken}\n      getUsername={getUsername}\n      apiBaseUrl={apiBaseUrl}\n    >\n      <I18nProvider\n        lng=\"en\"\n        resources={{\n          en: {\n            common: () =>\n              import(\n                \"@rhoas/app-services-ui-components/locales/en/common.json\"\n              ),\n            openbridgeTempDictionary: () =>\n              import(\"../locales/en/openbridge.json\"),\n          },\n        }}\n        debug={true}\n      >\n        <Suspense fallback={<AppServicesLoading />}>\n          <BrowserRouter basename={\"/\"}>\n            <AppLayout>\n              <Routes />\n            </AppLayout>\n          </BrowserRouter>\n        </Suspense>\n      </I18nProvider>\n    </SmartEventsContextProvider>\n  );\n};\n\nexport default AppMocked;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport AppMocked from \"./AppMocked\";\n\n// rendering the app with mocked APIs or the regular one based on env MOCKED_API\nif (process.env.MOCKED_API) {\n  ReactDOM.render(<AppMocked />, document.getElementById(\"root\"));\n} else {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n"],"names":["processorData","kind","id","name","type","href","submitted_at","published_at","transformationTemplate","status","action","parameters","channel","webhookUrl","filters","key","value","source","token","apiUrl","apiDelay","db","factory","bridge","primaryKey","String","endpoint","processor","oneOf","Array","map","instance","index","create","processorItem","handlers","r","req","res","ctx","page","parseInt","url","searchParams","get","size","items","findMany","take","skip","orderBy","delay","json","length","total","count","bridgeId","params","findFirst","where","equals","error_not_found","reason","body","error_duplicated_resource","Date","toISOString","newBridge","resourceStatusFlow","includes","existingBridge","error_bridge_not_deletable","update","data","query","item","cleanupProcessor","processorId","newProcessor","existingProcessors","updatedProcessor","existingProcessor","mode","wait","fail","waitTime","updateResource","stepOne","stepTwo","setTimeout","delete","deleteProcessor","deleteBridge","omitProperties","push","omit","code","worker","setupWorker","keycloak","setKeycloakInstance","init","realm","clientId","onLoad","promiseType","e","undefined","console","warn","getKeyCloakToken","updateToken","error","getUsername","tokenParsed","then","AppLayout","children","isNavOpen","setIsNavOpen","useState","isMobileView","setIsMobileView","isNavOpenMobile","setIsNavOpenMobile","HeaderTools","PageHeaderTools","PageHeaderToolsGroup","Button","variant","onClick","logout","Header","PageHeader","logo","LogoImg","showNavToggle","headerTools","onNavToggle","Navigation","Nav","role","theme","NavList","NavItem","ouiaId","NavLink","to","activeClassName","Sidebar","PageSidebar","nav","Page","mainContainerId","header","sidebar","onPageResize","props","mobileView","history","useHistory","src","alt","initialized","setInitialized","useEffect","I18nProvider","lng","resources","en","common","openbridgeTempDictionary","debug","Suspense","fallback","AppServicesLoading","BrowserRouter","basename","SmartEventsContext","apiBaseUrl","getToken","Routes","start","Promise","resolve","MOCKED_API","document","getElementById"],"sourceRoot":""}