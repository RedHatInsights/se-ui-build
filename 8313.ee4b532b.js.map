{"version":3,"file":"8313.ee4b532b.js","mappings":"kIAsBO,MAAMA,EAAgB,CACzBC,OAAQ,SACRC,KAAM,OACNC,aAAc,kB,6HCTlB,MA0CA,EA1CsBC,IACpB,MAAM,SAAEC,EAAQ,YAAEC,EAAW,SAAEC,EAAQ,WAAEC,GAAeJ,EAOxD,OACE,oCACE,kBAAC,EAAAK,aAAY,CACXC,IAAI,KACJC,UAAW,CACTC,GAAI,CACFC,OAAQ,IACN,oCAGFC,yBAA0B,IACxB,uCAGNC,OAAO,GAEP,kBAAC,EAAAC,SAAQ,CAACC,SAAU,kBAAC,EAAAC,mBAAkB,OACrC,kBAAC,IAA0B,CACzBV,WAAYA,EACZD,SAAU,KAA6B,8DAAOA,MAAe,MAC7DD,YAAa,KAA4B,iDACvC,aAAOA,MAAkB,OAG3B,kBAAC,EAAAa,cAAa,CAACd,SAAUA,GACvB,kBAAC,IAAM","sources":["webpack://smartevents-ui/./openapi/generated/model/processor-type.ts","webpack://smartevents-ui/./src/AppFederated.tsx"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Red Hat Openshift SmartEvents Fleet Manager\n * The API exposed by the fleet manager of the SmartEvents service.\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: openbridge-dev@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ProcessorType = {\n    Source: 'source',\n    Sink: 'sink',\n    ErrorHandler: 'error_handler'\n} as const;\n\nexport type ProcessorType = typeof ProcessorType[keyof typeof ProcessorType];\n\n\n\n","import React, { Suspense } from \"react\";\nimport {\n  AppServicesLoading,\n  I18nProvider,\n} from \"@rhoas/app-services-ui-components\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"@app/Routes/Routes\";\nimport { SmartEventsContextProvider } from \"@contexts/SmartEventsContext\";\n\nexport interface AppFederatedProps {\n  apiBaseUrl: string;\n  basename: string;\n  getUsername: () => Promise<string> | undefined;\n  getToken: () => Promise<string> | undefined;\n}\n\nconst AppFederated = (props: AppFederatedProps): JSX.Element => {\n  const { basename, getUsername, getToken, apiBaseUrl } = props;\n\n  /* The i18n provider is necessary to consume the open bridge dictionary\n        during initial local development. When the first OB UI release will be ready, the\n        OB dictionary will be moved to app-services-ui-components, where\n        all dictionaries reside. See https://issues.redhat.com/browse/MGDOBR-408\n        for more details. */\n  return (\n    <>\n      <I18nProvider\n        lng=\"en\"\n        resources={{\n          en: {\n            common: () =>\n              import(\n                \"@rhoas/app-services-ui-components/locales/en/common.json\"\n              ),\n            openbridgeTempDictionary: () =>\n              import(\"../locales/en/openbridge.json\"),\n          },\n        }}\n        debug={true}\n      >\n        <Suspense fallback={<AppServicesLoading />}>\n          <SmartEventsContextProvider\n            apiBaseUrl={apiBaseUrl}\n            getToken={async (): Promise<string> => (await getToken()) || \"\"}\n            getUsername={async (): Promise<string> =>\n              (await getUsername()) || \"\"\n            }\n          >\n            <BrowserRouter basename={basename}>\n              <Routes />\n            </BrowserRouter>\n          </SmartEventsContextProvider>\n        </Suspense>\n      </I18nProvider>\n    </>\n  );\n};\n\nexport default AppFederated;\n"],"names":["ProcessorType","Source","Sink","ErrorHandler","props","basename","getUsername","getToken","apiBaseUrl","I18nProvider","lng","resources","en","common","openbridgeTempDictionary","debug","Suspense","fallback","AppServicesLoading","BrowserRouter"],"sourceRoot":""}